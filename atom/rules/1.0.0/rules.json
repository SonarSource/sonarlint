{"version": "1.0.0","rules": [{"key": "BackticksUsage","title": "Backticks should not be used","tags": ["python3"],"implementations": [{"key": "python:BackticksUsage","language": "Python","title": "Backticks should not be used","description": "<p>Backticks are a deprecated alias for <code>repr()<\/code>. Don't use them any more, the syntax was removed in Python 3.0.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nreturn `num`  # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nreturn repr(num)\n<\/pre>","severity": "Blocker","tags": ["python3"]}]},{"key": "BitwiseOperators","title": "Bitwise operators should not be used in boolean contexts","tags": [],"implementations": [{"key": "javascript:BitwiseOperators","language": "JavaScript","title": "Bitwise operators should not be used in boolean contexts","description": "<p>The bitwise operators <code>&amp;<\/code>, <code>|<\/code> can be mistaken for the boolean operators <code>&amp;&amp;<\/code> and <code>||<\/code>.\n<\/p>\n<p>This rule raises an issue when <code>&amp;<\/code> or <code>|<\/code> is used in a boolean context.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (a &amp; b) { ... } \/\/ Noncompliant; &amp; used in error\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (a &amp;&amp; b) { ... }\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When a file contains other bitwise operations, (<code>^<\/code>, <code>&lt;&lt;<\/code>, <code>&gt;&gt;&gt;<\/code>, <code>&gt;&gt;<\/code>,\n<code>~<\/code>, <code>&amp;=<\/code>, <code>^=<\/code>, <code>|=<\/code>, <code>&lt;&lt;=<\/code>, <code>&gt;&gt;=<\/code>, <code>&gt;&gt;&gt;=<\/code> and\n<code>&amp;<\/code> or <code>|<\/code> used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that\nbitwise operations are truly intended in the file.<\/p>","severity": "Major","tags": []}]},{"key": "BoundOrAssignedEvalOrArguments","title": "\"eval\" and \"arguments\" should not be bound or assigned","tags": ["pitfall"],"implementations": [{"key": "javascript:BoundOrAssignedEvalOrArguments","language": "JavaScript","title": "\"eval\" and \"arguments\" should not be bound or assigned","description": "<p><code>eval<\/code> is used to evaluate a string as JavaScript code, and <code>arguments<\/code> is used to access function arguments through indexed\nproperties. As a consequence, <code>eval<\/code> and <code>arguments<\/code> should not be bound or assigned, because doing so would overwrite the\noriginal definitions of those two reserved words. <\/p>\n<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\neval = 17; \/\/ Noncompliant\narguments++; \/\/ Noncompliant\n++eval; \/\/ Noncompliant\nvar obj = { set p(arguments) { } }; \/\/ Noncompliant\nvar eval; \/\/ Noncompliant\ntry { } catch (arguments) { } \/\/ Noncompliant\nfunction x(eval) { } \/\/ Noncompliant\nfunction arguments() { } \/\/ Noncompliant\nvar y = function eval() { }; \/\/ Noncompliant\nvar f = new Function(\"arguments\", \"return 17;\"); \/\/ Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { \/\/ Compliant\n    \/\/ do something\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { }\nvar y = function fun() { };\nvar f = new Function(\"args\", \"return 17;\");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    \/\/ do something\n  }\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "DebuggerStatement","title": "Debugger statements should not be used","tags": ["cwe","user-experience"],"implementations": [{"key": "javascript:DebuggerStatement","language": "JavaScript","title": "Debugger statements should not be used","description": "<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint\nin the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to\nattacks in production.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  \/\/ Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n  \/\/ Wait for user to resume.\n  debugger;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  \/\/ Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489.html\">MITRE, CWE-489<\/a> - Leftover Debug Code <\/li>\n<\/ul>","severity": "Minor","tags": ["cwe","user-experience"]}]},{"key": "DuplicateFunctionArgument","title": "Function argument names should be unique","tags": [],"implementations": [{"key": "javascript:DuplicateFunctionArgument","language": "JavaScript","title": "Function argument names should be unique","description": "<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so they're not completely\ninaccessible).<\/p>\n<p>This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. Furthermore, in strict mode, declaring\narguments with the same name produces an error.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction compute(a, a, c) { \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction compute(a, b, c) { \/\/ Compliant\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "DuplicatePropertyName","title": "Property names should not be duplicated within a class or object literal","tags": ["pitfall"],"implementations": [{"key": "javascript:DuplicatePropertyName","language": "JavaScript","title": "Property names should not be duplicated within a class or object literal","description": "<p>JavaScript allows duplicate property names in classes and object literals, but only the last instance of a duplicated name determines the actual\nvalue that will be used for it. Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause\nmisunderstandings and bugs.<\/p>\n<p>Defining a <code>class<\/code> with a duplicated <code>constructor<\/code> will generate an error.<\/p>\n<p>Before ECMAScript 2015, using duplicate names will generate an error in JavaScript strict mode code.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key\": \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  'key': \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  key: \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  \\u006bey: \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  \"\\u006bey\": \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  \"\\x6bey\": \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  1: \"value\" \/\/ Noncompliant - duplicate of \"1\"\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key2\": \"value\",\n  'key3': \"value\",\n  key4: \"value\",\n  \\u006bey5: \"value\",\n  \"\\u006bey6\": \"value\",\n  \"\\x6bey7\": \"value\",\n  1b: \"value\"\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "EmptyBlock","title": "Nested blocks of code should not be left empty","tags": ["suspicious"],"implementations": [{"key": "javascript:EmptyBlock","language": "JavaScript","title": "Nested blocks of code should not be left empty","description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (var i = 0; i &lt; length; i++) {}  \/\/ Empty on purpose or missing piece of code ?\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch<\/code> blocks are ignored.<\/p>","severity": "Major","tags": ["suspicious"]}]},{"key": "Eval","title": "Code should not be dynamically injected and executed","tags": ["cwe","owasp-a3"],"implementations": [{"key": "javascript:Eval","language": "JavaScript","title": "Code should not be dynamically injected and executed","description": "<p>The <code>eval<\/code> function is a way to run arbitrary code at run-time. Dynamically evaluating code is slow and a potential security issue when\nthe arguments haven't been properly validated.<\/p>\n<p>In general it is better to avoid it altogether, particularly when there are safer alternatives.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar value = eval('obj.' + propName); \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar value = obj[propName];\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule will not raise an issue when the argument of the <code>eval<\/code> call is a literal string as it is reasonably safe.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/95.html\">MITRE CWE-95<\/a> - CWE-95: Improper Neutralization of Directives in Dynamically\n  Evaluated Code ('Eval Injection') <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3<\/a> - Cross-Site Scripting\n  (XSS) <\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","owasp-a3"]}]},{"key": "ExecStatementUsage","title": "The \"exec\" statement should not be used","tags": ["python3","obsolete"],"implementations": [{"key": "python:ExecStatementUsage","language": "Python","title": "The \"exec\" statement should not be used","description": "<p>Use of the <code>exec<\/code> statement could be dangerous, and should be avoided. Moreover, the <code>exec<\/code> statement was removed in Python\n3.0. Instead, the built-in <code>exec()<\/code> function can be used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nexec 'print 1' # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nexec('print 1')\n<\/pre>","severity": "Blocker","tags": ["obsolete","python3"]}]},{"key": "FunctionDefinitionInsideLoop","title": "Functions should not be defined inside loops","tags": ["suspicious"],"implementations": [{"key": "javascript:FunctionDefinitionInsideLoop","language": "JavaScript","title": "Functions should not be defined inside loops","description": "<p>Defining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer\nscopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar funs = [];\nfor (var i = 0; i &lt; 13; i++) {\n  funs[i] = function() { \/\/ Non-Compliant\n    return i;\n  };\n}\nconsole.log(funs[0]()); \/\/ 13 instead of 0\nconsole.log(funs[1]()); \/\/ 13 instead of 1\nconsole.log(funs[2]()); \/\/ 13 instead of 2\nconsole.log(funs[3]()); \/\/ 13 instead of 3\n...\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "InequalityUsage","title": "\"<>\" should not be used to test inequality","tags": ["obsolete"],"implementations": [{"key": "python:InequalityUsage","language": "Python","title": "\"<>\" should not be used to test inequality","description": "<p>The forms <code>&lt;&gt;<\/code> and <code>!=<\/code> are equivalent. But in Python 2.7.3 the <code>&lt;&gt;<\/code> form is considered obsolete.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nreturn a &lt;&gt; b # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nreturn a != b\n<\/pre>","severity": "Major","tags": ["obsolete"]}]},{"key": "MultilineStringLiterals","title": "Multiline string literals should not be used","tags": ["bad-practice"],"implementations": [{"key": "javascript:MultilineStringLiterals","language": "JavaScript","title": "Multiline string literals should not be used","description": "<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the\nbeginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message ' +\n    'actually that just keeps going and going -- an error ' +\n    'message to make the Energizer bunny blush (right through ' +\n    'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n    'you\\'ve got an error and all the extraneous whitespace is ' +\n    'just gravy.  Have a nice day.';\n<\/pre>","severity": "Minor","tags": ["bad-practice"]}]},{"key": "NonEmptyCaseWithoutBreak","title": "Switch cases should end with an unconditional \"break\" statement","tags": ["cwe","misra","cert","suspicious"],"implementations": [{"key": "javascript:NonEmptyCaseWithoutBreak","language": "JavaScript","title": "Switch cases should end with an unconditional \"break\" statement","description": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  \/\/ Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule is relaxed in the following cases:<\/p>\n<pre>\nswitch (myVariable) {\n  case 0:                                \/\/ Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                \/\/ Use of return statement\n    return;\n  case 3:                               \/\/ Ends with comment when fall-through is intentional\n    console.log(\"this case falls through\")\n    \/\/ fall through\n  case 4:                                \/\/ Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                \/\/ Use of continue statement\n    continue;\n  default:                               \/\/ For the last case, use of break statement is optional\n    doSomethingElse();\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used. <\/li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause <\/li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. <\/li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause <\/li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed <\/li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/484.html\">MITRE, CWE-484<\/a> - Omitted Break Statement in Switch <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/YIFLAQ\">CERT, MSC17-C.<\/a> - Finish every set of statements associated with a case\n  label with a break statement <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/ZoFLAQ\">CERT, MSC18-CPP.<\/a> - Finish every set of statements associated with a case\n  label with a break statement <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/ewHAAQ\">CERT, MSC52-J.<\/a> - Finish every set of statements associated with a case\n  label with a break statement <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","cwe","misra","suspicious"]}]},{"key": "OctalNumber","title": "Octal values should not be used","tags": ["misra","cert","pitfall"],"implementations": [{"key": "javascript:OctalNumber","language": "JavaScript","title": "Octal values should not be used","description": "<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar myNumber = 010;   \/\/ Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar myNumber = 8;\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. <\/li>\n  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used <\/li>\n  <li> MISRA C:2012, 7.1 - Octal constants shall not be used <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/_QC7AQ\">CERT, DCL18-C.<\/a> - Do not begin integer constants with 0 when specifying a\n  decimal value <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/hYClBg\">CERT, DCL50-J.<\/a> - Use visually distinct identifiers <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","misra","pitfall"]}]},{"key": "Parentheses","title": "Redundant pairs of parentheses should be removed","tags": ["confusing"],"implementations": [{"key": "javascript:Parentheses","language": "JavaScript","title": "Redundant pairs of parentheses should be removed","description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nlet x = (y \/ 2 + 1);   \/\/Compliant even if those parenthesis are useless for the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  \/\/ Noncompliant\n  \/\/...\n}\n\nreturn ((x + 1));  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nlet x = (y \/ 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  \/\/...\n}\n\nreturn (x + 1);\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "PreIncrementDecrement","title": "Increment and decrement operators should not be used","tags": [],"implementations": [{"key": "python:PreIncrementDecrement","language": "Python","title": "Increment and decrement operators should not be used","description": "<p>Python has no pre\/post increment\/decrement operator. For instance, <code>x++<\/code> and <code>x--<\/code> will fail to parse. More importantly,\n<code>++x<\/code> and <code>--x<\/code> will do nothing. To increment a number, simply write <code>x += 1<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n++x # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nx += 1\n<\/pre>","severity": "Major","tags": []}]},{"key": "PrimitiveWrappers","title": "Wrapper objects should not be used for primitive types","tags": ["pitfall"],"implementations": [{"key": "javascript:PrimitiveWrappers","language": "JavaScript","title": "Wrapper objects should not be used for primitive types","description": "<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,\njust remove the <code>new<\/code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a\nprimitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nlet x = new Number(\"0\");\nif (x) {\n  alert('hi');  \/\/ Shows 'hi'.\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nlet x = Number(\"0\");\nif (x) {\n  alert('hi');\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Cases when argument of primitive type constructor is a literal of the same type are ignored, except <code>new Boolean(false)<\/code>.<\/p>\n<pre>\nlet booleanObject = new Boolean(true);\nlet numberObject = new Number(0);\nlet stringObject = new String('');\n<\/pre>","severity": "Minor","tags": ["pitfall"]}]},{"key": "PrintStatementUsage","title": "The \"print\" statement should not be used","tags": ["python3","obsolete"],"implementations": [{"key": "python:PrintStatementUsage","language": "Python","title": "The \"print\" statement should not be used","description": "<p>The <code>print<\/code> statement was removed in Python 3.0. The built-in function should be used instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nprint '1'  # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nprint('1')\n<\/pre>","severity": "Blocker","tags": ["obsolete","python3"]}]},{"key": "S100","title": "Method names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "python:S100","language": "Python","title": "Method names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all method\nnames match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$<\/p>\n<pre>\nclass MyClass:\n    def MyMethod(a,b):\n        ...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass:\n    def my_method(a,b):\n        ...\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S101","title": "Class names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "php:S101","language": "PHP","title": "Class names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\nclass my_class {...}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {...}\n<\/pre>","severity": "Minor","tags": ["convention"]},{"key": "python:S101","language": "Python","title": "Class names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\nclass myClass:\n   ...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass:\n   ...\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S104","title": "Files should not have too many lines","tags": ["brain-overload"],"implementations": [{"key": "php:S104","language": "PHP","title": "Files should not have too many lines","description": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S105","title": "Tabulation characters should not be used","tags": ["convention","psr2"],"implementations": [{"key": "php:S105","language": "PHP","title": "Tabulation characters should not be used","description": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.<\/p>\n<p>So the use of tabulation character must be banned.<\/p>","severity": "Minor","tags": ["convention","psr2"]}]},{"key": "S1066","title": "Collapsible \"if\" statements should be merged","tags": ["clumsy"],"implementations": [{"key": "php:S1066","language": "PHP","title": "Collapsible \"if\" statements should be merged","description": "<p>Merging collapsible <code>if<\/code> statements increases the code's readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (condition1) {\n  if (condition2) {\n    ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (condition1 &amp;&amp; condition2) {\n  ...\n}\n<\/pre>","severity": "Major","tags": ["clumsy"]},{"key": "python:S1066","language": "Python","title": "Collapsible \"if\" statements should be merged","description": "<p>Merging collapsible <code>if<\/code> statements increases the code's readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif condition1:\n    if condition2:\n        # ...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif condition1 and condition2:\n    # ...\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S1067","title": "Expressions should not be too complex","tags": ["brain-overload"],"implementations": [{"key": "php:S1067","language": "PHP","title": "Expressions should not be too complex","description": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;<\/code>, <code>||<\/code> and <code>condition ? ifTrue : ifFalse<\/code>\noperators it contains.<\/p>\n<p>A single expression's complexity should not become too high to keep the code readable.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default threshold value of 3<\/p>\n<pre>\nif ((($condition1 &amp;&amp; $condition2) || ($condition3 &amp;&amp; $condition4)) &amp;&amp; $condition5) { ... }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif ( (my_first_condition() || my_second_condition()) &amp;&amp; my_last_condition()) { ... }\n<\/pre>","severity": "Critical","tags": ["brain-overload"]}]},{"key": "S1068","title": "Unused \"private\" fields should be removed","tags": ["cert","unused"],"implementations": [{"key": "php:S1068","language": "PHP","title": "Unused \"private\" fields should be removed","description": "<p>If a <code>private<\/code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass {\n  private $foo = 4;                       \/\/foo is unused\n\n  public function compute($a) {\n    return $a * 4;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {\n\n  public function compute($a) {\n    return $a * 4;\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","unused"]}]},{"key": "S107","title": "Functions should not have too many parameters","tags": ["brain-overload"],"implementations": [{"key": "php:S107","language": "PHP","title": "Functions should not have too many parameters","description": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With a maximum number of 4 parameters:<\/p>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4, $param5) {\n...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4) {\n...\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]},{"key": "python:S107","language": "Python","title": "Functions, methods and lambdas should not have too many parameters","description": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With a maximum number of 4 parameters:<\/p>\n<pre>\ndef do_something(param1, param2, param3, param4, param5):\n\t...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndef do_something(param1, param2, param3, param4):\n\t...\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S108","title": "Nested blocks of code should not be left empty","tags": ["suspicious"],"implementations": [{"key": "php:S108","language": "PHP","title": "Nested blocks of code should not be left empty","description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor ($i = 0; $i &lt; 42; $i++){}  \/\/ Empty on purpose or missing piece of code ?\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When a block contains a comment, this block is not considered to be empty.<\/p>","severity": "Major","tags": ["suspicious"]},{"key": "python:S108","language": "Python","title": "Nested blocks of code should not be left empty","description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor i in range(3):\n    pass\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When a block contains a comment, this block is not considered to be empty.<\/p>","severity": "Major","tags": ["suspicious"]}]},{"key": "S1109","title": "A close curly brace should be located at the beginning of a line","tags": ["convention"],"implementations": [{"key": "php:S1109","language": "PHP","title": "A close curly brace should be located at the beginning of a line","description": "<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(condition) {\n  doSomething();}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. <\/p>\n<pre>\nif(condition) {doSomething();}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1110","title": "Redundant pairs of parentheses should be removed","tags": ["confusing"],"implementations": [{"key": "python:S1110","language": "Python","title": "Redundant pairs of parentheses should be removed","description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nreturn ((3))        # Noncompliant\nreturn ((x + 1))    # Noncompliant\nx = ((y \/ 2)) + 1   # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nreturn 3\nreturn (3)\nreturn x + 1\nreturn (x + 1)\nx = y \/ 2 + 1\nx = (y \/ 2) + 1\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "S1116","title": "Empty statements should be removed","tags": ["misra","cert","unused"],"implementations": [{"key": "php:S1116","language": "PHP","title": "Empty statements should be removed","description": "<p>Empty statements, i.e. <code>;<\/code>, are usually introduced by mistake, for example because:<\/p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. <\/li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;<\/code>. <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction doSomething() {\n  ;                                              \/\/ Noncompliant - was used as a kind of TODO marker\n}\n\nfunction doSomethingElse($p) {\n  echo $p;;                                      \/\/ Noncompliant - double ;\n}\n\nfor ($i = 1; $i &lt;= 10; doSomething($i), $i++);   \/\/ Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction doSomething() {}\n\nfunction doSomethingElse($p) {\n  echo $p;\n\n  for ($i = 1; $i &lt;= 10; $i++) {\n    doSomething($i);\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. <\/li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/7gCTAw\">CERT, MSC51-J.<\/a> - Do not place a semicolon immediately following an if, for,\n  or while condition <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/i4FtAg\">CERT, EXP15-C.<\/a> - Do not place a semicolon on the same line as an if, for,\n  or while statement <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","misra","unused"]}]},{"key": "S1117","title": "Local variables should not have the same name as class fields","tags": ["cert","pitfall"],"implementations": [{"key": "php:S1117","language": "PHP","title": "Local variables should not have the same name as class fields","description": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo {\n  public $myField;\n\n  public function doSomething() {\n    $myField = 0;\n    ...\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/2ADEAw\">CERT, DCL51-J.<\/a> - Do not shadow or obscure identifiers in subscopes <\/li>\n<\/ul>","severity": "Major","tags": ["cert","pitfall"]}]},{"key": "S1119","title": "Labels should not be used","tags": ["confusing"],"implementations": [{"key": "javascript:S1119","language": "JavaScript","title": "Labels should not be used","description": "<p>Labels are not commonly used, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to follow,\nwhich reduces the code's readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nmyLabel: {\n  let x = doSomething();\n  if (x &gt; 0) {\n    break myLabel;\n  }\n  doSomethingElse();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nlet x = doSomething();\nif (x &lt;= 0) {\n  doSomethingElse();\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Labeled loops are ignored.<\/p>","severity": "Major","tags": ["confusing"]}]},{"key": "S112","title": "Generic exceptions ErrorException, RuntimeException and Exception should not be thrown","tags": ["cwe","error-handling","cert"],"implementations": [{"key": "php:S112","language": "PHP","title": "Generic exceptions ErrorException, RuntimeException and Exception should not be thrown","description": "<p>If you throw a general exception type, such as ErrorException, RuntimeException, or Exception in a library or framework, it forces consumers to\ncatch all exceptions, including unknown exceptions that they do not know how to handle.<\/p>\n<p>Instead, either throw a subtype that already exists in the Standard PHP Library, or create your own type that derives from Exception.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nthrow new Exception();  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nthrow new InvalidArgumentException();\n\/\/ or\nthrow new UnexpectedValueException();\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/397.html\">MITRE, CWE-397<\/a> - Declaration of Throws for Generic Exception <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/BoB3AQ\">CERT, ERR07-J.<\/a> - Do not throw RuntimeException, Exception, or Throwable\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","error-handling"]}]},{"key": "S1125","title": "Boolean literals should not be redundant","tags": ["clumsy"],"implementations": [{"key": "php:S1125","language": "PHP","title": "Boolean literals should not be redundant","description": "<p>Redundant Boolean literals should be removed from expressions to improve readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ($booleanVariable == true) { \/* ... *\/ }\nif ($booleanVariable != true) { \/* ... *\/ }\nif ($booleanVariable || false) { \/* ... *\/ }\ndoSomething(!false);\n\n$booleanVariable = condition ? true : exp;\n$booleanVariable = condition ? false : exp;\n$booleanVariable = condition ?  exp : true;\n$booleanVariable = condition ?  exp : false;\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif ($booleanVariable) { \/* ... *\/ }\nif (!$booleanVariable) { \/* ... *\/ }\nif ($booleanVariable) { \/* ... *\/ }\ndoSomething(true);\n\n$booleanVariable = condition || exp;\n$booleanVariable = !condition &amp;&amp; exp;\n$booleanVariable = !condition ||  exp;\n$booleanVariable = condition &amp;&amp; exp;\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>The use of literal booleans in comparisons which use identity operators (<code>===<\/code> and <code>!==<\/code>) are ignored.<\/p>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1126","title": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","tags": ["clumsy"],"implementations": [{"key": "php:S1126","language": "PHP","title": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","description": "<p>Return of boolean literal statements wrapped into <code>if-then-else<\/code> ones should be simplified.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nreturn expression;\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1134","title": "Track uses of \"FIXME\" tags","tags": ["cwe"],"implementations": [{"key": "php:S1134","language": "PHP","title": "Track uses of \"FIXME\" tags","description": "<p><code>FIXME<\/code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.<\/p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.<\/p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction divide($numerator, $denominator) {\n  return $numerator \/ $denominator;              \/\/ FIXME denominator value might be  0\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/546.html\">MITRE, CWE-546<\/a> - Suspicious Comment <\/li>\n<\/ul>","severity": "Major","tags": ["cwe"]},{"key": "python:S1134","language": "Python","title": "Track uses of \"FIXME\" tags","description": "<p><code>FIXME<\/code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.<\/p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.<\/p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ndef divide(numerator, denominator):\n  return numerator \/ denominator              # FIXME denominator value might be 0\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/546.html\">MITRE, CWE-546<\/a> - Suspicious Comment <\/li>\n<\/ul>","severity": "Major","tags": ["cwe"]}]},{"key": "S1135","title": "Track uses of \"TODO\" tags","tags": ["cwe"],"implementations": [{"key": "php:S1135","language": "PHP","title": "Track uses of \"TODO\" tags","description": "<p><code>TODO<\/code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.<\/p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.<\/p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction doSomething() {\n  \/\/ TODO\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/546.html\">MITRE, CWE-546<\/a> - Suspicious Comment <\/li>\n<\/ul>","severity": "Info","tags": ["cwe"]}]},{"key": "S114","title": "Interface names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "php:S114","language": "PHP","title": "Interface names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\ninterface myInterface {...} \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ninterface MyInterface {...}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1142","title": "Functions should not contain too many return statements","tags": ["brain-overload"],"implementations": [{"key": "php:S1142","language": "PHP","title": "Functions should not contain too many return statements","description": "<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default threshold of 3:<\/p>\n<pre>\nfunction myFunction(){ \/\/ Noncompliant as there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1143","title": "Jump statements should not occur in \"finally\" blocks","tags": ["cwe","error-handling","cert"],"implementations": [{"key": "javascript:S1143","language": "JavaScript","title": "Jump statements should not occur in \"finally\" blocks","description": "<p>Using <code>return<\/code>, <code>break<\/code>, <code>throw<\/code>, and <code>continue<\/code> from a <code>finally<\/code> block overwrites similar\nstatements from the suspended <code>try<\/code> and <code>catch<\/code> blocks.<\/p>\n<p>This rule raises an issue when a jump statement (<code>break<\/code>, <code>continue<\/code>, <code>return<\/code> and <code>throw<\/code>) would force\ncontrol flow to leave a <code>finally<\/code> block. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; \/\/ We expect 1 to be returned\n    } catch(err) {\n        return 2; \/\/ Or 2 in cases of error\n    } finally {\n        return 3; \/\/ Noncompliant: 3 is returned before 1, or 2, which we did not expect\n    }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; \/\/ We expect 1 to be returned\n    } catch(err) {\n        return 2; \/\/ Or 2 in cases of error\n    }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/584.html\">MITRE, CWE-584<\/a> - Return Inside Finally Block <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/mIEbAQ\">CERT, ERR04-J.<\/a> - Do not complete abruptly from a finally block <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","error-handling"]}]},{"key": "S1144","title": "Unused \"private\" methods should be removed","tags": ["cert","unused"],"implementations": [{"key": "php:S1144","language": "PHP","title": "Unused \"private\" methods should be removed","description": "<p><code>private<\/code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Foo\n{\n  private function Foo() {}   \/\/ Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n    ...\n  }\n\n  private function unusedPrivateFunction() {  \/\/ Noncompliant\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Foo\n{\n  private function Foo(){}   \/\/ Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/OYIyAQ\">CERT, MSC07-CPP.<\/a> - Detect and remove dead code <\/li>\n<\/ul>","severity": "Major","tags": ["cert","unused"]}]},{"key": "S1145","title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed","tags": ["cwe","misra"],"implementations": [{"key": "php:S1145","language": "PHP","title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed","description": "<p><code>if<\/code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if<\/code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.<\/p>\n<p>There are three possible causes for the presence of such code: <\/p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. <\/li>\n  <li> Some value was left unset. <\/li>\n  <li> Some logic is not doing what the programmer thought it did. <\/li>\n<\/ul>\n<p>In any of these cases, unconditional <code>if<\/code> statements should be removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (true) {  \/\/ Noncompliant\n  doSomething();\n}\n...\nif (false) {  \/\/ Noncompliant\n  doSomethingElse();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndoSomething();\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489.html\">MITRE, CWE-489<\/a> - Leftover Debug Code <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/570.html\">MITRE, CWE-570<\/a> - Expression is Always False <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/571.html\">MITRE, CWE-571<\/a> - Expression is Always True <\/li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. <\/li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant <\/li>\n<\/ul>","severity": "Major","tags": ["cwe","misra"]}]},{"key": "S115","title": "Constant names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "php:S115","language": "PHP","title": "Constant names should comply with a naming convention","description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$<\/code>:<\/p>\n<pre>\ndefine(\"const1\", true);\n\nclass Foo {\n    const const2 = \"bar\";\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndefine(\"CONST1\", true);\n\nclass Foo {\n    const CONST2 = \"bar\";\n}\n<\/pre>","severity": "Critical","tags": ["convention"]}]},{"key": "S1151","title": "\"switch case\" clauses should not have too many lines","tags": ["brain-overload"],"implementations": [{"key": "php:S1151","language": "PHP","title": "\"switch case\" clauses should not have too many lines","description": "<p>The <code>switch<\/code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case<\/code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case<\/code> clause should be extracted into a dedicated method.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With a threshold of 5:<\/p>\n<pre>\nswitch ($var) {\n  case 0:  \/\/ 6 lines till next case\n    methodCall1();\n    methodCall2();\n    methodCall3();\n    methodCall4();\n    break;\n  default:\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch ($var) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    break;\n}\n\nfunction doSomething(){\n  methodCall1(\"\");\n  methodCall2(\"\");\n  methodCall3(\"\");\n  methodCall4(\"\");\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S116","title": "Field names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "python:S116","language": "Python","title": "Field names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default regular expression <code>^[_a-z][_a-z0-9]*$<\/code>:<\/p>\n<pre>\nclass MyClass:\n  myField = 1\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass:\n  my_field = 1\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S117","title": "Local variable and function parameter names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "python:S117","language": "Python","title": "Local variable and function parameter names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local\nvariable and function parameter names match a provided regular expression.<\/p>\n<h2>Exceptions<\/h2>\n<p>Loop counters are ignored by this rule.<\/p>\n<pre>\nfor i in range(limit):  # Compliant\n    print(i)\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1172","title": "Unused function parameters should be removed","tags": ["misra","cert","unused"],"implementations": [{"key": "php:S1172","language": "PHP","title": "Unused function parameters should be removed","description": "<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction doSomething($a, $b) { \/\/ \"$a\" is unused\n  return compute($b);\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction doSomething($b) {\n  return compute($b);\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Functions in classes that override a class or implement interfaces are ignored.<\/p>\n<pre>\nclass C extends B {\n\n  function doSomething($a, $b) {     \/\/ no issue reported on $b\n    compute($a);\n  }\n\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. <\/li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","misra","unused"]}]},{"key": "S1185","title": "Overriding methods should do more than simply call the same method in the super class","tags": ["redundant","clumsy"],"implementations": [{"key": "php:S1185","language": "PHP","title": "Overriding methods should do more than simply call the same method in the super class","description": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final<\/code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals<\/code>, <code>hashCode<\/code> and <code>toString<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Child extends Parent {\n\n  public function func($n,$m) {\n    parent::func($n$m);  \/\/ Noncompliant\n  }\n}\n\nclass Parent {\n  public function func($n, $m) {\n    \/\/ do something\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Child extends Parent {\n\n  public function func($n,$m) {\n    parent::func($n$m);\n    \/\/ do additional things...\n  }\n}\n\nclass Parent {\n  public function func($n, $m) {\n    \/\/ do something\n  }\n}\n<\/pre>\n<p>or<\/p>\n<pre>\nclass Child extends Parent {\n  \/\/ function eliminated\n}\n\nclass Parent {\n  public function func($n, $m) {\n    \/\/ do something\n  }\n}\n<\/pre>","severity": "Minor","tags": ["clumsy","redundant"]}]},{"key": "S1192","title": "String literals should not be duplicated","tags": ["design"],"implementations": [{"key": "php:S1192","language": "PHP","title": "String literals should not be duplicated","description": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.<\/p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default threshold of 3:<\/p>\n<pre>\nfunction run() {\n  prepare('action1');                              \/\/ Non-Compliant - 'action1' is duplicated 3 times\n  execute('action1');\n  release('action1');\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nACTION_1 = 'action1';\n\nfunction run() {\n  prepare(ACTION_1);\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.<\/p>","severity": "Critical","tags": ["design"]}]},{"key": "S121","title": "Control structures should use curly braces","tags": ["misra","cert","pitfall"],"implementations": [{"key": "php:S121","language": "PHP","title": "Control structures should use curly braces","description": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n\/\/ the two statements seems to be attached to the if statement, but that is only true for the first one:\nif (condition)\n  executeSomething();\n  checkSomething();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (condition) {\n  executeSomething();\n  checkSomething();\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement <\/li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement <\/li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement <\/li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement <\/li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/1QGMAg\">CERT, EXP19-C.<\/a> - Use braces for the body of an if, for, or while statement\n  <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/3wHEAw\">CERT, EXP52-J.<\/a> - Use braces for the body of an if, for, or while statement\n  <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","misra","pitfall"]}]},{"key": "S1219","title": "\"switch\" statements should not contain non-case labels","tags": ["misra","suspicious"],"implementations": [{"key": "javascript:S1219","language": "JavaScript","title": "\"switch\" statements should not contain non-case labels","description": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.<\/p>\n<h2>Noncompliant Code Examples<\/h2>\n<p>Case 1, the code is syntactically correct but the behavior is not the expected one<\/p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   \/\/ instead of \"case WEDNESDAY\"\n    doSomething();\n    break;\n  ...\n}\n<\/pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable <\/p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i = 0 ; i &lt; X ; i++) {\n         \/* ... *\/\n        break foo;  \/\/ this break statement doesn't relate to the nesting case TUESDAY\n         \/* ... *\/\n    }\n    break;\n    \/* ... *\/\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<p>Case 1<\/p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n<\/pre>\n<p>Case 2<\/p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); \/\/ put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    \/* ... *\/\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used. <\/li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. <\/li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed <\/li>\n<\/ul>","severity": "Blocker","tags": ["misra","suspicious"]}]},{"key": "S122","title": "Statements should be on separate lines","tags": ["convention","psr2"],"implementations": [{"key": "php:S122","language": "PHP","title": "Statements should be on separate lines","description": "<p>For better readability, do not put more than one statement on a single line.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(someCondition) doSomething();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Anonymous functions containing a single statement are ignored.<\/p>\n<pre>\n$max_comparator = function ($v) { return $v &gt; 2; };           \/\/ Compliant\n$max_comparator = function ($v) { echo $v; return $v &gt; 2; };  \/\/ Noncompliant\n<\/pre>","severity": "Major","tags": ["convention","psr2"]}]},{"key": "S125","title": "Sections of code should not be \"commented out\"","tags": ["misra","unused"],"implementations": [{"key": "php:S125","language": "PHP","title": "Sections of code should not be \"commented out\"","description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.<\/p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". <\/li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. <\/li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. <\/li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" <\/li>\n<\/ul>","severity": "Major","tags": ["misra","unused"]},{"key": "python:S125","language": "Python","title": "Sections of code should not be \"commented out\"","description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.<\/p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". <\/li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. <\/li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. <\/li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" <\/li>\n<\/ul>","severity": "Major","tags": ["misra","unused"]}]},{"key": "S1264","title": "A \"while\" loop should be used instead of a \"for\" loop","tags": ["clumsy"],"implementations": [{"key": "php:S1264","language": "PHP","title": "A \"while\" loop should be used instead of a \"for\" loop","description": "<p>When only the condition expression is defined in a <code>for<\/code> loop, but the init and increment expressions are missing, a <code>while<\/code>\nloop should be used instead to increase readability. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (;condition;) { \/*...*\/ }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nwhile (condition) { \/*...*\/ }\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S127","title": "\"for\" loop stop conditions should be invariant","tags": ["misra","pitfall"],"implementations": [{"key": "php:S127","language": "PHP","title": "\"for\" loop stop conditions should be invariant","description": "<p>A <code>for<\/code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. <\/p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.<\/p>\n<p>This rule tracks three types of non-invariant stop conditions:<\/p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for<\/code> loop <\/li>\n  <li> When the stop condition depend upon a method call <\/li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++) {\n  echo $i;\n  if(condition) {\n    $i = 20;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++) {\n  echo $i;\n}\n\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for<\/em> loop for iteration counting shall not be modified in the body of the\n  loop. <\/li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter<\/em> shall not be modified within <em>condition<\/em> or <em>statement<\/em>. <\/li>\n<\/ul>","severity": "Major","tags": ["misra","pitfall"]}]},{"key": "S1301","title": "\"switch\" statements should have at least 3 \"case\" clauses","tags": ["misra","bad-practice"],"implementations": [{"key": "php:S1301","language": "PHP","title": "\"switch\" statements should have at least 3 \"case\" clauses","description": "<p><code>switch<\/code> statements are useful when there are many different cases depending on the value of the same expression.<\/p>\n<p>For just one or two cases however, the code will be more readable with <code>if<\/code> statements.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch ($variable) {\n  case 0:\n    do_something();\n    break;\n  default:\n    do_something_else();\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif ($variable == 0) {\n  do_something();\n} else {\n  do_something_else();\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. <\/li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. <\/li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses <\/li>\n<\/ul>","severity": "Minor","tags": ["bad-practice","misra"]}]},{"key": "S131","title": "Statements should end with a \"case default\" clause","tags": ["cwe","misra","cert"],"implementations": [{"key": "php:S131","language": "PHP","title": "Statements should end with a \"case default\" clause","description": "<p>The requirement for a final <code>case default<\/code> clause is defensive programming. The clause should either take appropriate action, or contain\na suitable comment as to why no action is taken. Even when the <code>switch<\/code> covers all current values of an <code>enum<\/code>, a default case\nshould still be used because there is no guarantee that the <code>enum<\/code> won't be extended.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch ($param) {  \/\/missing default clause\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n}\n\nswitch ($param) {\n  default: \/\/ default clause should be the last one\n    error();\n    break;\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch ($param) {\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n  default:\n    error();\n    break;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used. <\/li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause <\/li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. <\/li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause <\/li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed <\/li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch<\/em> statement shall have a <em>default<\/em> label <\/li>\n  <li> MISRA C:2012, 16.5 - A <em>default<\/em> label shall appear as either the first or the last <em>switch label<\/em> of a <em>switch<\/em> statement\n  <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/478.html\">MITRE, CWE-478<\/a> - Missing Default Case in Switch Statement <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/YgE\">CERT, MSC01-C.<\/a> - Strive for logical completeness <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/JoIyAQ\">CERT, MSC01-CPP.<\/a> - Strive for logical completeness <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe","misra"]}]},{"key": "S1313","title": "IP addresses should not be hardcoded","tags": ["cert"],"implementations": [{"key": "python:S1313","language": "Python","title": "IP addresses should not be hardcoded","description": "<p>Hardcoding an IP address into source code is a bad idea for several reasons:<\/p>\n<ul>\n  <li> a recompile is required if the address changes <\/li>\n  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) <\/li>\n  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer <\/li>\n  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nip = '127.0.0.1'\nsock = socket.socket()\nsock.bind((ip, 9090))\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nip = config.get(section, ipAddress)\nsock = socket.socket()\nsock.bind((ip, 9090))\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/qQCHAQ\">CERT, MSC03-J.<\/a> - Never hard code sensitive information <\/li>\n<\/ul>","severity": "Minor","tags": ["cert"]}]},{"key": "S138","title": "Functions should not have too many lines","tags": ["brain-overload"],"implementations": [{"key": "php:S138","language": "PHP","title": "Functions should not have too many lines","description": "<p>A function that grows too large tends to aggregate too many responsibilities.<\/p>\n<p>Such functions inevitably become harder to understand and therefore harder to maintain. <\/p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.<\/p>\n<p>Those smaller functions will not only be easier to understand, but also probably easier to test.<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1442","title": "\"alert(...)\" should not be used","tags": ["cwe","user-experience"],"implementations": [{"key": "javascript:S1442","language": "JavaScript","title": "\"alert(...)\" should not be used","description": "<p><code>alert(...)<\/code> can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive\ninformation to attackers, and should never be displayed. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(unexpectedCondition)\n{\n  alert(\"Unexpected Condition\");\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489.html\">MITRE, CWE-489<\/a> - Leftover Debug Code <\/li>\n<\/ul>","severity": "Minor","tags": ["cwe","user-experience"]}]},{"key": "S1448","title": "Classes should not have too many methods","tags": ["brain-overload"],"implementations": [{"key": "php:S1448","language": "PHP","title": "Classes should not have too many methods","description": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1472","title": "Function call arguments should not start on new lines","tags": ["suspicious"],"implementations": [{"key": "javascript:S1472","language": "JavaScript","title": "Function call arguments should not start on new lines","description": "<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could\nlead to errors and most likely <em>will<\/em> lead to questions for maintainers.<\/p>\n<p>What was the initial intent of the developer?<\/p>\n<ol>\n  <li> Define a function and then execute some unrelated code inside a closure ? <\/li>\n  <li> Pass the second function as a parameter to the first one ? <\/li>\n<\/ol>\n<p>The first option will be the one chosen by the JavaScript interpreter.<\/p>\n<p>By extension, and to improve readability, any kind of function call argument should not start on new line.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar fn = function () {\n  \/\/...\n}\n\n(function () { \/\/ Noncompliant\n  \/\/...\n})();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<p>Either<\/p>\n<pre>\n\/\/ define a function\nvar fn = function () {\n  \/\/...\n}; \/\/ &lt;-- semicolon added\n\n\/\/ then execute some code inside a closure\n(function () {\n  \/\/...\n})();\n<\/pre>\n<p>Or <\/p>\n<pre>\nvar fn = function () {\n  \/\/...\n}(function () { \/\/ &lt;-- start function call arguments on same line\n  \/\/...\n})();\n<\/pre>","severity": "Minor","tags": ["suspicious"]}]},{"key": "S1479","title": "\"switch\" statements should not have too many \"case\" clauses","tags": ["brain-overload"],"implementations": [{"key": "php:S1479","language": "PHP","title": "\"switch\" statements should not have too many \"case\" clauses","description": "<p>When <code>switch<\/code> statements have large sets of <code>case<\/code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1481","title": "Unused local variables should be removed","tags": ["unused"],"implementations": [{"key": "php:S1481","language": "PHP","title": "Unused local variables should be removed","description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction numberOfMinutes($hours) {\n  $seconds = 0;   \/\/ seconds is never used\n  return hours * 60;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction numberOfMinutes($hours) {\n  return hours * 60;\n}\n<\/pre>","severity": "Minor","tags": ["unused"]},{"key": "python:S1481","language": "Python","title": "Unused local variables should be removed","description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ndef hello(name):\n    message = \"Hello \" + name # Noncompliant\n    print(name)\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndef hello(name):\n    message = \"Hello \" + name\n    print(message)\n<\/pre>","severity": "Minor","tags": ["unused"]}]},{"key": "S1488","title": "Local Variables should not be declared and then immediately returned or thrown","tags": ["clumsy"],"implementations": [{"key": "php:S1488","language": "PHP","title": "Local Variables should not be declared and then immediately returned or thrown","description": "<p>Declaring a variable only to immediately return or throw it is a bad practice.<\/p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction compute_duration_in_milliseconds() {\n  $duration = ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000 ;\n  return $duration;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction compute_duration_in_milliseconds() {\n  return ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000;\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1523","title": "Code should not be dynamically injected and executed","tags": ["cwe","owasp-a3"],"implementations": [{"key": "php:S1523","language": "PHP","title": "Code should not be dynamically injected and executed","description": "<p>The <code>eval<\/code> function is a way to run arbitrary code at run-time. <\/p>\n<p>According to the PHP documentation<\/p>\n<blockquote>\n  <p>The eval() language construct is very dangerous because it allows execution of arbitrary PHP code. Its use thus is discouraged. If you have\n  carefully verified that there is no other option than to use this construct, pay special attention not to pass any user provided data into it\n  without properly validating it beforehand.<\/p>\n<\/blockquote>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\neval($code_to_be_dynamically_executed)\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/95.html\">MITRE CWE-95<\/a> - CWE-95: Improper Neutralization of Directives in Dynamically\n  Evaluated Code ('Eval Injection') <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3<\/a> - Cross-Site Scripting\n  (XSS) <\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","owasp-a3"]}]},{"key": "S1536","title": "Function argument names should be unique","tags": [],"implementations": [{"key": "php:S1536","language": "PHP","title": "Function argument names should be unique","description": "<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be\nerror prone. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction compute($a, $a, $c) { \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction compute($a, $b, $c) { \/\/ Compliant\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S1542","title": "Function names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "python:S1542","language": "Python","title": "Function names should comply with a naming convention","description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$<\/p>\n<pre>\ndef MyFunction(a,b):\n    ...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndef my_function(a,b):\n    ...\n<\/pre>","severity": "Major","tags": ["convention"]}]},{"key": "S1599","title": "Variable variables should not be used","tags": ["brain-overload"],"implementations": [{"key": "php:S1599","language": "PHP","title": "Variable variables should not be used","description": "<p>PHP's \"variable variables\" feature (dynamically-named variables) is temptingly powerful, but can lead to unmaintainable code. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$var = 'foo';\n$$var = 'bar';      \/\/Noncompliant\n$$$var = 'hello';  \/\/Noncompliant\n\necho $foo; \/\/will display 'bar'\necho $bar; \/\/will display 'hello'\n<\/pre>","severity": "Blocker","tags": ["brain-overload"]}]},{"key": "S1600","title": "Deprecated predefined variables should not be used","tags": ["pitfall"],"implementations": [{"key": "php:S1600","language": "PHP","title": "Deprecated predefined variables should not be used","description": "<p>The following predefined variables are deprecated and should be replaced by the new versions:<\/p>\n<table>\n  <tbody>\n    <tr>\n      <th>Replace<\/th>\n      <th>With<\/th>\n    <\/tr>\n    <tr>\n      <td>$HTTP_SERVER_VARS<\/td>\n      <td>$_SERVER<\/td>\n    <\/tr>\n    <tr>\n      <td>$HTTP_GET_VARS<\/td>\n      <td>$_GET<\/td>\n    <\/tr>\n    <tr>\n      <td>$HTTP_POST_VARS<\/td>\n      <td>$_POST<\/td>\n    <\/tr>\n    <tr>\n      <td>$HTTP_POST_FILES<\/td>\n      <td>$_FILES<\/td>\n    <\/tr>\n    <tr>\n      <td>$HTTP_SESSION_VARS<\/td>\n      <td>$_SESSION<\/td>\n    <\/tr>\n    <tr>\n      <td>$HTTP_ENV_VARS<\/td>\n      <td>$_ENV<\/td>\n    <\/tr>\n    <tr>\n      <td>$HTTP_COOKIE_VARS<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\necho 'Name parameter value: ' . $HTTP_GET_VARS[\"name\"];\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\necho 'Name parameter value: ' . $_GET[\"name\"];\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1603","title": "PHP 4 constructor declarations should not be used","tags": ["pitfall"],"implementations": [{"key": "php:S1603","language": "PHP","title": "PHP 4 constructor declarations should not be used","description": "<p>In PHP 4, any function with the same name as the nesting class was considered a class constructor. In PHP 5, this mechanism has been deprecated and\nthe \"__construct\" method name should be used instead. If both styles are present in the same class, PHP 5 will treat the function named \"__construct\"\nas the class constructor. <\/p>\n<p>This rule rule raises an issue for each method with the same name as the enclosing class.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo {\n  function Foo(){...}\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Foo {\n  function __construct(){...}\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1605","title": "\"__construct\" functions should not make PHP 4-style calls to parent constructors","tags": ["convention"],"implementations": [{"key": "php:S1605","language": "PHP","title": "\"__construct\" functions should not make PHP 4-style calls to parent constructors","description": "<p>In PHP 5 both the way to declare a constructor and the way to make a call to a parent constructor have evolved. When declaring constructors with\nthe PHP5 <code>__construct<\/code> name, nested calls to parent constructors should also use the new <code>__constructor<\/code> name.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo extends Bar {\n  function __construct() {\n    parent::Bar();\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Foo extends Bar {\n  function __construct() {\n    parent::__construct();\n  }\n}\n<\/pre>","severity": "Major","tags": ["convention"]}]},{"key": "S1656","title": "Variables should not be self-assigned","tags": ["cert"],"implementations": [{"key": "javascript:S1656","language": "JavaScript","title": "Variables should not be self-assigned","description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction setName(name) {\n    name = name;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction setName(name) {\n    this.name = name;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]},{"key": "php:S1656","language": "PHP","title": "Variables should not be self-assigned","description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic function setName($name) {\n    $name = $name;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic function setName($name) {\n    $this-&gt;name = $name;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]},{"key": "python:S1656","language": "Python","title": "Variables should not be self-assigned","description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nname = name\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nname = other.name\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S1697","title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals","tags": [],"implementations": [{"key": "php:S1697","language": "PHP","title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals","description": "<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only<\/em> if it is null, leading to a guaranteed null pointer dereference.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ($obj == null &amp;&amp; $obj-&gt;isOpen()) {\n  echo \"Object is open\";\n}\n\nif ($obj != null || $obj-&gt;isOpen()) {\n  echo \"Object is not open\";\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif ($obj == null || $obj-&gt;isOpen()) {\n  echo \"Object is open\";\n}\n\nif ($obj != null &amp;&amp; !$obj-&gt;isOpen()) {\n  echo \"Object is not open\";\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S1700","title": "A field should not duplicate the name of its containing class","tags": ["brain-overload"],"implementations": [{"key": "python:S1700","language": "Python","title": "A field should not duplicate the name of its containing class","description": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.<\/p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo:\n  foo = ''\n\n  def getFoo(self):\n    ...\n\nfoo = Foo()\nfoo.getFoo() # what does this return?\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Foo:\n  name = ''\n\n  def getName(self):\n    ...\n\nfoo = Foo()\nfoo.getName()\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1716","title": "\"break\" and \"continue\" should not be used outside a loop","tags": [],"implementations": [{"key": "python:S1716","language": "Python","title": "\"break\" and \"continue\" should not be used outside a loop","description": "<p><code>break<\/code> and <code>continue<\/code> are unstructured control flow statements which make code harder to read. Additionally, more recent\nversions of Python raise a SyntaxError when modules containing <code>break<\/code> or <code>continue<\/code> outside of a loop are imported.<\/p>\n<p>Therefore, these statements should not be used outside of loops. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nnarg=len(sys.argv)\nif narg == 1:\n        print('@Usage: input_filename nelements nintervals')\n        break\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif narg == 1:\n        print('@Usage: input_filename nelements nintervals')\n        sys.exit()\n<\/pre>","severity": "Critical","tags": []}]},{"key": "S1751","title": "Jump statements should not be used unconditionally","tags": ["misra","cert","unused"],"implementations": [{"key": "javascript:S1751","language": "JavaScript","title": "Jump statements should not be used unconditionally","description": "<p>Having an unconditional <code>break<\/code>, <code>return<\/code> or <code>throw<\/code> in a loop renders it useless; the loop will only execute once\nand the loop structure itself is simply wasted keystrokes.<\/p>\n<p>Having an unconditional <code>continue<\/code> in a loop is itself wasted keystrokes.<\/p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return<\/code> in a function or method.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  break;  \/\/ loop only executes once\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  continue;  \/\/ this is meaningless; the loop would continue anyway\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  return;  \/\/ loop only executes once\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. <\/li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project<\/em> shall not contain <em>unreachable code<\/em>. <\/li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. <\/li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","misra","unused"]}]},{"key": "S1763","title": "Jump statements should not be followed by other statements","tags": ["cwe","misra","cert","unused"],"implementations": [{"key": "php:S1763","language": "PHP","title": "Jump statements should not be followed by other statements","description": "<p>Jump statements (<code>return<\/code>, <code>break<\/code>, <code>continue<\/code>, and <code>goto<\/code>) and <code>throw<\/code> expressions move\ncontrol flow out of the current code block. Typically, any statements in a block that come after a jump or <code>throw<\/code> are simply wasted\nkeystrokes lying in wait to confuse the unwary. <\/p>\n<p>Rarely, as illustrated below, code after a jump or <code>throw<\/code> is reachable. However, such code is difficult to understand, and should be\nrefactored. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction fun($a) {\n  $i = 10;\n  return $i + $a;\n  $i++;             \/\/ this is never executed\n}\n\nfunction foo($a) {\n  if ($a == 5) {\n    goto error;\n  } else {\n    \/\/ do the job\n  }\n  return;\n\n  error:\n    printf(\"don't use 5\"); \/\/ this is reachable but unreadable\n\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction fun($a) {\n  $i = 10;\n  return $i + $a;\n}\n\nfunction foo($a) {\n  if ($a == 5) {\n    handleError();\n  } else {\n    \/\/ do the job\n  }\n  return;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code <\/li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/561.html\">MITRE, CWE-561<\/a> - Dead Code <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/OYIyAQ\">CERT, MSC07-CPP.<\/a> - Detect and remove dead code <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","unused"]},{"key": "python:S1763","language": "Python","title": "Jump statements should not be followed by other statements","description": "<p>Jump statements (<code>return<\/code>, <code>break<\/code>, <code>continue<\/code>, and <code>raise<\/code>) move control flow out of the current code\nblock. Typically, any statements in a block that come after a jump are simply wasted keystrokes lying in wait to confuse the unwary. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a       # Noncompliant\n  i += 1             # this is never executed\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code <\/li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code <\/li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code <\/li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code <\/li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/561.html\">MITRE, CWE-561<\/a> - Dead Code <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/uQCSBg\">CERT, MSC56-J.<\/a> - Detect and remove superfluous code and values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/OYIyAQ\">CERT, MSC07-CPP.<\/a> - Detect and remove dead code <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","unused"]}]},{"key": "S1764","title": "Identical expressions should not be used on both sides of a binary operator","tags": ["cert"],"implementations": [{"key": "javascript:S1764","language": "JavaScript","title": "Identical expressions should not be used on both sides of a binary operator","description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy\/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.<\/p>\n<p>This rule ignores <code>*<\/code>, <code>+<\/code>, and <code>=<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ( a == a ) { \/\/ always true\n  doZ();\n}\nif ( a != a ) { \/\/ always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { \/\/ if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { \/\/ if the first one is true, the second one is too\n  doW();\n}\n\nvar j = 5 \/ 5; \/\/always 1\nvar k = 5 - 5; \/\/always 0\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>The specific case of testing one variable against itself is a valid test for <code>NaN<\/code> and is therefore ignored.<\/p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. <\/p>\n<p>Moreover comma operator <code>,<\/code> and <code>instanceof<\/code> operator are ignored as there are use-cases when there usage is valid.<\/p>\n<pre>\nif(f !== f) { \/\/ test for NaN value\n  console.log(\"f is NaN\");\n}\n\nvar i = 1 &lt;&lt; 1; \/\/ Compliant\nvar j = a &lt;&lt; a; \/\/ Noncompliant\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> {rule:javascript:S1656} - Implements a check on <code>=<\/code>. <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]},{"key": "php:S1764","language": "PHP","title": "Identical expressions should not be used on both sides of a binary operator","description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy\/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.<\/p>\n<p>This rule ignores <code>*<\/code>, <code>+<\/code>, and <code>=<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ( $a == $a ) { \/\/ always true\n  doZ();\n}\nif ( $a != $a ) { \/\/ always false\n  doY();\n}\nif ( $a == $b &amp;&amp; $a == $b ) { \/\/ if the first one is true, the second one is too\n  doX();\n}\nif ( $a == $b || $a == $b ) { \/\/ if the first one is true, the second one is too\n  doW();\n}\n\n$j = 5 \/ 5; \/\/always 1\n$k = 5 - 5; \/\/always 0\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.<\/p>\n<pre>\n$i = 1 &lt;&lt; 1; \/\/ Compliant\n$j = $a &lt;&lt; $a; \/\/ Noncompliant\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> {rule:php:S1656} - Implements a check on <code>=<\/code>. <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]},{"key": "python:S1764","language": "Python","title": "Identical expressions should not be used on both sides of a binary operator","description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy\/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.<\/p>\n<p>This rule ignores <code>*<\/code>, <code>+<\/code>, and <code>=<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif a == a: # Noncompliant\n    work()\n\nif  a != a: # Noncompliant\n    work()\n\nif  a == b and a == b: # Noncompliant\n    work()\n\nif a == b or a == b: # Noncompliant\n    work()\n\nj = 5 \/ 5 # Noncompliant\nk = 5 - 5 # Noncompliant\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>The following are ignored:<\/p>\n<ul>\n  <li> The expression <code>1 &lt;&lt; 1<\/code> <\/li>\n<\/ul>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> {rule:python:S1656} - Implements a check on <code>=<\/code>. <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S1788","title": "Method arguments with default values should be last","tags": ["psr2"],"implementations": [{"key": "php:S1788","language": "PHP","title": "Method arguments with default values should be last","description": "<p>The ability to define default values for method arguments can make a method easier to use. Default argument values allow callers to specify as many\nor as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code. <\/p>\n<p>But all method arguments with default values should be declared after the method arguments without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values in order to \"get to\" the non-default arguments.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction makeyogurt($type = \"acidophilus\", $flavor){...}  \/\/ Noncompliant\n\nmakeyogurt(\"raspberry\")}}  \/\/ Runtime error: Missing argument 2 in call to makeyogurt()\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction makeyogurt($flavor, $type = \"acidophilus\", ){...}\n\nmakeyogurt(\"raspberry\")}} \/\/ Works as expected\n<\/pre>","severity": "Major","tags": ["psr2"]}]},{"key": "S1845","title": "Methods and field names should not differ only by capitalization","tags": ["confusing"],"implementations": [{"key": "python:S1845","language": "Python","title": "Methods and field names should not differ only by capitalization","description": "<p>Looking at the set of methods and fields in a <code>class<\/code> and finding two that differ only by capitalization is confusing to users of the\nclass.<\/p>\n<p>This situation may simply indicate poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case\nwhere both a method and a field have the same name (with or without capitalization differences). However, renaming a public method could be disruptive\nto callers. Therefore renaming the member is the recommended action.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass SomeClass:\n    lookUp = false\n    def lookup():       # Non-compliant; method name differs from field name only by capitalization\n        pass\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass SomeClass:\n    lookUp = false\n    def getLookUp():\n        pass\n<\/pre>","severity": "Blocker","tags": ["confusing"]}]},{"key": "S1848","title": "Objects should not be created to be dropped immediately without being used","tags": [],"implementations": [{"key": "php:S1848","language": "PHP","title": "Objects should not be created to be dropped immediately without being used","description": "<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.<\/p>\n<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and\ncalled directly.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ($x &lt; 0) {\n  new foo;  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n$var = NULL;\nif ($x &lt; 0) {\n  $var = new foo;\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S1854","title": "Dead stores should be removed","tags": ["cwe","cert","unused"],"implementations": [{"key": "javascript:S1854","language": "JavaScript","title": "Dead stores should be removed","description": "<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction or when an object property is\nassigned a value that is not subsequently used. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious\nerror in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1; i &lt; b; i++) {\n    x = x * a;  \/\/Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1; i &lt; b; i++) {\n    x = x * a;\n  }\n  return x;\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null<\/code>, <code>true<\/code>, <code>false<\/code>, <code>\"\"<\/code>, <code>[]<\/code> and\n<code>{}<\/code>.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/563.html\">MITRE, CWE-563<\/a> - Assignment to Variable without Use ('Unused Variable') <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/QYA5\">CERT, MSC13-C.<\/a> - Detect and remove unused values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/S4IyAQ\">CERT, MSC13-CPP.<\/a> - Detect and remove unused values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/uQCSBg\">CERT, MSC56-J.<\/a> - Detect and remove superfluous code and values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","unused"]}]},{"key": "S1862","title": "Related \"if\/else if\" statements and \"cases\" in a \"switch\" should not have the same condition","tags": ["cert","unused","pitfall"],"implementations": [{"key": "javascript:S1862","language": "JavaScript","title": "Related \"if\/else if\" statements and \"cases\" in a \"switch\" should not have the same condition","description": "<p>A <code>switch<\/code> and a chain of <code>if<\/code>\/<code>else if<\/code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true<\/code>.<\/p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy\/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.<\/p>\n<p>For a <code>switch<\/code>, if the first case ends with a <code>break<\/code>, the second case will never be executed, rendering it dead code. Worse\nthere is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.<\/p>\n<p>On the other hand, if the first case does not end with a <code>break<\/code>, both cases will be executed, but future maintainers may not notice\nthat.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  \/\/ Noncompliant\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    \/\/...\n    break;\n  case 3:\n    \/\/...\n    break;\n  case 1:  \/\/ Noncompliant\n    \/\/...\n    break;\n  default:\n    \/\/ ...\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    \/\/...\n    break;\n  case 3:\n    \/\/...\n    break;\n  default:\n    \/\/ ...\n    break;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","pitfall","unused"]},{"key": "php:S1862","language": "PHP","title": "Related \"if\/else if\" statements and \"cases\" in a \"switch\" should not have the same condition","description": "<p>A <code>switch<\/code> and a chain of <code>if<\/code>\/<code>else if<\/code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true<\/code>.<\/p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy\/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.<\/p>\n<p>For a <code>switch<\/code>, if the first case ends with a <code>break<\/code>, the second case will never be executed, rendering it dead code. Worse\nthere is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.<\/p>\n<p>On the other hand, if the first case does not end with a <code>break<\/code>, both cases will be executed, but future maintainers may not notice\nthat.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ($param == 1)\n  openWindow();\nelse if ($param == 2)\n  closeWindow();\nelse if ($param == 1)  \/\/ Noncompliant\n  moveWindowToTheBackground();\n\n\nswitch($i) {\n  case 1:\n    \/\/...\n    break;\n  case 3:\n    \/\/...\n    break;\n  case 1:  \/\/ Noncompliant\n    \/\/...\n    break;\n  default:\n    \/\/ ...\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif ($param == 1)\n  openWindow();\nelse if ($param == 2)\n  closeWindow();\nelse if ($param == 3)\n  moveWindowToTheBackground();\n\nswitch($i) {\n  case 1:\n    \/\/...\n    break;\n  case 3:\n    \/\/...\n    break;\n  default:\n    \/\/ ...\n    break;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","pitfall","unused"]},{"key": "python:S1862","language": "Python","title": "Related \"if\/else if\" statements should not have the same condition","description": "<p>A chain of <code>if<\/code>\/<code>else if<\/code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true<\/code>. <\/p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy\/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 1:            # Noncompliant\n  moveWindowToTheBackground()\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 3:\n  moveWindowToTheBackground()\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","pitfall","unused"]}]},{"key": "S1871","title": "Two branches in a conditional structure should not have exactly the same implementation","tags": ["design","suspicious"],"implementations": [{"key": "javascript:S1871","language": "JavaScript","title": "Two branches in a conditional structure should not have exactly the same implementation","description": "<p>Having two <code>cases<\/code> in a <code>switch<\/code> statement or two branches in an <code>if<\/code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if<\/code> chain they should\nbe combined, or for a <code>switch<\/code>, one should fall through to the other. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  \/\/ Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  \/\/ Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n<\/pre>\n<p>or <\/p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Blocks in an <code>if<\/code> chain that contain a single line of code are ignored, as are blocks in a <code>switch<\/code> statement that contain a\nsingle line of code with or without a following <code>break<\/code>.<\/p>","severity": "Major","tags": ["design","suspicious"]},{"key": "php:S1871","language": "PHP","title": "Two branches in the same conditional structure should not have exactly the same implementation","description": "<p>Having two <code>cases<\/code> in the same <code>switch<\/code> statement or branches in the same <code>if<\/code> structure with the same\nimplementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an\n<code>if<\/code> structure they should be combined, or for a <code>switch<\/code>, one should fall through to the other. <\/p>\n<p>Moreover when the second and third operands of a ternary operator are the same, the operator will always return the same value regardless of the\ncondition. Either the operator itself is pointless, or a mistake was made in coding it.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch ($i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  \/\/ Noncompliant; duplicates case 1's implementation\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThing();  \/\/ Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n\nif ($b == 0) {\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing(); \/\/ Noncompliant; duplicates then-branch\n}\n\nvar b = a ? 12 &gt; 4 : 4;  \/\/ Noncompliant; always results in the same value\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch ($i) {\n  case 1:\n  case 3:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif (($a &gt;= 0 &amp;&amp; $a &lt; 10) || ($a &gt;= 20 &amp;&amp; $a &lt; 50)) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n\ndoOneMoreThing();\n\nb = 4;\n<\/pre>\n<p>or <\/p>\n<pre>\nswitch ($i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n\nif ($b == 0) {\n  doOneMoreThing();\n}\nelse {\n  doTheRest();\n}\n\nint b = a ? 12 &gt; 4 : 8;\n<\/pre>","severity": "Minor","tags": ["design","suspicious"]},{"key": "python:S1871","language": "Python","title": "Two branches in a conditional structure should not have exactly the same implementation","description": "<p>Having two branches in the same <code>if<\/code> structure with the same implementation is at best duplicate code, and at worst a coding error. If\nthe same logic is truly needed for both instances, then they should be combined.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_the_thing()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_the_thing()  # Noncompliant; duplicates first condition\nelse:\n    do_the_rest()\n\nb = 4 if a &gt; 12 else 4\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (0 &lt;= a &lt; 10) or (20 &lt;= a &lt; 50):\n    do_the_thing()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelse:\n    do_the_rest()\n\nb = 4\n<\/pre>\n<p>or <\/p>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_the_thing()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_the_third_thing()\nelse:\n    do_the_rest()\n\nb = 8 if a &gt; 12 else 4\n<\/pre>","severity": "Major","tags": ["design","suspicious"]}]},{"key": "S1998","title": "References should not be passed to function calls","tags": ["cwe","performance","obsolete","pitfall"],"implementations": [{"key": "php:S1998","language": "PHP","title": "References should not be passed to function calls","description": "<p>Passing a reference to a function parameter means that any modifications the method makes to the parameter will be made to the original value as\nwell, since references have the effect of pointing two variables at the same memory space. This feature can be difficult to use correctly,\nparticularly if the callee is not expecting a reference, and the improper use of references in function calls can make code less efficient rather than\nmore efficient. <\/p>\n<p>Further, according to the PHP manual: <\/p>\n<blockquote>\n  As of PHP 5.3.0, you will get a warning saying that \"call-time pass-by-reference\" is deprecated... And as of PHP 5.4.0, call-time pass-by-reference\n  was removed, so using it will raise a fatal error.\n<\/blockquote>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nmyfun(&amp;$name);  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nmyfun($name);\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/374\">MITRE, CWE-374<\/a> - Weakness Base Passing Mutable Objects to an Untrusted Method <\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","obsolete","performance","pitfall"]}]},{"key": "S2004","title": "Functions should not be nested too deeply","tags": ["brain-overload"],"implementations": [{"key": "php:S2004","language": "PHP","title": "Functions should not be nested too deeply","description": "<p>Nesting functions can quickly turn your code into \"spaghetti code\". Such code is hard to read, refactor and therefore to maintain.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default threshold of 3:<\/p>\n<pre>\nfunction f () {\n  function f_inner () {\n    function f_inner_inner() {\n      function f_inner_inner_inner() { \/\/ Noncompliant\n      }\n    }\n  }\n}\n<\/pre>","severity": "Critical","tags": ["brain-overload"]}]},{"key": "S2010","title": "\"&&\" and \"||\" should be used","tags": ["suspicious"],"implementations": [{"key": "php:S2010","language": "PHP","title": "\"&&\" and \"||\" should be used","description": "<p>PHP has two sets of logical operators: <code>&amp;&amp;<\/code> \/ <code>||<\/code>, and <code>and<\/code> \/ <code>or<\/code>. The difference between\nthe sets is precedence. Because <code>and<\/code> \/ <code>or<\/code> have a lower precedence than almost any other operator, using them instead of\n<code>&amp;&amp;<\/code> \/ <code>||<\/code> may not have the result you expect.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$have_time = true;\n$have_money = false;\n$take_vacation = $have_time and $have_money;  \/\/ Noncompliant. $take_vacation == true.\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n$have_time = true;\n$have_money = false;\n$take_vacation = $have_time &amp;&amp; $have_money;  \/\/ $take_vacation == false.\n<\/pre>","severity": "Minor","tags": ["suspicious"]}]},{"key": "S2014","title": "\"$this\" should not be used in a static context","tags": [],"implementations": [{"key": "php:S2014","language": "PHP","title": "\"$this\" should not be used in a static context","description": "<p><code>$this<\/code> refers to the current class instance. But static methods can be accessed without instantiating the class, and <code>$this<\/code>\nis not available to them. Using <code>$this<\/code> in a static context will result in a fatal error at runtime.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Clazz {\n  $name=NULL;  \/\/ instance variable\n\n  public static function foo(){\n    if ($this-&gt;name != NULL) {\n      \/\/ ...\n    }\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Clazz {\n  $name=NULL;  \/\/ instance variable\n\n  public static function foo($nameParam){\n    if ($nameParam != NULL) {\n      \/\/ ...\n    }\n  }\n}\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S2041","title": "Parentheses should not be used for calls to \"echo\"","tags": ["pitfall"],"implementations": [{"key": "php:S2041","language": "PHP","title": "Parentheses should not be used for calls to \"echo\"","description": "<p><code>echo<\/code> can be called with or without parentheses, but it is best practice to leave parentheses off the call because using parentheses\nwith multiple arguments will result in a parse error.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\necho(\"Hello\");  \/\/ Noncompliant, but it works\necho(\"Hello\", \"World\"); \/\/ Noncompliant. Parse error\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\necho \"Hello\";\necho \"Hello\",\"World!\";\n<\/pre>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S2068","title": "Credentials should not be hard-coded","tags": ["cwe","cert","sans-top25-porous","owasp-a2"],"implementations": [{"key": "php:S2068","language": "PHP","title": "Credentials should not be hard-coded","description": "<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.<\/p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$uname = \"steve\";\n$password = \"blue\";\nconnect($uname, $password);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n$uname = getEncryptedUser();\n$password = getEncryptedPass();\nconnect($uname, $password);\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/798\">MITRE, CWE-798<\/a> - Use of Hard-coded Credentials <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/259\">MITRE, CWE-259<\/a> - Use of Hard-coded Password <\/li>\n  <li> <a href=\"http:\/\/www.sans.org\/top25-software-errors\/\">SANS Top 25<\/a> - Porous Defenses <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/qQCHAQ\">CERT, MSC03-J.<\/a> - Never hard code sensitive information <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2<\/a> -\n  Broken Authentication and Session Management <\/li>\n  <li> Derived from FindSecBugs rule <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password<\/a> <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","cwe","owasp-a2","sans-top25-porous"]}]},{"key": "S2123","title": "Values should not be uselessly incremented","tags": ["unused"],"implementations": [{"key": "javascript:S2123","language": "JavaScript","title": "Values should not be uselessly incremented","description": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar i = 0;\ni = i++; \/\/ Noncompliant; i is still zero\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar i = 0;\ni++;\n<\/pre>","severity": "Major","tags": ["unused"]}]},{"key": "S2189","title": "Loops should not be infinite","tags": ["cert"],"implementations": [{"key": "javascript:S2189","language": "JavaScript","title": "Loops should not be infinite","description": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break<\/code>, every loop should have an end condition.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (;;) {  \/\/ Noncompliant; end condition omitted\n  \/\/ ...\n}\n\nvar j = 0;\nwhile (true) { \/\/ Noncompliant; constant end condition\n  j++;\n}\n\nvar k;\nvar b = true;\nwhile (b) { \/\/ Noncompliant; constant end condition\n  k++;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n\nwhile (true) { \/\/ break will potentially allow leaving the loop\n  if (someCondition) {\n    break;\n  }\n}\n\nvar k;\nvar b = true;\nwhile (b) {\n  k++;\n  b = k &lt; 10;\n}\n\nouter:\nwhile(true) {\n  while(true) {\n    break outer;\n  }\n}\n\n<\/pre>\n\n<h2>Known Limitations<\/h2>\n<ul>\n    <li>False positives: when <code>yield<\/code> is used - <a\n            href=\"https:\/\/jira.sonarsource.com\/browse\/SONARJS-877\">SONARJS-877<\/a>.<\/li>\n    <li>False positives: when an exception is raised by a function invoked within the loop.<\/li>\n    <li>False negatives: when a loop condition is based on an element of an array or object.<\/li>\n<\/ul>\n\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/PYHfAw\">CERT, MSC01-J.<\/a> - Do not use an empty infinite loop <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert"]}]},{"key": "S2201","title": "Return values should not be ignored when function calls don't have any side effects","tags": ["misra","cert"],"implementations": [{"key": "javascript:S2201","language": "JavaScript","title": "Return values should not be ignored when function calls don't have any side effects","description": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. <\/p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n'hello'.lastIndexOf('e'); \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nlet char = 'hello'.lastIndexOf('e');\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/9YIRAQ\">CERT, EXP12-C.<\/a> - Do not ignore values returned by functions <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/eoAyAQ\">CERT, EXP12-CPP.<\/a> - Do not ignore values returned by functions or methods\n  <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/9gEqAQ\">CERT, EXP00-J.<\/a> - Do not ignore values returned by methods <\/li>\n<\/ul>","severity": "Major","tags": ["cert","misra"]}]},{"key": "S2251","title": "A \"for\" loop update clause should move the counter in the right direction","tags": ["cert"],"implementations": [{"key": "javascript:S2251","language": "JavaScript","title": "A \"for\" loop update clause should move the counter in the right direction","description": "<p>A <code>for<\/code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run\ninfinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while<\/code> loops. More\ntypically, an infinite <code>for<\/code> loop is a bug. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (var i = 0; i &lt; strings.length; i--) { \/\/ Noncompliant;\n  \/\/...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (var i = 0; i &lt; strings.length; i++) {\n  \/\/...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/zYEzAg\">CERT, MSC54-J.<\/a> - Avoid inadvertent wrapping of loop counters <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S2259","title": "Properties of variables with \"null\" or \"undefined\" values should not be accessed","tags": ["cwe","cert"],"implementations": [{"key": "javascript:S2259","language": "JavaScript","title": "Properties of variables with \"null\" or \"undefined\" values should not be accessed","description": "<p>When a variable is assigned an <code>undefined<\/code> or <code>null<\/code> value, it has no properties. Trying to access properties of such a\nvariable anyway results in a <code>TypeError<\/code>, causing abrupt termination of the script if the error is not caught in a <code>catch<\/code>\nblock. But instead of <code>catch<\/code>-ing this condition, it is best to avoid it altogether.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (x === undefined) {\n  console.log(x.length); \/\/ Noncompliant; TypeError will be thrown\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/476.html\">MITRE, CWE-476<\/a> - NULL Pointer Dereference <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/PAw\">CERT, EXP34-C.<\/a> - Do not dereference null pointers <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/ZwDOAQ\">CERT, EXP01-J.<\/a> - Do not use a null in a case where an object is required\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe"]}]},{"key": "S2432","title": "Setters should not return values","tags": [],"implementations": [{"key": "javascript:S2432","language": "JavaScript","title": "Setters should not return values","description": "<p>Functions declared with the <code>set<\/code> keyword will automatically return the values they were passed. Thus any value explicitly returned from\na setter will be ignored, and explicitly returning a value is an error.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar person = {\n  \/\/ ...\n  set name(name) {\n    this.name = name;\n    return 42;  \/\/ Noncompliant\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar person = {\n  \/\/ ...\n  set name(name) {\n    this.name = name;\n  }\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2583","title": "Conditionally executed blocks should be reachable","tags": ["cwe","misra","cert","unused","pitfall"],"implementations": [{"key": "javascript:S2583","language": "JavaScript","title": "Conditionally executed blocks should be reachable","description": "<p>Conditional expressions which are always <code>true<\/code> or <code>false<\/code> can lead to dead code. Such code is always buggy and should never\nbe used in production.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\na = false;\nif (a) { \/\/ Noncompliant\n  doSomething(); \/\/ never executed\n}\n\nif (!a || b) { \/\/ Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); \/\/ never executed\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. <\/li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/570.html\">MITRE, CWE-570<\/a> - Expression is Always False <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/571\">MITRE, CWE-571<\/a> - Expression is Always True <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","pitfall","unused"]}]},{"key": "S2681","title": "Multiline blocks should be enclosed in curly braces","tags": ["cwe","cert"],"implementations": [{"key": "javascript:S2681","language": "JavaScript","title": "Multiline blocks should be enclosed in curly braces","description": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if<\/code> statement or <code>for<\/code> loop, but doing so can be\nmisleading and induce bugs. <\/p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  \/\/ Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  \/\/ Noncompliant; executed only on last array element\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/483.html\">MITRE, CWE-483<\/a> - Incorrect Block Delimitation <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/3wHEAw\">CERT, EXP52-J.<\/a> - Use braces for the body of an if, for, or while statement\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe"]},{"key": "php:S2681","language": "PHP","title": "Multiline blocks should be enclosed in curly braces","description": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if<\/code> statement or <code>for<\/code> loop, but doing so can be\nmisleading and induce bugs. <\/p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ($condition)\n  firstActionInBlock();\n  secondAction();  \/\/ Noncompliant; executed unconditionally\nthirdAction();\n\n$str = null;\nfor ($i = 0; $i &lt; count($array); $i++)\n  $str = $array[$i];\n  doTheThing($str);  \/\/ Noncompliant; executed only on last array element\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif ($condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\n$str = null;\nfor ($i = 0; $i &lt; count($array); $i++) {\n  $str = $array[$i];\n  doTheThing($str);\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/483.html\">MITRE, CWE-483<\/a> - Incorrect Block Delimitation <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/3wHEAw\">CERT, EXP52-J.<\/a> - Use braces for the body of an if, for, or while statement\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe"]}]},{"key": "S2688","title": "\"NaN\" should not be used in comparisons","tags": ["cert"],"implementations": [{"key": "javascript:S2688","language": "JavaScript","title": "\"NaN\" should not be used in comparisons","description": "<p><code>NaN<\/code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN<\/code> will yield predictable results,\nbut probably not the ones you want. <\/p>\n<p>Instead, the best way to see whether a variable is equal to <code>NaN<\/code> is to use <code>Number.isNaN()<\/code>, since ES2015, or (perhaps\ncounter-intuitively) to compare it to itself. Since <code>NaN !== NaN<\/code>, when <code>a !== a<\/code>, you know it must equal <code>NaN<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar a = NaN;\n\nif (a === NaN) {  \/\/ Noncompliant; always false\n  console.log(\"a is not a number\");  \/\/ this is dead code\n}\nif (a !== NaN) { \/\/ Noncompliant; always true\n  console.log(\"a is not NaN\"); \/\/ this statement is not necessarily true\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (Number.isNaN(a)) {\n  console.log(\"a is not a number\");\n}\nif (!Number.isNaN(a)) {\n  console.log(\"a is not NaN\");\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/7AEqAQ\">CERT, NUM07-J.<\/a> - Do not attempt comparisons with NaN <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S2703","title": "Variables should be declared explicitly","tags": ["pitfall"],"implementations": [{"key": "javascript:S2703","language": "JavaScript","title": "Variables should be declared explicitly","description": "<p>JavaScript variable scope can be particularly difficult to understand and get right. The situation gets even worse when you consider the\n<em>accidental<\/em> creation of global variables, which is what happens when you declare a variable inside a function or the <code>for<\/code> clause\nof a for-loop without using the <code>let<\/code>, <code>const<\/code> or <code>var<\/code> keywords. <\/p>\n<p><code>let<\/code> and <code>const<\/code> were introduced in ECMAScript 2015, and are now the preferred keywords for variable declaration.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction f(){\n  i = 1;         \/\/ Noncompliant; i is global\n\n  for (j = 0; j &lt; array.length; j++) {  \/\/ Noncompliant; j is global now too\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction f(){\n  var i = 1;\n\n  for (let j = 0; j &lt; array.length; j++) {\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Blocker","tags": ["pitfall"]}]},{"key": "S2711","title": "\"yield\" and \"return\" should not be used outside functions","tags": [],"implementations": [{"key": "python:S2711","language": "Python","title": "\"yield\" and \"return\" should not be used outside functions","description": "<p><code>yield<\/code> and <code>return<\/code> only make sense in the context of functions. Using them outside a function raises a\n<code>SyntaxError<\/code>. To break out of a loop, use <code>break<\/code> instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass:\n    while True:\n        return False #Noncompliant\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S2712","title": "\"return\" and \"yield\" should not be used in the same function","tags": [],"implementations": [{"key": "python:S2712","language": "Python","title": "\"return\" and \"yield\" should not be used in the same function","description": "<p>Functions that use <code>yield<\/code> are known as \"generators\", and generators cannot <code>return<\/code> values. Similarly, functions that use\n<code>return<\/code> cannot use <code>yield<\/code>. Doing so will cause a <code>SyntaxError<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ndef adder(n):\n     num = 0\n     while num &lt; n:\n         yield num\n         num += 1\n     return num  #Noncompliant\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S2733","title": "\"__exit__\" should accept type, value, and traceback arguments","tags": [],"implementations": [{"key": "python:S2733","language": "Python","title": "\"__exit__\" should accept type, value, and traceback arguments","description": "<p>The <code>__exit__<\/code> method is invoked with four arguments: self, type, value and traceback. Leave one of these out of the method declaration\nand the result will be a <code>TypeError<\/code> at runtime.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass:\n   def __enter__(self):\n       pass\n   def __exit__(self, exc_type, exc_val):  # Noncompliant\n       pass\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S2734","title": "\"__init__\" should not return a value","tags": [],"implementations": [{"key": "python:S2734","language": "Python","title": "\"__init__\" should not return a value","description": "<p>By contract, every Python function returns something, even if it's the <code>None<\/code> value, which can be returned implicitly by omitting the\n<code>return<\/code> statement, or explicitly. <\/p>\n<p>The <code>__init__<\/code> method is required to return <code>None<\/code>. A <code>TypeError<\/code> will be raised if the <code>__init__<\/code>\nmethod either <code>yield<\/code>s or <code>return<\/code>s any expression other than <code>None<\/code>. Returning some expression that evaluates to\n<code>None<\/code> will not raise an error, but is considered bad practice.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n        return self  # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S2757","title": "\"=+\" should not be used instead of \"+=\"","tags": [],"implementations": [{"key": "javascript:S2757","language": "JavaScript","title": "\"=+\" should not be used instead of \"+=\"","description": "<p>The use of operators pairs (<code>=+<\/code> or <code>=-<\/code>) where the reversed, single operator was meant (<code>+=<\/code> or <code>-=<\/code>)\nwill compile and run, but not produce the expected results.<\/p>\n<p>This rule raises an issue when <code>=+<\/code> and <code>=-<\/code> are used without any space between the two operators and when there is at least\none whitespace after.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar target =-5;\nvar num = 3;\n\ntarget =- num;  \/\/ Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; \/\/ Noncompliant; target = 3\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar target = -5;\nvar num = 3;\n\ntarget = -num;  \/\/ Compliant; intent to assign inverse value of num is clear\ntarget += num;\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2772","title": "\"pass\" should not be used needlessly","tags": ["unused"],"implementations": [{"key": "python:S2772","language": "Python","title": "\"pass\" should not be used needlessly","description": "<p>The use of a <code>pass<\/code> statement where it's not required by the syntax is pure cruft and should be removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n    def __init__(self, log=\"\", who=\"\", date=0, files=[]):\n        self.log = log\n        self.files = files\n        self.who = who\n        self.date = date\n        pass    # Noncompliant\n\n    def lookup():\n        pass    # Compliant; method can't be empty\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n    def __init__(self, log=\"\", who=\"\", date=0, files=[]):\n        self.log = log\n        self.files = files\n        self.who = who\n        self.date = date\n\n    def lookup():\n        pass\n<\/pre>","severity": "Minor","tags": ["unused"]}]},{"key": "S2814","title": "Variables and functions should not be redeclared","tags": ["confusing"],"implementations": [{"key": "javascript:S2814","language": "JavaScript","title": "Variables and functions should not be redeclared","description": "<p>This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as\neither a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with\nthe developer not realizing that the value of the variable is overwritten by the new assignment.<\/p>\n<p>This rule also applies to function parameters.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar a = 'foo';\nfunction a() {}   \/\/ Noncompliant\nconsole.log(a);   \/\/ prints \"foo\"\n\nfunction myFunc(arg) {\n  var arg = \"event\"; \/\/ Noncompliant, argument value is lost\n}\n\nfun(); \/\/ prints \"bar\"\n\nfunction fun() {\n  console.log(\"foo\");\n}\n\nfun(); \/\/ prints \"bar\"\n\nfunction fun() {  \/\/ Noncompliant\n  console.log(\"bar\");\n}\n\nfun(); \/\/ prints \"bar\"\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar a = 'foo';\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  var newName = \"event\";\n}\n\nfun(); \/\/ prints \"foo\"\n\nfunction fun() {\n  print(\"foo\");\n}\n\nfun(); \/\/ prints \"foo\"\n\nfunction printBar() {\n  print(\"bar\");\n}\n\nprintBar(); \/\/ prints \"bar\"\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "S2819","title": "Cross-document messaging domains should be carefully restricted","tags": ["html5","owasp-a3"],"implementations": [{"key": "javascript:S2819","language": "JavaScript","title": "Cross-document messaging domains should be carefully restricted","description": "<p>HTML5 adds the ability to send messages to documents served from other domains. According to the specification:<\/p>\n<blockquote>\n  Authors should not use the wildcard keyword (\n  <code>*<\/code>) in the\n  <code>targetOrigin<\/code> argument in messages that contain any confidential information, as otherwise there is no way to guarantee that the message\n  is only delivered to the recipient to which it was intended.\n<\/blockquote>\n<p>To mitigate the risk of sending sensitive information to a document served from a hostile or unknown domain, this rule raises an issue each time\n<code>Window.postMessage<\/code> is used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar myWindow = document.getElementById('myIFrame').contentWindow;\nmyWindow.postMessage(message, \"*\"); \/\/ Noncompliant; how do you know what you loaded in 'myIFrame' is still there?\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3<\/a> - Cross-Site Scripting\n  (XSS) <\/li>\n<\/ul>","severity": "Critical","tags": ["html5","owasp-a3"]}]},{"key": "S2870","title": "\"delete\" should not be used on arrays","tags": [],"implementations": [{"key": "javascript:S2870","language": "JavaScript","title": "\"delete\" should not be used on arrays","description": "<p>The <code>delete<\/code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete<\/code> operator can be\nused here too, but if it is, a hole will be left in the array because the indexes\/keys won't be shifted to reflect the deletion. <\/p>\n<p>The proper method for removing an element at a certain index would be:<\/p>\n<ul>\n  <li> <code>Array.prototype.splice<\/code> - add\/remove elements from the the array <\/li>\n  <li> <code>Array.prototype.pop<\/code> - add\/remove elements from the end of the array <\/li>\n  <li> <code>Array.prototype.shift<\/code> - add\/remove elements from the beginning of the array <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\ndelete myArray[2];  \/\/ Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']\nconsole.log(myArray[2]); \/\/ expected value was 'd' but output is undefined\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\n\/\/ removes 1 element from index 2\nremoved = myArray.splice(2, 1);  \/\/ myArray =&gt; ['a', 'b', 'd']\nconsole.log(myArray[2]); \/\/ outputs 'd'\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2873","title": "Calls should not be made to non-callable values","tags": [],"implementations": [{"key": "javascript:S2873","language": "JavaScript","title": "Calls should not be made to non-callable values","description": "<p>The fact that JavaScript is not a strongly typed language allows developers a lot of freedom, but that freedom can be dangerous if you go too far\nwith it. <\/p>\n<p>Specifically, it is syntactically acceptable to invoke any expression as though its value were a function. But a <code>TypeError<\/code> may be\nraised if you do.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfoo = 1;\nfoo();   \/\/ Noncompliant; TypeError\n\nfoo = undefined;\nfoo();  \/\/ Noncompliant; TypeError\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2964","title": "\"sleep\" should not be called","tags": [],"implementations": [{"key": "php:S2964","language": "PHP","title": "\"sleep\" should not be called","description": "<p><code>sleep<\/code> is sometimes used in a mistaken attempt to prevent Denial of Service (DoS) attacks by throttling response rate. But because it\nties up a thread, each request takes longer to serve that it otherwise would, making the application <em>more<\/em> vulnerable to DoS attacks, rather\nthan less.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (is_bad_ip($requester)) {\n  sleep(5);  \/\/ Noncompliant\n}\n<\/pre>","severity": "Minor","tags": []}]},{"key": "S2999","title": "\"new\" operators should be used with functions","tags": [],"implementations": [{"key": "javascript:S2999","language": "JavaScript","title": "\"new\" operators should be used with functions","description": "<p>The <code>new<\/code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a\n<code>TypeError<\/code> because there won't be a constructor function for the <code>new<\/code> keyword to invoke.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = 1;\n\nvar obj1 = new someClass;    \/\/ Noncompliant;\nvar obj2 = new MyClass();    \/\/ Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n\/**\n * @constructor\n *\/\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = function(){\n  this.prop = 1;\n}\n\nvar obj1 = new someClass;  \/\/ Compliant\nvar obj2 = new MyClass();  \/\/ Compliant regardless of considerJSDoc value\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3001","title": "\"delete\" should be used only with object properties","tags": [],"implementations": [{"key": "javascript:S3001","language": "JavaScript","title": "\"delete\" should be used only with object properties","description": "<p>The semantics of the <code>delete<\/code> operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass\nanything else to it, and you may or may not get the desired result.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar x  = 1;\ndelete x;       \/\/ Noncompliant\n\nfunction foo(){\n..\n}\n\ndelete foo;  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar obj = {\n  x:1,\n  foo: function(){\n  ...\n  }\n};\ndelete obj.x;\ndelete obj.foo;\n\n<\/pre>","severity": "Minor","tags": []}]},{"key": "S3403","title": "Strict equality operators should not be used with dissimilar types","tags": [],"implementations": [{"key": "javascript:S3403","language": "JavaScript","title": "Strict equality operators should not be used with dissimilar types","description": "<p>Comparing dissimilar types using the strict equality operators <code>===<\/code> and <code>!==<\/code> will always return the same value,\nrespectively <code>false<\/code> and <code>true<\/code>, because no type conversion is done before the comparison. Thus, such comparisons can only be\nbugs.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a === b) {  \/\/ Noncompliant; always false\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a == b) {\n  \/\/ ...\n}\n<\/pre>\n<p>or<\/p>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a === Number(b)) {\n  \/\/ ...\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3500","title": "Attempts should not be made to update \"const\" variables","tags": ["es2015"],"implementations": [{"key": "javascript:S3500","language": "JavaScript","title": "Attempts should not be made to update \"const\" variables","description": "<p>Variables declared with <code>const<\/code> cannot be modified. Unfortunately, attempts to do so don't always raise an error; in a non-ES2015\nenvironment, such an attempt might simply be ignored.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nconst pi = \"yes, please\";\npi = 3.14;  \/\/ Noncompliant\n<\/pre>","severity": "Major","tags": ["es2015"]}]},{"key": "S3516","title": "Function returns should not be invariant","tags": [],"implementations": [{"key": "javascript:S3516","language": "JavaScript","title": "Function returns should not be invariant","description": "<p>When a function is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is likely a mistake.<\/p>\n<p>This rule raises an issue when a function contains several <code>return<\/code> statements that all return the same value.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction foo(a) {  \/\/ Noncompliant\n  let b = 12;\n  if (a) {\n    return b;\n  }\n  return b;\n}\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S3523","title": "Function constructors should not be used","tags": ["clumsy"],"implementations": [{"key": "javascript:S3523","language": "JavaScript","title": "Function constructors should not be used","description": "<p>In addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructor's string\narguments similar to the way <code>eval<\/code> works, which could expose your program to random, unintended code which can be both slow and a security\nrisk.<\/p>\n<p>In general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5's built-in JSON functions or\na dedicated library.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar obj =  new Function(\"return \" + data)();  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar obj = JSON.parse(data);\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Function calls where the argument is a string literal (e.g. <code>(Function('return this'))()<\/code>) are ignored. <\/p>","severity": "Critical","tags": ["clumsy"]}]},{"key": "S3531","title": "Generators should \"yield\" something","tags": ["api-design","es2015"],"implementations": [{"key": "javascript:S3531","language": "JavaScript","title": "Generators should \"yield\" something","description": "<p>A generator without a <code>yield<\/code> statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code\nwill always be empty. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction* myGen(a, b) {  \/\/ Noncompliant\n  let answer = 0;\n  answer += a * b;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction* myGen(a, b) {\n  let answer = 0;\n  while (answer &lt; 42) {\n    answer += a * b;\n    yield answer;\n  }\n}\n<\/pre>","severity": "Major","tags": ["api-design","es2015"]}]},{"key": "S3579","title": "Array indexes should be numeric","tags": ["bad-practice"],"implementations": [{"key": "javascript:S3579","language": "JavaScript","title": "Array indexes should be numeric","description": "<p>JavaScript is flexible enough to allow you to store values in an array with either numeric or named indexes. That is, it supports associative\narrays. But creating and populating an object in JavaScript is just as easy as an array, and more reliable if you need named members.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nlet arr = [];\narr[0] = 'a';\narr['name'] = 'bob';  \/\/ Noncompliant\narr[1] = 'foo';\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nlet obj = {\n  name: 'bob',\n  arr: ['a', 'foo']\n};\n<\/pre>","severity": "Major","tags": ["bad-practice"]}]},{"key": "S3616","title": "Comma and logical OR operators should not be used in switch cases","tags": [],"implementations": [{"key": "javascript:S3616","language": "JavaScript","title": "Comma and logical OR operators should not be used in switch cases","description": "<p>The comma operator (<code>,<\/code>) evaluates its operands, from left to right, and returns the second one. That's useful in some situations, but\njust wrong in a <code>switch<\/code> <code>case<\/code>. You may think you're compactly handling multiple values in the case, but only the last one in\nthe comma-list will ever be handled. The rest will fall through to the default.<\/p>\n<p>Similarly the logical OR operator (<code>||<\/code>) will not work in a <code>switch<\/code> <code>case<\/code>, only the first argument will be\nconsidered at execution time.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch a {\n  case 1,2:  \/\/ Noncompliant; only 2 is ever handled by this case\n    doTheThing(a);\n  case 3 || 4: \/\/ Noncompliant; only '3' is handled\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\"Neener, neener!\");  \/\/ this happens when a==1 or a == 4\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch a {\n  case 1:\n  case 2:\n    doTheThing(a);\n  case 3:\n  case 4:\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\"Neener, neener!\");\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3686","title": "Functions should not be called both with and without \"new\"","tags": [],"implementations": [{"key": "javascript:S3686","language": "JavaScript","title": "Functions should not be called both with and without \"new\"","description": "<p>Constructor functions, which create new object instances, must only be called with <code>new<\/code>. Non-constructor functions must not. Mixing\nthese two usages could lead to unexpected results at runtime.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction getNum() {\n  return 5;\n}\n\nfunction Num(numeric, alphabetic) {\n  this.numeric = numeric;\n  this.alphabetic = alphabetic;\n}\n\nvar myFirstNum = getNum();\nvar my2ndNum = new getNum();  \/\/ Noncompliant. An empty object is returned, NOT 5\n\nvar myNumObj1 = new Num();\nvar myNumObj2 = Num();  \/\/ Noncompliant. undefined is returned, NOT an object\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3699","title": "The output of functions that don't return anything should not be used","tags": [],"implementations": [{"key": "javascript:S3699","language": "JavaScript","title": "The output of functions that don't return anything should not be used","description": "<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n\"result\" to a variable is probably a bug because such functions return <code>undefined<\/code>, which is probably not what was intended.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction foo() {\n}\n\na = foo();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction foo() {\n}\n\nfoo();\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3776","title": "Cognitive Complexity of functions should not be too high","tags": ["brain-overload"],"implementations": [{"key": "php:S3776","language": "PHP","title": "Cognitive Complexity of functions should not be too high","description": "<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/redirect.sonarsource.com\/doc\/cognitive-complexity.html\">Cognitive Complexity<\/a> <\/li>\n<\/ul>","severity": "Critical","tags": ["brain-overload"]},{"key": "python:S3776","language": "Python","title": "Cognitive Complexity of functions should not be too high","description": "<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/redirect.sonarsource.com\/doc\/cognitive-complexity.html\">Cognitive Complexity<\/a> <\/li>\n<\/ul>","severity": "Critical","tags": ["brain-overload"]}]},{"key": "S3782","title": "Arguments to built-in functions should match documented types","tags": [],"implementations": [{"key": "javascript:S3782","language": "JavaScript","title": "Arguments to built-in functions should match documented types","description": "<p>The types of the arguments to built-in functions are specified in the JavaScript language specifications. Calls to these functions should conform\nto the documented types, otherwise the result will most likely not be what was expected (e.g.: the call would always return <code>false<\/code>).<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nconst isTooSmall = Math.abs(x &lt; 0.0042);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nconst isTooSmall = Math.abs(x) &lt; 0.0042;\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3785","title": "\"in\" should not be used with primitive types","tags": [],"implementations": [{"key": "javascript:S3785","language": "JavaScript","title": "\"in\" should not be used with primitive types","description": "<p>The <code>in<\/code> operator tests whether the specified property is in the specified object.<\/p>\n<p>If the right operand is a of primitive type (i.e., not an object) the <code>in<\/code> operator raises a <code>TypeError<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar x = \"Foo\";\n\"length\" in x; \/\/ Noncompliant: TypeError\n0 in x;        \/\/ Noncompliant: TypeError\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar x = new String(\"Foo\");\n\"length\" in x;    \/\/ true\n0 in x;           \/\/ true\n\"foobar\" in x;    \/\/ false\n<\/pre>","severity": "Critical","tags": []}]},{"key": "S3796","title": "Callbacks of array methods should have return statements","tags": [],"implementations": [{"key": "javascript:S3796","language": "JavaScript","title": "Callbacks of array methods should have return statements","description": "<p>Arrays in JavaScript have several methods for filtering, mapping or folding that require a callback. Not having a return statement in such a\ncallback function is most likely a mistake.<\/p>\n<p>This rule applies for the following methods of an array:<\/p>\n<ul>\n  <li> <code>Array.from<\/code> <\/li>\n  <li> <code>Array.prototype.every<\/code> <\/li>\n  <li> <code>Array.prototype.filter<\/code> <\/li>\n  <li> <code>Array.prototype.find<\/code> <\/li>\n  <li> <code>Array.prototype.findIndex<\/code> <\/li>\n  <li> <code>Array.prototype.map<\/code> <\/li>\n  <li> <code>Array.prototype.reduce<\/code> <\/li>\n  <li> <code>Array.prototype.reduceRight<\/code> <\/li>\n  <li> <code>Array.prototype.some<\/code> <\/li>\n  <li> <code>Array.prototype.sort<\/code> <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar merged = arr.reduce(function(a, b) {\n  a.concat(b);\n}); \/\/ Noncompliant: No return statement\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar merged = arr.reduce(function(a, b) {\n  return a.concat(b);\n});\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S3799","title": "Destructuring patterns should not be empty","tags": [],"implementations": [{"key": "javascript:S3799","language": "JavaScript","title": "Destructuring patterns should not be empty","description": "<p>Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible\nto create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the\nintent was to use a default value instead.<\/p>\n<p>This rule raises an issue when empty destructuring pattern is used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar {a: {}, b} = myObj; \/\/ Noncompliant\nfunction foo({first: [], second}) { \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar {a = {}, b} = myObj;\nfunction foo({first = [], second}) {\n  \/\/ ...\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3812","title": "Results of \"in\" and \"instanceof\" should be negated rather than operands","tags": [],"implementations": [{"key": "javascript:S3812","language": "JavaScript","title": "Results of \"in\" and \"instanceof\" should be negated rather than operands","description": "<p>Mixing up the order of operations will almost always yield unexpected results. For instance, consider the outcome of absentmindedly kissing the dog\nand patting your spouse on the head. <\/p>\n<p>Similarly, mis-applied negation will also yield bad results. For instance consider the difference between <code>\\!key in dict<\/code> and\n<code>\\!(key in dict)<\/code>. The first looks for a boolean value (<code>!key<\/code>) in <code>dict<\/code>, and the other looks for a string and\ninverts the result. <code>\\!obj instanceof SomeClass<\/code> has the same problem.<\/p>\n<p>This rule raises an issue when the left operand of an <code>in<\/code> or <code>instanceof<\/code> operator is negated.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (!\"prop\" in myObj) {  \/\/ Noncompliant;  \"in\" operator is checking property \"false\"\n  doTheThing();  \/\/ this block will be never executed\n}\n\nif (!foo instanceof MyClass) {  \/\/ Noncompliant; \"!foo\" returns a boolean, which is not an instance of anything\n  doTheOtherThing();  \/\/ this block is never executed\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (!(\"prop\" in myObj)) {\n  doTheThing();\n}\n\nif (!(foo instanceof MyClass)) {\n  doTheOtherThing();\n}\n<\/pre>","severity": "Critical","tags": []}]},{"key": "S3828","title": "\"yield\" expressions should not be used outside generators","tags": ["es2015"],"implementations": [{"key": "javascript:S3828","language": "JavaScript","title": "\"yield\" expressions should not be used outside generators","description": "<p>The <code>yield<\/code> keyword is used in a generator function to return an <code>IteratorResult<\/code> to the caller. It has no other purpose, and\nif found outside such a function will raise a <code>ReferenceError<\/code> because it is then treated as an identifier.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction foo() {\n  for (var i = 0; i &lt; 5; i++) {\n    yield i * 2;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction * foo() {\n  for (var i = 0; i &lt; 5; i++) {\n    yield i * 2;\n  }\n}\n<\/pre>","severity": "Blocker","tags": ["es2015"]}]},{"key": "S3834","title": "\"Symbol\" should not be used as a constructor","tags": ["es2015"],"implementations": [{"key": "javascript:S3834","language": "JavaScript","title": "\"Symbol\" should not be used as a constructor","description": "<p><code>Symbol<\/code> is a primitive type introduced in ECMAScript2015. Its instances are mainly used as unique property keys.<\/p>\n<p>An instance can only be created by using <code>Symbol<\/code> as a function. Using <code>Symbol<\/code> with the <code>new<\/code> operator will raise\na <code>TypeError<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nconst sym = new Symbol(\"foo\");   \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nconst sym = Symbol(\"foo\");\n<\/pre>","severity": "Critical","tags": ["es2015"]}]},{"key": "S3854","title": "super() should be invoked appropriately","tags": [],"implementations": [{"key": "javascript:S3854","language": "JavaScript","title": "super() should be invoked appropriately","description": "<p>There are situations where <code>super()<\/code> must be invoked and situations where <code>super()<\/code> cannot be invoked.<\/p>\n<p>The basic rule is: a constructor in a non-derived class cannot invoke <code>super()<\/code>; a constructor in a derived class must invoke\n<code>super()<\/code>.<\/p>\n<p>Furthermore:<\/p>\n<p>- <code>super()<\/code> must be invoked before the <code>this<\/code> and <code>super<\/code> keywords can be used.<\/p>\n<p>- <code>super()<\/code> must be invoked with the same number of arguments as the base class' constructor.<\/p>\n<p>- <code>super()<\/code> can only be invoked in a constructor - not in any other method.<\/p>\n<p>- <code>super()<\/code> cannot be invoked multiple times in the same constructor.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Animal {\n  constructor() {\n    super();         \/\/ Noncompliant, super() cannot be invoked in a base class\n  }\n\n  doSomething() {\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    this.name = name;\n    super.doSomething();\n    super();         \/\/ Noncompliant, super() must be invoked before \"this\" or \"super\" is used\n  }\n\n  doSomething() {\n    super();         \/\/ Noncompliant, super() cannot be invoked outside of a constructor\n  }\n}\n\nclass Labrador extends Dog {\n  constructor(name) {\n    super();         \/\/ Noncompliant, super() must be invoked with one argument\n  }\n}\n\nclass GermanShepherd extends Dog {\n  constructor(name) {\n  }                  \/\/ Noncompliant, super() must be invoked in constructor of derived class\n}\n\nclass FilaBrasileiro extends Dog {\n  constructor(name) {\n    super(name);\n    super(name);    \/\/ Noncompliant, super() can only be invoked once\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Animal {\n  constructor() {\n  }\n\n  doSomething() {\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super();\n    this.name = name;\n    super.doSomething();\n  }\n\n  doSomething() {\n  }\n}\n\nclass Labrador extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n\nclass GermanShepherd extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n\nclass FilaBrasileiro extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n<\/pre>\n<h2>Known Limitations<\/h2>\n<ul>\n  <li>False negatives: some issues are not raised if the base class is not defined in the same file as the current class.<\/li>\n<\/ul>","severity": "Critical","tags": []}]},{"key": "S3923","title": "All branches in a conditional structure should not have exactly the same implementation","tags": [],"implementations": [{"key": "javascript:S3923","language": "JavaScript","title": "All branches in a conditional structure should not have exactly the same implementation","description": "<p>Having all branches in a <code>switch<\/code> or <code>if<\/code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch<\/code>\/<code>if<\/code> chain at all. Note that this rule does not\napply to <code>if<\/code> chains without <code>else<\/code>s, or to <code>switch<\/code>es without <code>default<\/code> clauses.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (b == 0) {  \/\/ Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nlet a = (b == 0) ? getValue() : getValue();   \/\/ Noncompliant\n\nswitch (i) {  \/\/ Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S905","title": "Non-empty statements should change control flow or have at least one side-effect","tags": ["cwe","misra","cert","unused"],"implementations": [{"key": "javascript:S905","language": "JavaScript","title": "Non-empty statements should change control flow or have at least one side-effect","description": "<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;<\/code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\na == 1; \/\/ Noncompliant; was assignment intended?\nvar msg = \"Hello, \"\n  \"World!\"; \/\/ Noncompliant; have we forgotten '+' operator on previous line?\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/482\">MITRE, CWE-482<\/a> - Comparing instead of Assigning <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","unused"]},{"key": "php:S905","language": "PHP","title": "Non-empty statements should change control flow or have at least one side-effect","description": "<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;<\/code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$a == 1; \/\/ Noncompliant; was assignment intended?\n$a &lt; $b; \/\/ Noncompliant; have we forgotten to assign the result to a variable?\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/482\">MITRE, CWE-482<\/a> - Comparing instead of Assigning <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","unused"]}]},{"key": "S907","title": "\"goto\" statement should not be used","tags": ["brain-overload","misra"],"implementations": [{"key": "php:S907","language": "PHP","title": "\"goto\" statement should not be used","description": "<p><code>goto<\/code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas <code>if<\/code>, <code>for<\/code>, <code>while<\/code>, <code>continue<\/code> or <code>break<\/code> should be used instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$i = 0;\nloop:\n  echo(\"i = $i\");\n  $i++;\n  if ($i &lt; 10){\n    goto loop;\n  }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++){\n  echo(\"i = $i\");\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. <\/li>\n  <li> MISRA C:2012, 15.1 - The goto statement should not be used <\/li>\n<\/ul>","severity": "Major","tags": ["brain-overload","misra"]}]},{"key": "S930","title": "Function calls should not pass extra arguments","tags": ["cwe","misra","cert"],"implementations": [{"key": "javascript:S930","language": "JavaScript","title": "Function calls should not pass extra arguments","description": "<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function\nexecution.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction say(a, b) {\n  print(a + \" \" + b);\n}\n\nsay(\"hello\", \"world\", \"!\"); \/\/ Noncompliant; last argument is not used\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>No issue is reported when <code>arguments<\/code> is used in the body of the function being called.<\/p>\n<pre>\nfunction doSomething(a, b) {\n  compute(arguments);\n}\n\ndoSomething(1, 2, 3) \/\/ Compliant\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/628.html\">MITRE, CWE-628<\/a> - Function Call with Incorrectly Specified Arguments <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/LoAg\">CERT, DCL07-C.<\/a> - Include the appropriate type information in function\n  declarators <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/VQBc\">CERT, EXP37-C.<\/a> - Call functions with the correct number and type of arguments\n  <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe","misra"]}]},{"key": "UnreachableCode","title": "Jump statements should not be followed by other statements","tags": ["cwe","misra","cert","unused"],"implementations": [{"key": "javascript:UnreachableCode","language": "JavaScript","title": "Jump statements should not be followed by other statements","description": "<p>Jump statements (<code>return<\/code>, <code>break<\/code> and <code>continue<\/code>) and <code>throw<\/code> expressions move control flow out of the\ncurrent code block. Typically, any statements in a block that come after a jump or <code>throw<\/code> are simply wasted keystrokes lying in wait to\nconfuse the unwary. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction fun(a) {\n  var i = 10;\n  return i + a;\n  i++;             \/\/ Noncompliant; this is never executed\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction fun(int a) {\n  var i = 10;\n  return i + a;\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule ignores unreachable <code>break<\/code> statements in <code>switch<\/code> clauses.<\/p>\n<pre>\nswitch (x) {\n  case 42:\n     return 43;\n     break;   \/\/ Compliant\n  default:\n    doSomething();\n}\n<\/pre>\n<p>Hoisted variables declarations without initialization are always considered reachable.<\/p>\n<pre>\nfunction bar() {\n  return x = function() {\n    x.foo = 42;\n  }\n  var x;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code <\/li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code <\/li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code <\/li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code <\/li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/561.html\">MITRE, CWE-561<\/a> - Dead Code <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/uQCSBg\">CERT, MSC56-J.<\/a> - Detect and remove superfluous code and values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/OYIyAQ\">CERT, MSC07-CPP.<\/a> - Detect and remove dead code <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","unused"]}]},{"key": "UnusedVariable","title": "Unused local variables and functions should be removed","tags": ["unused"],"implementations": [{"key": "javascript:UnusedVariable","language": "JavaScript","title": "Unused local variables and functions should be removed","description": "<p>If a local variable or a local function is declared but not used, it is dead code and should be removed. Doing so will improve maintainability\nbecause developers will not wonder what the variable or function is used for.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  var seconds = 0;   \/\/ seconds is never used\n  return hours * 60;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n<\/pre>","severity": "Minor","tags": ["unused"]}]},{"key": "WithStatement","title": "\"with\" statements should not be used","tags": [],"implementations": [{"key": "javascript:WithStatement","language": "JavaScript","title": "\"with\" statements should not be used","description": "<p>The use of the <code>with<\/code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against\n<code>with<\/code>.<\/p>\n<p>Using <code>with<\/code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with<\/code> to access\nsome property not already set in the object, and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting\nvariables there. Since the effects of <code>with<\/code> are entirely dependent on the object passed to it, <code>with<\/code> can be dangerously\nunpredictable, and should never be used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nwith (foo) {  \/\/ Noncompliant\n  y = 4;  \/\/ updates foo.x\n  x = 3;  \/\/ does NOT add a foo.x property; updates x var in outer scope\n}\nprint(foo.x + \" \" + x); \/\/ shows: undefined 3\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nfoo.y = 4;\nfoo.x = 3;\n\nprint(foo.x + \" \" + x); \/\/ shows: 3 a\n<\/pre>","severity": "Minor","tags": []}]}]}