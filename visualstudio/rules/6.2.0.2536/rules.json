{
  "rules": [
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Major",
          "description": "<p>Since <code>abstract</code> classes can't be instantiated, there's no point in their having <code>public</code> or <code>internal</code>\nconstructors. If there is basic initialization logic that should run when an extending class instance is created, you can by all means put it in a\nconstructor, but make that constructor <code>private</code> or <code>protected</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nabstract class Base\n{\n    public Base() // Noncompliant, should be private or protected\n    {\n      //...\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nabstract class Base\n{\n    protected Base()\n    {\n      //...\n    }\n}\n</pre>\n\r\n",
          "title": "\"abstract\" classes should not have \"public\" constructors",
          "language": "C#",
          "key": "S3442"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "\"abstract\" classes should not have \"public\" constructors",
      "key": "S3442"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>It is possible to subscribe to events with anonymous delegates, but having done so, it is impossible to unsubscribe from them. That's because the\nprocess of subscribing adds the delegate to a list. The process of unsubscribing essentially says: remove <em>this item</em> from the subscription\nlist. But because an anonymous delegate was used in both cases, the unsubscribe attempt tries to remove a different item from the list than was added.\nThe result: <code>NOOP</code>.</p>\n<p>Instead, save the delegate to a variable and use the variable to subscribe and unsubscribe.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlistView.PreviewTextInput += (obj,args) =&gt;\n        listView_PreviewTextInput(obj,args,listView);\n\n// ...\n\nlistView.PreviewTextInput -= (obj, args) =&gt;\n        listView_PreviewTextInput(obj, args, listView); // Noncompliant; this delegate was never subscribed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEventHandler func = (obj,args) =&gt; listView_PreviewTextInput(obj,args,listView);\n\nlistView.PreviewTextInput += func;\n\n// ...\n\nlistView.PreviewTextInput -= func;\n</pre>\n\r\n",
          "title": "Anonymous delegates should not be used to unsubscribe from Events",
          "language": "C#",
          "key": "S3244"
        }
      ],
      "tags": [],
      "title": "Anonymous delegates should not be used to unsubscribe from Events",
      "key": "S3244"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Minor",
          "description": "<p>Caller information attributes: <code>CallerFilePathAttribute</code> and <code>CallerLineNumberAttribute</code> provide a way to get information\nabout the caller of a method through optional parameters. But the arguments for these optional parameters are only generated if they are not\nexplicitly defined in the call. Thus, specifying the argument values defeats the purpose of the attributes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid TraceMessage(string message,\n  [CallerFilePath] string filePath = null,\n  [CallerLineNumber] int lineNumber = 0)\n{\n  /* ... */\n}\n\nvoid MyMethod()\n{\n  TraceMessage(\"my message\", \"A.B.C.Foo.cs\", 42); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid TraceMessage(string message,\n  [CallerFilePath] string filePath = \"\",\n  [CallerLineNumber] int lineNumber = 0)\n{\n  /* ... */\n}\n\nvoid MyMethod()\n{\n  TraceMessage(\"my message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>CallerMemberName</code> is not checked to avoid False-Positives with WPF/UWP applications.</p>\n\r\n",
          "title": "Caller information arguments should not be provided explicitly",
          "language": "C#",
          "key": "S3236"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "Caller information arguments should not be provided explicitly",
      "key": "S3236"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>Array covariance is the principle that if an implicit or explicit reference conversion exits from type <code>A</code> to <code>B</code>, then the\nsame conversion exists from the array type <code>A[]</code> to <code>B[]</code>.</p>\n<p>While this array conversion can be useful in readonly situations to pass instances of <code>A[]</code> where <code>B[]</code> is expected, it must\nbe used with care, since assigning an instance of <code>B</code> into an array of <code>A</code> will cause an <code>ArrayTypeMismatchException</code>\nto be thrown at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nabstract class Fruit { }\nclass Apple : Fruit { }\nclass Orange : Fruit { }\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Fruit[] fruits = new Apple[1]; // Noncompliant - array covariance is used\n    FillWithOranges(fruits);\n  }\n\n  // Just looking at the code doesn't reveal anything suspicious\n  static void FillWithOranges(Fruit[] fruits)\n  {\n    for (int i = 0; i &lt; fruits.Length; i++)\n    {\n      fruits[i] = new Orange(); // Will throw an ArrayTypeMismatchException\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nabstract class Fruit { }\nclass Apple : Fruit { }\nclass Orange : Fruit { }\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Orange[] fruits = new Orange[1]; // Compliant\n    FillWithOranges(fruits);\n  }\n\n  static void FillWithOranges(Orange[] fruits)\n  {\n    for (int i = 0; i &lt; fruits.Length; i++)\n    {\n      fruits[i] = new Orange();\n    }\n  }\n}\n</pre>\n\r\n",
          "title": "Array covariance should not be used",
          "language": "C#",
          "key": "S2330"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Array covariance should not be used",
      "key": "S2330"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "misra",
            "cert",
            "suspicious"
          ],
          "severity": "Major",
          "description": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (string.IsNullOrEmpty(result = str.Substring(index, length))) // Noncompliant\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar result = str.Substring(index, length);\nif (string.IsNullOrEmpty(result))\n{\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments inside lambda and delegate expressions are allowed. </p>\n<p>Furthermore, the following patterns are also accepted:</p>\n<pre>\nvar a = b = c = 10;\n</pre>\n<pre>\nwhile ((val = GetNewValue()) &gt; 0)\n{\n...\n}\n</pre>\n<pre>\nprivate MyClass instance;\npublic MyClass Instance\n{\n  get\n  {\n    return instance ?? (instance = new MyClass());\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/nYFtAg\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1gCTAw\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KQvhAg\">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KYIyAQ\">CERT, MSC02-CPP.</a> - Avoid errors of omission </li>\n</ul>\n\r\n",
          "title": "Assignments should not be made from within sub-expressions",
          "language": "C#",
          "key": "S1121"
        }
      ],
      "tags": [
        "cwe",
        "misra",
        "cert",
        "suspicious"
      ],
      "title": "Assignments should not be made from within sub-expressions",
      "key": "S1121"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Blocker",
          "description": "<p>Since C# 5.0, <code>async</code> and <code>await</code> are contextual keywords. Contextual keywords do have a particular meaning in some contexts,\nbut can still be used as variable names. Keywords, on the other hand, are always reserved, and therefore are not valid variable names. To avoid any\nconfusion though, it is best to not use <code>async</code> and <code>await</code> as identifiers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint await = 42; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint someOtherName = 42;\n</pre>\n\r\n",
          "title": "\"async\" and \"await\" should not be used as identifiers",
          "language": "C#",
          "key": "S2306"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "\"async\" and \"await\" should not be used as identifiers",
      "key": "S2306"
    },
    {
      "implementations": [
        {
          "tags": [
            "multi-threading"
          ],
          "severity": "Major",
          "description": "<p>An <code>async</code> method with a <code>void</code> return type is a \"fire and forget\" method best reserved for event handlers because there's no\nway to wait for the method's execution to complete and respond accordingly. There's also no way to <code>catch</code> exceptions thrown from the\nmethod.</p>\n<p>Having an <code>async void</code> method that is not an event handler could mean your program works some times and not others because of timing\nissues. Instead, <code>async</code> methods should return <code>Task</code>.</p>\n<p>This rule raises an issue when non-event handler methods are both <code>async</code> and <code>void</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass HttpPrinter\n{\n  private string content;\n\n  public async void CallNetwork(string url) //Noncompliant\n  {\n    var client = new HttpClient();\n    var response = await client.GetAsync(url);\n    content = await response.Content.ReadAsStringAsync();\n  }\n\n  public async Task PrintContent(string url)  // works correctly if web request finishes in under 1 second, otherwise content will be null\n  {\n    CallNetwork(url);\n    await Task.Delay(1000);\n    Console.Write(content);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass HttpPrinter\n{\n  private string content;\n\n  public async Task CallNetwork(string url)\n  {\n    var client = new HttpClient();\n    var response = await client.GetAsync(url);\n    content = await response.Content.ReadAsStringAsync();\n  }\n\n  public async Task PrintContent(string url)\n  {\n    await CallNetwork(url); // &lt;----- call changed here. If await is not added warning CS4014 will be triggered\n    await Task.Delay(1000);\n    Console.Write(content);\n  }\n}\n</pre>\n\r\n",
          "title": "\"async\" methods should not return \"void\"",
          "language": "C#",
          "key": "S3168"
        }
      ],
      "tags": [
        "multi-threading"
      ],
      "title": "\"async\" methods should not return \"void\"",
      "key": "S3168"
    },
    {
      "implementations": [
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Major",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">max</dt><dd><span class=\"param-description\">Maximum number of classes a single class is allowed to depend upon</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">20</span></dd></dl><p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\npublic class Foo    // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n{\n  private T1 a1;    // Foo is coupled to T1\n  private T2 a2;    // Foo is coupled to T2\n  private T3 a3;    // Foo is coupled to T3\n\n  public T4 Compute(T5 a, T6 b)    // Foo is coupled to T4, T5 and T6\n  {\n    T7 result = a.Process(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar    // Compliant - Bar depends on 2 classes: T8 and T9\n  {\n    public T8 a8;\n    public T9 a9;\n  }\n}\n</pre>\n\n",
          "title": "Classes should not be coupled to too many other classes (Single Responsibility Principle)",
          "language": "C#",
          "key": "S1200"
        }
      ],
      "tags": [
        "brain-overload"
      ],
      "title": "Classes should not be coupled to too many other classes (Single Responsibility Principle)",
      "key": "S1200"
    },
    {
      "implementations": [
        {
          "tags": [
            "design"
          ],
          "severity": "Major",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">max</dt><dd><span class=\"param-description\">Maximum depth of the inheritance tree. (Number)</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">5</span></dd><dt class=\"param-key\">filteredClasses</dt><dd><span class=\"param-description\">Comma-separated list of classes to be filtered out of the count of inheritance. Depth counting will stop when a filtered class is reached. For example: System.Windows.Controls.UserControl, System.Windows.*. (String)</span><span class=\"param-type\">STRING</span><span class=\"param-default\"></span></dd></dl><p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object\noriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>\n<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>\n\r\n",
          "title": "Inheritance tree of classes should not be too deep",
          "language": "C#",
          "key": "S110"
        }
      ],
      "tags": [
        "design"
      ],
      "title": "Inheritance tree of classes should not be too deep",
      "key": "S110"
    },
    {
      "implementations": [
        {
          "tags": [
            "performance"
          ],
          "severity": "Minor",
          "description": "<p>The .NET framework class library provides methods for retrieving custom attributes. Sealing the attribute eliminates the search through the\ninheritance hierarchy, and can improve performance.</p>\n<p>This rule raises an issue when a public type inherits from <code>System.Attribute</code>, is not abstract, and is not sealed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct)]\n    public class MyAttribute: Attribute // Noncompliant\n    {\n        private string nameValue;\n        public MyAttribute(string name)\n        {\n            nameValue = name;\n        }\n\n        public string Name\n        {\n            get\n            {\n                return nameValue;\n            }\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct)]\n    public sealed class MyAttribute: Attribute\n    {\n        private string nameValue;\n        public MyAttribute(string name)\n        {\n            nameValue = name;\n        }\n\n        public string Name\n        {\n            get\n            {\n                return nameValue;\n            }\n        }\n    }\n}\n</pre>\n\n",
          "title": "Non-abstract attributes should be sealed",
          "language": "C#",
          "key": "S4060"
        }
      ],
      "tags": [
        "performance"
      ],
      "title": "Non-abstract attributes should be sealed",
      "key": "S4060"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert"
          ],
          "severity": "Major",
          "description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, <code>=</code>, <code>&lt;&lt;</code>, and <code>&gt;&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) // always true\n{\n  doZ();\n}\nif ( a != a ) // always false\n{\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) // if the first one is true, the second one is too\n{\n  doX();\n}\nif ( a == b || a == b ) // if the first one is true, the second one is too\n{\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; // always 0\n\nc.Equals(c);    //always true\nObject.Equals(c, c); //always true\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a class=\"rule-link\" href=\"#version=6.2.0.0&ruleId=S1656\">Rule S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>\n\r\n",
          "title": "Identical expressions should not be used on both sides of a binary operator",
          "language": "C#",
          "key": "S1764"
        },
        {
          "tags": [
            "cert"
          ],
          "severity": "Major",
          "description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of most binary mathematical operators, having the same\nvalue on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, <code>&amp;</code>, <code>&lt;&lt;</code>, and <code>&gt;&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIf (a = a) Then\n  doZ()\nEnd If\n\nIf a = b OrElse a = b Then\n  doW()\nEnd If\n\nDim j = 5 / 5\nj = 5 \\ 5\nj = 5 Mod 5\nDim k = 5 - 5\n\nDim i = 42\ni /= i\ni -= i\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a class=\"rule-link\" href=\"#version=6.2.0.0&ruleId=S1656\">Rule S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>\n\r\n",
          "title": "Identical expressions should not be used on both sides of a binary operator",
          "language": "VB.NET",
          "key": "S1764"
        }
      ],
      "tags": [
        "cert"
      ],
      "title": "Identical expressions should not be used on both sides of a binary operator",
      "key": "S1764"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Minor",
          "description": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nbool b = !(i &lt; 10);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...}\nbool b = (i &gt;= 10);\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Invert 'Boolean' check</li></ul>",
          "title": "Boolean checks should not be inverted",
          "language": "C#",
          "key": "S1940"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Boolean checks should not be inverted",
      "key": "S1940"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n\nfor (var x = 0; true; x++)\n{\n ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n\nfor (var x = 0; ; x++)\n{\n ...\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove the unnecessary Boolean literal(s)</li></ul>",
          "title": "Boolean literals should not be redundant",
          "language": "C#",
          "key": "S1125"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "Boolean literals should not be redundant",
      "key": "S1125"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p><code>break;</code> is an unstructured control flow statement which makes code harder to read.</p>\n<p>Ideally, every loop should have a single termination condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 0;\nwhile (true)\n{\n  if (i == 10)\n  {\n    break;      // Non-Compliant\n  }\n\n  Console.WriteLine(i);\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i = 0;\nwhile (i != 10) // Compliant\n{\n  Console.WriteLine(i);\n  i++;\n}\n</pre>\n\r\n",
          "title": "break statements should not be used except for switch cases",
          "language": "C#",
          "key": "S1227"
        }
      ],
      "tags": [],
      "title": "break statements should not be used except for switch cases",
      "key": "S1227"
    },
    {
      "implementations": [
        {
          "tags": [
            "design"
          ],
          "severity": "Critical",
          "description": "<p>Needing to cast from an <code>interface</code> to a concrete type indicates that something is wrong with the abstractions in use, likely that\nsomething is missing from the <code>interface</code>. Instead of casting to a discrete type, the missing functionality should be added to the\n<code>interface</code>. Otherwise there is a risk of runtime exceptions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface IMyInterface\n{\n  void DoStuff();\n}\n\npublic class MyClass1 : IMyInterface\n{\n  public int Data { get { return new Random().Next(); } }\n\n  public void DoStuff()\n  {\n    // TODO...\n  }\n}\n\npublic static class DowncastExampleProgram\n{\n  static void EntryPoint(IMyInterface interfaceRef)\n  {\n    MyClass1 class1 = (MyClass1)interfaceRef;  // Noncompliant\n    int privateData = class1.Data;\n\n    class1 = interfaceRef as MyClass1;  // Noncompliant\n    if (class1 != null)\n    {\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Casting to <code>object</code> doesn't raise an issue, because it can never fail.</p>\n<pre>\nstatic void EntryPoint(IMyInterface interfaceRef)\n{\n  var o = (object)interfaceRef;\n  ...\n}\n</pre>\n\r\n",
          "title": "\"interface\" instances should not be cast to concrete types",
          "language": "C#",
          "key": "S3215"
        }
      ],
      "tags": [
        "design"
      ],
      "title": "\"interface\" instances should not be cast to concrete types",
      "key": "S3215"
    },
    {
      "implementations": [
        {
          "tags": [
            "performance"
          ],
          "severity": "Minor",
          "description": "<p>Because the <code>is</code> operator performs a cast if the object is not null, using <code>is</code> to check type and then casting the same\nargument to that type, necessarily performs two casts. The same result can be achieved more efficiently with a single cast using <code>as</code>,\nfollowed by a null-check.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x is Fruit)  // Noncompliant\n{\n  var f = (Fruit)x; // or x as Fruit\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar f = x as Fruit;\nif (f != null)\n{\n  // code\n}\n</pre>\n\r\n",
          "title": "Duplicate casts should not be made",
          "language": "C#",
          "key": "S3247"
        }
      ],
      "tags": [
        "performance"
      ],
      "title": "Duplicate casts should not be made",
      "key": "S3247"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "error-handling",
            "suspicious"
          ],
          "severity": "Minor",
          "description": "<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>\n<p>This rule only reports on empty catch clauses that catch generic <code>Exception</code>s.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring text = \"\";\ntry\n{\n  text = File.ReadAllText(fileName);\n}\ncatch (Exception exc) // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstring text = \"\";\ntry\n{\n  text = File.ReadAllText(fileName);\n}\ncatch (Exception exc)\n{\n  logger.Log(exc);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, it is not considered to be empty.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/391.html\">MITRE, CWE-391</a> - Unchecked Error Condition </li>\n</ul>\n\r\n",
          "title": "Generic exceptions should not be ignored",
          "language": "C#",
          "key": "S2486"
        }
      ],
      "tags": [
        "cwe",
        "error-handling",
        "suspicious"
      ],
      "title": "Generic exceptions should not be ignored",
      "key": "S2486"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "unused",
            "finding",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring s = \"\";\ntry\n{\n  s = File.ReadAllText(fileName);\n}\ncatch (Exception e)  // Noncompliant\n{\n  throw;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstring s = \"\";\ntry\n{\n  s = File.ReadAllText(fileName);\n}\ncatch (Exception e) // Compliant\n{\n  logger.LogError(e);\n  throw;\n}\n</pre>\n<p>or</p>\n<pre>\nstring s = File.ReadAllText(fileName);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant catch</li></ul>",
          "title": "\"catch\" clauses should do more than rethrow",
          "language": "C#",
          "key": "S2737"
        }
      ],
      "tags": [
        "cert",
        "unused",
        "finding",
        "clumsy"
      ],
      "title": "\"catch\" clauses should do more than rethrow",
      "key": "S2737"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Some constructors of the <code>ArgumentException</code>, <code>ArgumentNullException</code>, <code>ArgumentOutOfRangeException</code> and\n<code>DuplicateWaitObjectException</code> classes must be fed with a valid parameter name. This rule raises an issue in two cases:</p>\n<ul>\n  <li> When this parameter name doesn't match any existing ones. </li>\n  <li> When a call is made to the default (parameterless) constructor </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void Foo(Bar a, int[] b)\n{\n  throw new ArgumentException(); // Noncompliant\n  throw new ArgumentException(\"My error message\", \"c\"); // Noncompliant\n  throw new ArgumentException(\"My error message\", \"c\", innerException); // Noncompliant\n  throw new ArgumentNullException(\"c\"); // Noncompliant\n  throw new ArgumentNullException(\"My error message\", \"c\"); // Noncompliant\n  throw new ArgumentOutOfRangeException(\"c\");\n  throw new ArgumentOutOfRangeException(\"c\", \"My error message\"); // Noncompliant\n  throw new ArgumentOutOfRangeException(\"c\", b, \"My error message\"); // Noncompliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule won't raise an issue if the parameter name is not a constant value (inline declaration, nameof() or const variable).</p>\n\r\n",
          "title": "Parameter names used into ArgumentException constructors should match an existing one ",
          "language": "C#",
          "key": "S3928"
        }
      ],
      "tags": [],
      "title": "Parameter names used into ArgumentException constructors should match an existing one ",
      "key": "S3928"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Blocker",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">headerFormat</dt><dd><span class=\"param-description\">Expected copyright and license header.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">/*\r\n * SonarQube, open source software quality management tool.\r\n * Copyright (C) 2008-2013 SonarSource\r\n * mailto:contact AT sonarsource DOT com\r\n *\r\n * SonarQube is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3 of the License, or (at your option) any later version.\r\n *\r\n * SonarQube is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with this program; if not, write to the Free Software Foundation,\r\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\n</span></dd><dt class=\"param-key\">isRegularExpression</dt><dd><span class=\"param-description\">Whether the headerFormat is a regular expression.</span><span class=\"param-type\">BOOLEAN</span><span class=\"param-default\">false</span></dd></dl><p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<p>The <code>headerFormat</code> must end with an empty line if you want to have an empty line between the file header and the first line for your\nsource file (<code>using</code>, <code>namespace</code>...).</p>\n<p>For example, if you want the source file to look like this</p>\n<pre>\n// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.\n\nnamespace Foo\n{\n}\n</pre>\n<p>then the <code>headerFormat</code> parameter should end with an empty line like this</p>\n<pre>\n// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Add or update license header</li></ul>",
          "title": "Track lack of copyright and license headers",
          "language": "C#",
          "key": "S1451"
        }
      ],
      "tags": [],
      "title": "Track lack of copyright and license headers",
      "key": "S1451"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not type names are camel cased. To reduce noise, two\nconsecutive upper case characters are allowed unless they form the whole type name. So, <code>MyXClass</code> is compliant, but <code>XC</code> on its\nown is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass my_class {...}\nclass SOMEName42 {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\nclass SomeName42 {...}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule ignores types that are marked with <code>ComImportAttribute</code> or <code>InterfaceTypeAttribute</code>. Furthermore, the rule allows to\nhave <code>'_'</code> characters in class names inside test projects.</p>\n<pre>\nclass Some_Name___42 {...} // valid in test\nclass Some_name___42 {...} // still not valid\nclass Some_Name_XC {...} // invalid because of XC, should be Some_Name_Xc\n</pre>\n\r\n",
          "title": "Types should be named in camel case",
          "language": "C#",
          "key": "S101"
        },
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the class names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nClass foo ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo ' Compliant\nEnd Class\n</pre>\n\r\n",
          "title": "Class names should comply with a naming convention",
          "language": "VB.NET",
          "key": "S101"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Types should be named in camel case",
      "key": "S101"
    },
    {
      "implementations": [
        {
          "tags": [
            "design"
          ],
          "severity": "Major",
          "description": "<p>A class with only <code>private</code> constructors can't be instantiated, thus, it seems to be pointless code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass // Noncompliant\n{\n  private MyClass() { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n{\n  public MyClass() { ... }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Classes that themselves access their private constructors (singletons or smart enums) are ignored. Classes with only <code>static</code> members\nare also ignored because they are covered by Rule S1118.</p>\n\r\n",
          "title": "Classes should not have only \"private\" constructors",
          "language": "C#",
          "key": "S3453"
        }
      ],
      "tags": [
        "design"
      ],
      "title": "Classes should not have only \"private\" constructors",
      "key": "S3453"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n<code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal //Noncompliant; should be an interface\n{\n  abstract void Move();\n  abstract void Feed();\n}\n\npublic abstract class Color //Noncompliant; should be concrete with a private constructor\n{\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int GetRed()\n  {\n    return red;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal\n{\n  void Move();\n  void Feed();\n}\n\npublic class Color\n{\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color()\n  {}\n\n  public int GetRed()\n  {\n    return red;\n  }\n}\n\npublic abstract class Lamp\n{\n  private bool switchLamp = false;\n\n  public abstract void Glow();\n\n  public void FlipSwitch()\n  {\n    switchLamp = !switchLamp;\n    if (switchLamp)\n    {\n      Glow();\n    }\n  }\n}\n</pre>\n\r\n",
          "title": "An abstract class should have both abstract and concrete methods",
          "language": "C#",
          "key": "S1694"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "An abstract class should have both abstract and concrete methods",
      "key": "S1694"
    },
    {
      "implementations": [
        {
          "tags": [
            "api-design"
          ],
          "severity": "Minor",
          "description": "<p>The <code>IEquatable&lt;T&gt;</code> interface has only one method in it: <code>Equals(&lt;T&gt;)</code>. If you've already written\n<code>Equals(T)</code>, there's no reason not to explicitly implement <code>IEquatable&lt;T&gt;</code>. Doing so expands the utility of your class by\nallowing it to be used where an <code>IEquatable</code> is called for.</p>\n<p><strong></strong>Note**: Classes that implement <code>IEquatable&lt;T&gt;</code> should also be <code>sealed</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass  // Noncompliant\n{\n  public override bool Equals(object other)\n  {\n    //...\n  }\n}\n</pre>\n<pre>\nclass MyClass  // Noncompliant\n{\n  public bool Equals(MyClass other)\n  {\n    //...\n  }\n}\n</pre>\n<pre>\nclass MyClass : IEquatable&lt;T&gt;  // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsealed class MyClass : IEquatable&lt;MyClass&gt;\n{\n  public override bool Equals(object other)\n  {\n    return Equals(other as MyClass);\n  }\n\n  public bool Equals(MyClass other)\n  {\n    //...\n  }\n}\n</pre>\n\r\n",
          "title": "Classes that provide \"Equals(<T>)\" should implement \"IEquatable<T>\"",
          "language": "C#",
          "key": "S3897"
        }
      ],
      "tags": [
        "api-design"
      ],
      "title": "Classes that provide \"Equals(<T>)\" should implement \"IEquatable<T>\"",
      "key": "S3897"
    },
    {
      "implementations": [
        {
          "tags": [
            "design"
          ],
          "severity": "Major",
          "description": "<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even <code>abstract</code> utility\nclasses, which can be extended, should not have <code>public</code> constructors.</p>\n<p>C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one\n<code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the <code>static</code> keyword should be added to\nthe class declaration to prevent subclassing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class StringUtils // Noncompliant\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static class StringUtils\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic class StringUtils\n{\n  protected StringUtils()\n  {\n  }\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this\nrule.</p>\n\r\n",
          "title": "Utility classes should not have public constructors",
          "language": "C#",
          "key": "S1118"
        }
      ],
      "tags": [
        "design"
      ],
      "title": "Utility classes should not have public constructors",
      "key": "S1118"
    },
    {
      "implementations": [
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Critical",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">threshold</dt><dd><span class=\"param-description\">The maximum authorized complexity.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">15</span></dd><dt class=\"param-key\">propertyThreshold </dt><dd><span class=\"param-description\">The maximum authorized complexity in a property.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">3</span></dd></dl><p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>\n\r\n",
          "title": "Cognitive Complexity of methods should not be too high",
          "language": "C#",
          "key": "S3776"
        }
      ],
      "tags": [
        "brain-overload"
      ],
      "title": "Cognitive Complexity of methods should not be too high",
      "key": "S3776"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Using <code>.Count()</code> to test for emptiness works, but using <code>.Any()</code> makes the intent clearer, and the code more readable.\nHowever, there are some cases where special attention should be paid:</p>\n<p>- if the collection is an <code>EntityFramework</code> or other ORM query, calling <code>.Count()</code> will cause executing a potentially massive\nSQL query and could put a large overhead on the application database. Calling <code>.Any()</code> will also connect to the database, but will generate\nmuch more efficient SQL.</p>\n<p>- if the collection is part of a LINQ query that contains <code>.Select()</code> statements that create objects, a large amount of memory could be\nunnecessarily allocated. Calling <code>.Any()</code> will be much more efficient because it will execute fewer iterations of the enumerable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static bool HasContent(IEnumerable&lt;string&gt; strings)\n{\n  return strings.Count() &gt; 0;  // Noncompliant\n}\n\nprivate static bool HasContent2(IEnumerable&lt;string&gt; strings)\n{\n  return strings.Count() &gt;= 1;  // Noncompliant\n}\n\nprivate static bool IsEmpty(IEnumerable&lt;string&gt; strings)\n{\n  return strings.Count() == 0;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static bool HasContent(IEnumerable&lt;string&gt; strings)\n{\n  return strings.Any();\n}\n\nprivate static bool IsEmpty(IEnumerable&lt;string&gt; strings)\n{\n  return !strings.Any();\n}\n</pre>\n\r\n",
          "title": "\"Any()\" should be used to test for emptiness",
          "language": "C#",
          "key": "S1155"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "\"Any()\" should be used to test for emptiness",
      "key": "S1155"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>A writable collection property can be replaced by a completely different collection. Making it <code>readonly</code> prevents that while still\nallowing individual members to be set. If you want to allow the replacement of the whole collection the recommended pattern is to implement a method\nto remove all the elements (e.g. <code>System.Collections.List&lt;T&gt;.Clear</code>) and a method to populate the collection (e.g.\n<code>System.Collections.List&lt;T&gt;.AddRange</code>).</p>\n<p>This rule raises an issue when an externally visible writable property is of a type that implements <code>System.Collections.ICollection</code> or\n<code>System.Collections.Generic.ICollection&lt;T&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    List&lt;string&gt; strings;\n\n    public List&lt;string&gt; SomeStrings\n    {\n      get { return strings; }\n      set { strings = value; } // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    List&lt;string&gt; strings;\n\n    public readonly List&lt;string&gt; SomeStrings\n    {\n      get { return strings; }\n    }\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not raise issues for <code>string</code>, <code>Array</code> and <code>PermissionSet</code>.</p>\n\r\n",
          "title": "Collection properties should be readonly",
          "language": "C#",
          "key": "S4004"
        }
      ],
      "tags": [],
      "title": "Collection properties should be readonly",
      "key": "S4004"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Major",
          "description": "<p>In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways <code>IEnumerable\nLINQ</code>s can be simplified</p>\n<ul>\n  <li> Use <code>OfType</code> instead of using <code>Select</code> with <code>as</code> to type cast elements and then null-checking in a query\n  expression to choose elements based on type. </li>\n  <li> Use <code>OfType</code> instead of using <code>Where</code> and the <code>is</code> operator, followed by a cast in a <code>Select</code> </li>\n  <li> Use an expression in <code>Any</code> instead of <code>Where(element =&gt; [expression]).Any()</code>. </li>\n  <li> Use <code>Count</code> instead of <code>Count()</code> when it's available. </li>\n  <li> Don't call <code>ToArray()</code> or <code>ToList()</code> in the middle of a query chain. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nseq1.Select(element =&gt; element as T).Any(element =&gt; element != null);  // Noncompliant; use OfType\nseq2.Select(element =&gt; element as T).Any(element =&gt; element != null &amp;&amp; CheckCondition(element));  // Noncompliant; use OfType\nseq3.Where(element =&gt; element is T).Select(element =&gt; element as T); // Noncompliant; use OfType\nseq4.Where(element =&gt; element is T).Select(element =&gt; (T)element); // Noncompliant; use OfType\nseq5.Where(element =&gt; [expression]).Any();  // Noncompliant; use Any([expression])\n\nvar num = seq6.Count(); // Noncompliant\nvar arr = seq.ToList().ToArray(); //Noncompliant\nvar count = seq.ToList().Count(x=&gt;[condition]); //Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nseq1.OfType&lt;T&gt;().Any();\nseq2.OfType&lt;T&gt;().Any(element =&gt; CheckCondition(element));\nseq3.OfType&lt;T&gt;();\nseq4.OfType&lt;T&gt;();\nseq5.Any(element =&gt; [expression])\n\nvar num = seq6.Count;\nvar arr = seq.ToArray();\nvar count = seq.Count(x=&gt;[condition]);\n</pre>\n\r\n",
          "title": "\"IEnumerable\" LINQs should be simplified",
          "language": "C#",
          "key": "S2971"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "\"IEnumerable\" LINQs should be simplified",
      "key": "S2971"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>The NET Framework 2.0 introduced the generic interface <code>System.Collections.Generic.IEnumerable&lt;T&gt;</code> and it should be preferred over\nthe older, non generic, interfaces.</p>\n<p>This rule raises an issue when a public type implements <code>System.Collections.IEnumerable</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Collections;\n\npublic class MyData\n{\n  public MyData()\n  {\n  }\n}\n\npublic class MyList : CollectionBase // Noncompliant\n{\n  public void Add(MyData data)\n  {\n    InnerList.Add(data);\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Collections.ObjectModel;\n\npublic class MyData\n{\n  public MyData()\n  {\n  }\n}\n\npublic class MyList : Collection&lt;MyData&gt;\n{\n  // Implementation...\n}\n</pre>\n\n",
          "title": "Collections should implement the generic interface",
          "language": "C#",
          "key": "S3909"
        }
      ],
      "tags": [],
      "title": "Collections should implement the generic interface",
      "key": "S3909"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "unused"
          ],
          "severity": "Major",
          "description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>\n\r\n",
          "title": "Sections of code should not be \"commented out\"",
          "language": "C#",
          "key": "S125"
        }
      ],
      "tags": [
        "misra",
        "unused"
      ],
      "title": "Sections of code should not be \"commented out\"",
      "key": "S125"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe"
          ],
          "severity": "Major",
          "description": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate int Divide(int numerator, int denominator)\n{\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>\n\r\n",
          "title": "Track uses of \"FIXME\" tags",
          "language": "C#",
          "key": "S1134"
        }
      ],
      "tags": [
        "cwe"
      ],
      "title": "Track uses of \"FIXME\" tags",
      "key": "S1134"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe"
          ],
          "severity": "Info",
          "description": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void DoSomething()\n{\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>\n\r\n",
          "title": "Track uses of \"TODO\" tags",
          "language": "C#",
          "key": "S1135"
        }
      ],
      "tags": [
        "cwe"
      ],
      "title": "Track uses of \"TODO\" tags",
      "key": "S1135"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>When you implement <code>IComparable</code> or <code>IComparable&lt;T&gt;</code> on a class you should also override <code>Equals(object)</code>\nand overload the comparison operators (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>,\n<code>&gt;=</code>). That's because the CLR cannot automatically call your <code>CompareTo</code> implementation from <code>Equals(object)</code> or\nfrom the base comparison operator implementations. Additionally, it is best practice to override <code>GetHashCode</code> along with\n<code>Equals</code>.</p>\n<p>This rule raises an issue when a class implements <code>IComparable</code> without also overriding <code>Equals(object)</code> and the comparison\noperators.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo: IComparable  // Noncompliant\n{\n  public int CompareTo(object obj) { /* ... */ }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo: IComparable\n{\n  public int CompareTo(object obj) { /* ... */ }\n  public override bool Equals(object obj)\n  {\n    var other = obj as Foo;\n    if (object.ReferenceEquals(other, null))\n    {\n      return false;\n    }\n    return this.CompareTo(other) == 0;\n  }\n  public int GetHashCode() { /* ... */ }\n  public static bool operator == (Foo left, Foo right)\n  {\n    if (object.ReferenceEquals(left, null))\n    {\n      return object.ReferenceEquals(right, null);\n    }\n    return left.Equals(right);\n  }\n  public static bool operator &gt; (Foo left, Foo right)\n  {\n    return Compare(left, right) &gt; 0;\n  }\n  public static bool operator &lt; (Foo left, Foo right)\n  {\n    return Compare(left, right) &lt; 0;\n  }\n  public static bool operator != (Foo left, Foo right)\n  {\n    return !(left == right);\n  }\n}\n</pre>\n\r\n",
          "title": "\"Equals\" and the comparison operators should be overridden when implementing \"IComparable\"",
          "language": "C#",
          "key": "S1210"
        }
      ],
      "tags": [],
      "title": "\"Equals\" and the comparison operators should be overridden when implementing \"IComparable\"",
      "key": "S1210"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert"
          ],
          "severity": "Major",
          "description": "<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,\nbut probably not the ones you want. </p>\n<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps\ncounter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = double.NaN;\n\nif (a == double.NaN) // Noncompliant; always false\n{\n  Console.WriteLine(\"a is not a number\");  // this is dead code\n}\nif (a != double.NaN)  // Noncompliant; always true\n{\n  Console.WriteLine(\"a is not NaN\"); // this statement is not necessarily true\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (double.IsNaN(a))\n{\n  console.log(\"a is not a number\");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7AEqAQ\">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>\n</ul>\n\r\n",
          "title": "\"NaN\" should not be used in comparisons",
          "language": "C#",
          "key": "S2688"
        }
      ],
      "tags": [
        "cert"
      ],
      "title": "\"NaN\" should not be used in comparisons",
      "key": "S2688"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>In the interests of keeping code clean, the simplest possible conditional syntax should be used. That means </p>\n<ul>\n  <li> using the <code>??</code> operator for an assign-if-not-null operator, </li>\n  <li> using the ternary operator <code>?:</code> for assignment to a single variable, and </li>\n  <li> removing the <code>??</code> when the left operand is known to be <code>null</code>, or known to be definitely not <code>null</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nobject a = null, b = null, x;\n\nif (a != null) // Noncompliant; needlessly verbose\n{\n  x = a;\n}\nelse\n{\n  x = b;\n}\n\nx = a != null ? a : b; // Noncompliant; better but could still be simplified\n\nx = (a == null) ? new object() : a; // Noncompliant\n\nif (condition) // Noncompliant\n{\n  x = a;\n}\nelse\n{\n  x = b;\n}\n\nvar y = null ?? new object(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nobject x;\n\nx = a ?? b;\nx = a ?? b;\nx = a ?? new object();\nx = condition ? a : b;\nvar y = new object();\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Simplify condition</li></ul>",
          "title": "The simplest possible condition syntax should be used",
          "language": "C#",
          "key": "S3240"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "The simplest possible condition syntax should be used",
      "key": "S3240"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Critical",
          "description": "<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and it's\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>\\</code>} from a preceding\n<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>\n\n",
          "title": "Conditionals should start on new lines",
          "language": "C#",
          "key": "S3972"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "Conditionals should start on new lines",
      "key": "S3972"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "unused",
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n{\n  OpenWindow();\n}\nelse if (param == 2)\n{\n  CloseWindow();\n}\nelse if (param == 1) // Noncompliant\n{\n  MoveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n{\n  OpenWindow();\n}\nelse if (param == 2)\n{\n  CloseWindow();\n}\nelse if (param == 3)\n{\n  MoveWindowToTheBackground();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n",
          "title": "Related \"if/else if\" statements should not have the same condition",
          "language": "C#",
          "key": "S1862"
        },
        {
          "tags": [
            "cert",
            "unused",
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>A chain of <code>If</code>/<code>ElseIf</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one\nwith a condition that evaluates to <code>True</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIf param = 1 Then\n  OpenWindow()\nElseIf param = 2 Then\n  CloseWindow()\nElseIf param = 1 Then ' Noncompliant\n  MoveWindowToTheBackground()\nEnd If\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIf param = 1 Then\n  OpenWindow()\nElseIf param = 2 Then\n  CloseWindow()\nElseIf param = 3 Then\n  MoveWindowToTheBackground()\nEnd If\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n",
          "title": "Related \"If/ElseIf\" statements should not have the same condition",
          "language": "VB.NET",
          "key": "S1862"
        }
      ],
      "tags": [
        "cert",
        "unused",
        "pitfall"
      ],
      "title": "Related \"if/else if\" statements should not have the same condition",
      "key": "S1862"
    },
    {
      "implementations": [
        {
          "tags": [
            "design",
            "suspicious"
          ],
          "severity": "Major",
          "description": "<p>Having two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure with the same\nimplementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an\n<code>if</code> structure they should be combined, or for a <code>switch</code>, one should fall through to the other.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i)\n{\n  case 1:\n    DoSomething();\n    break;\n  case 2:\n    DoSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    DoSomething();\n    break;\n  default:\n    DoTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10)\n{\n  DoTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20)\n{\n  DoTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50)\n{\n  DoTheThing();  // Noncompliant; duplicates first condition\n}\nelse\n{\n  DoTheRest();\n}\n\nif (b == 0)\n{\n  DoOneMoreThing();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    DoSomething();\n    break;\n  case 2:\n    DoSomethingDifferent();\n    break;\n  default:\n    DoTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50))\n{\n  DoTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20)\n{\n  DoTheOtherThing();\n}\nelse\n{\n  DoTheRest();\n}\n\nDoOneMoreThing();\n</pre>\n<p>or</p>\n<pre>\nswitch (i)\n{\n  case 1:\n    DoSomething();\n    break;\n  case 2:\n    DoSomethingDifferent();\n    break;\n  case 3:\n    DoThirdThing();\n    break;\n  default:\n    DoTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10)\n{\n  DoTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20)\n{\n  DoTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50)\n{\n  DoTheThirdThing();\n}\nelse\n{\n  DoTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n\r\n",
          "title": "Two branches in a conditional structure should not have exactly the same implementation",
          "language": "C#",
          "key": "S1871"
        },
        {
          "tags": [
            "design",
            "suspicious"
          ],
          "severity": "Major",
          "description": "<p>Having two <code>Cases</code> in the same <code>Select</code> statement or branches in the same <code>If</code> structure with the same\nimplementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an\n<code>If</code> structure they should be combined, or for a <code>Select</code>, one should fall through to the other.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSelect i\n  Case 1\n    DoSomething()\n  Case 2\n    DoSomethingDifferent()\n  Case 3  ' Noncompliant; duplicates case 1's implementation\n    DoSomething()\n  Case Else:\n    DoTheRest()\nEnd Select\n\nIf a &gt;= 0 AndAlso a &lt; 10 Then\n  DoTheThing()\nElseIf a &gt;= 10 AndAlso a &lt; 20 Then\n  DoTheOtherThing()\nElseIf a &gt;= 20 AndAlso a &lt; 50\n  DoTheThing() ' Noncompliant; duplicates first condition\nElse\n  DoTheRest();\nEnd If\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSelect i\n  Case 1, 3\n    DoSomething()\n  Case 2\n    DoSomethingDifferent()\n  Case Else\n    DoTheRest()\nEnd Select\n\nIf (a &gt;= 0 AndAlso a &lt; 10) OrElse (a &gt;= 20 AndAlso a &lt; 50) Then\n  DoTheThing()\nElseIf a &gt;= 10 AndAlso a &lt; 20 Then\n  DoTheOtherThing()\nElse\n  DoTheRest();\nEnd If\n</pre>\n<p>or</p>\n<pre>\nSelect i\n  Case 1\n    DoSomething()\n  Case 2\n    DoSomethingDifferent()\n  Case 3\n    DoTheThirdThing()\n  Case Else\n    DoTheRest()\nEnd Select\n\nIf a &gt;= 0 AndAlso a &lt; 10 Then\n  DoTheThing()\nElseIf a &gt;= 10 AndAlso a &lt; 20 Then\n  DoTheOtherThing()\nElseIf a &gt;= 20 AndAlso a &lt; 50\n  DoTheThirdThing()\nElse\n  DoTheRest();\nEnd If\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n\r\n",
          "title": "Two branches in a conditional structure should not have exactly the same implementation",
          "language": "VB.NET",
          "key": "S1871"
        }
      ],
      "tags": [
        "design",
        "suspicious"
      ],
      "title": "Two branches in a conditional structure should not have exactly the same implementation",
      "key": "S1871"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>When the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition should\nhave been checked in the second test.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (a == b)\n{\n  doTheThing(b);\n}\nif (a == b) // Noncompliant; is this really what was intended?\n{\n  doTheThing(c);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a == b)\n{\n  doTheThing(b);\n  doTheThing(c);\n}\n</pre>\n<p>or</p>\n<pre>\nif (a == b)\n{\n  doTheThing(b);\n}\nif (b == c)\n{\n  doTheThing(c);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since it is a common pattern to test a variable, reassign it if it fails the test, then re-test it, that pattern is ignored.</p>\n\r\n",
          "title": "Sequential tests should not check the same condition",
          "language": "C#",
          "key": "S2760"
        }
      ],
      "tags": [
        "suspicious",
        "clumsy"
      ],
      "title": "Sequential tests should not check the same condition",
      "key": "S2760"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "misra",
            "cert",
            "unused",
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) // Noncompliant\n{\n  DoSomething(); // never executed\n}\n\nif (!a || b) // Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n{\n  DoSomething();\n}\nelse\n{\n  DoSomethingElse(); // never executed\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n",
          "title": "Conditionally executed blocks should be reachable",
          "language": "C#",
          "key": "S2583"
        }
      ],
      "tags": [
        "cwe",
        "misra",
        "cert",
        "unused",
        "pitfall"
      ],
      "title": "Conditionally executed blocks should be reachable",
      "key": "S2583"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "misra",
            "cert",
            "redundant"
          ],
          "severity": "Major",
          "description": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) // Noncompliant\n{\n  DoSomething();\n}\n\nif (b &amp;&amp; a) // Noncompliant; \"a\" is always \"true\"\n{\n  DoSomething();\n}\n\nif (c || !a) // Noncompliant; \"!a\" is always \"false\"\n{\n  DoSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (Foo(a))\n{\n  DoSomething();\n}\n\nif (b)\n{\n  DoSomething();\n}\n\nif (c)\n{\n  DoSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n",
          "title": "Boolean expressions should not be gratuitous",
          "language": "C#",
          "key": "S2589"
        }
      ],
      "tags": [
        "cwe",
        "misra",
        "cert",
        "redundant"
      ],
      "title": "Boolean expressions should not be gratuitous",
      "key": "S2589"
    },
    {
      "implementations": [
        {
          "tags": [
            "owasp-a6"
          ],
          "severity": "Minor",
          "description": "<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you\nrun the risk of inadvertently exposing sensitive information.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void DoSomething ()\n{\n  // ...\n  Console.WriteLine (\"so far, so good...\"); // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n</ul>\n\r\n",
          "title": "Console logging should not be used",
          "language": "C#",
          "key": "S2228"
        }
      ],
      "tags": [
        "owasp-a6"
      ],
      "title": "Console logging should not be used",
      "key": "S2228"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.</p>\n<p>For example:</p>\n<ul>\n  <li> The subclass class constructor starts by calling the parent class constructor. </li>\n  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>\n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  <code>NullReferenceException</code>) can result, because the fields aren't initialized yet. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent\n{\n  public Parent()\n  {\n    DoSomething();  // Noncompliant\n  }\n\n  public virtual void DoSomething() // can be overridden\n  {\n    ...\n  }\n}\n\npublic class Child : Parent\n{\n  private string foo;\n\n  public Child(string foo) // leads to call DoSomething() in Parent constructor which triggers a NullReferenceException as foo has not yet been initialized\n  {\n    this.foo = foo;\n  }\n\n  public override void DoSomething()\n  {\n    Console.WriteLine(this.foo.Length);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/MYYbAQ\">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/TQBi\">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or\n  destructors </li>\n</ul>\n\r\n",
          "title": "Constructors should only call non-overridable methods",
          "language": "C#",
          "key": "S1699"
        }
      ],
      "tags": [
        "cert",
        "pitfall"
      ],
      "title": "Constructors should only call non-overridable methods",
      "key": "S1699"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "cert",
            "unused"
          ],
          "severity": "Major",
          "description": "<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid CalculateRate(int a, int b)\n{\n  int i;\n\n  i = a + b; // Noncompliant; calculation result not used before value is overwritten\n  i = DoSomething();  // Noncompliant; retrieved value not used\n  for (i = 0; i &lt; 10; i++)\n  {\n    //  ...\n  }\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid CalculateRate(int a, int b)\n{\n  int i;\n\n  i = DoSomething();\n  i += a + b;\n  StoreI(i);\n\n  for (i = 0; i &lt; 10; i++)\n  {\n    //  ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported when </p>\n<ul>\n  <li> the analyzed method body contains <code>try</code> blocks, </li>\n  <li> a lambda expression captures the local variables, or </li>\n  <li> the variable is unused (case covered by Rule S1481) </li>\n  <li> initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>null</code>, <code>true</code>, <code>false</code>, <code>\"\"</code>\n  and <code>string.Empty</code>. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/S4IyAQ\">CERT, MSC13-CPP.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n",
          "title": "Dead stores should be removed",
          "language": "C#",
          "key": "S1854"
        }
      ],
      "tags": [
        "cwe",
        "cert",
        "unused"
      ],
      "title": "Dead stores should be removed",
      "key": "S1854"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert"
          ],
          "severity": "Major",
          "description": "<p>An assertion is a piece of code that's used during development when the compilation debug mode is activated. It allows a program to check itself as\nit runs. When an assertion is true, that means everything is operating as expected. </p>\n<p>In non-debug mode, all <code>Debug.Assert</code> are automatically left out. So, by contract, the boolean expressions that are evaluated by those\nassertions must absolutely not contain any side effects. Otherwise, when leaving the Debug mode, the functional behavior of the application is not the\nsame anymore.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDebug.Assert(list.Remove(\"dog\"));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nbool result = list.Remove(\"dog\");\nDebug.Assert(result);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/vwG7AQ\">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side\n  effects </li>\n</ul>\n\n",
          "title": "Expressions used in \"Debug.Assert\" should not produce side effects",
          "language": "C#",
          "key": "S3346"
        }
      ],
      "tags": [
        "cert"
      ],
      "title": "Expressions used in \"Debug.Assert\" should not produce side effects",
      "key": "S3346"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Major",
          "description": "<p>Delegate event handlers (i.e. delegates used as type of an event) should have a very specific signature:</p>\n<ul>\n  <li> Return type <code>void</code>. </li>\n  <li> First argument of type <code>System.Object</code> and named 'sender'. </li>\n  <li> Second argument of type <code>System.EventArgs</code> (or any derived type) and is named 'e'. </li>\n</ul>\n<p>This rule raises an issue whenever a <code>delegate</code> declaration doesn't match that signature.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic delegate void AlarmEventHandler(object s);\n\npublic class Foo\n{\n    public event AlarmEventHandler AlarmEvent; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic delegate void AlarmEventHandler(object sender, AlarmEventArgs e);\n\npublic class Foo\n{\n    public event AlarmEventHandler AlarmEvent; // Compliant\n}\n</pre>\n<h2>See</h2>\n<p><a href=\"https://msdn.microsoft.com/en-us/library/edzehd2t.aspx\">Handling and Raising Events</a></p>\n\r\n",
          "title": "Event Handlers should have the correct signature",
          "language": "C#",
          "key": "S3906"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Event Handlers should have the correct signature",
      "key": "S3906"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo // Noncompliant\n{\n}\n\npublic struct Bar // Noncompliant\n{\n}\n</pre>\n\r\n",
          "title": "Types should be defined in named namespaces",
          "language": "C#",
          "key": "S3903"
        }
      ],
      "tags": [],
      "title": "Types should be defined in named namespaces",
      "key": "S3903"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>In C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.</p>\n<p>Subtracting a chain of delegates from another one might yield unexpected results as shown hereunder - and is likely to be a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyDelegate first, second, third, fourth;\nfirst = () =&gt; Console.Write(\"1\");\nsecond = () =&gt; Console.Write(\"2\");\nthird = () =&gt; Console.Write(\"3\");\nfourth = () =&gt; Console.Write(\"4\");\n\nMyDelegate chain1234 = first + second + third + fourth; // Compliant - chain sequence = \"1234\"\nMyDelegate chain12 = chain1234 - third - fourth; // Compliant - chain sequence = \"12\"\n\n\nMyDelegate chain14 = first + fourth; // creates a new MyDelegate instance which is a list under the covers\nMyDelegate chain23 = chain1234 - chain14; // Noncompliant; (first + fourth) doesn't exist in chain1234\n\n\n// The chain sequence of \"chain23\" will be \"1234\" instead of \"23\"!\n// Indeed, the sequence \"1234\" does not contain the subsequence \"14\", so nothing is subtracted\n// (but note that \"1234\" contains both the \"1\" and \"4\" subsequences)\nchain23 = chain1234 - (first + fourth); // Noncompliant\n\nchain23(); // will print \"1234\"!\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMyDelegate chain23 = chain1234 - first - fourth; // Compliant - \"1\" is first removed, followed by \"4\"\n\nchain23(); // will print \"23\"\n</pre>\n\r\n",
          "title": "Delegates should not be subtracted",
          "language": "C#",
          "key": "S3172"
        }
      ],
      "tags": [],
      "title": "Delegates should not be subtracted",
      "key": "S3172"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "denial-of-service"
          ],
          "severity": "Blocker",
          "description": "<p>Classes with <code>IDisposable</code> members are responsible for cleaning up those members by calling their <code>Dispose</code> methods. The best\npractice here is for the owning class to itself implement <code>IDisposable</code> and call its members' <code>Dispose</code> methods from its own\n<code>Dispose</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ResourceHolder   // Noncompliant; doesn't implement IDisposable\n{\n  private FileStream fs;  // This member is never Disposed\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ResourceHolder : IDisposable\n{\n&nbsp;&nbsp;private FileStream fs;\n&nbsp;&nbsp;public void OpenResource(string path)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;this.fs = new FileStream(path, FileMode.Open);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;public void CloseResource()\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;this.fs.Close();\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;public void Dispose()\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;this.fs.Dispose();\n&nbsp;&nbsp;}\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>\n\r\n",
          "title": "Classes with \"IDisposable\" members should implement \"IDisposable\"",
          "language": "C#",
          "key": "S2931"
        }
      ],
      "tags": [
        "cwe",
        "denial-of-service"
      ],
      "title": "Classes with \"IDisposable\" members should implement \"IDisposable\"",
      "key": "S2931"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "denial-of-service"
          ],
          "severity": "Blocker",
          "description": "<p>When writing managed code, you don't need to worry about allocating or freeing memory: The garbage collector takes care of it. For efficiency\nreasons, some objects such as <code>Bitmap</code> use unmanaged memory, enabling for example the use of pointer arithmetic. Such objects have\npotentially huge unmanaged memory footprints, but will have tiny managed ones. Unfortunately, the garbage collector only sees the tiny managed\nfootprint, and fails to reclaim the unmanaged memory (by calling <code>Bitmap</code>'s finalizer method) in a timely fashion. </p>\n<p>Moreover, memory is not the only system resource which needs to be managed in a timely fashion: The operating system can only handle having so many\nfile descriptors (e.g. <code>FileStream</code>) or sockets (e.g. <code>WebClient</code>) open at any given time. Therefore, it is important to\n<code>Dispose</code> of them as soon as they are no longer needed, rather than relying on the garbage collector to call these objects' finalizers at\nsome nondeterministic point in the future.</p>\n<p>This rule tracks <code>private</code> fields and local variables of the following <code>IDisposable</code> types, which are never disposed, closed,\naliased, returned, or passed to other methods.</p>\n<ul>\n  <li> <code>System.IO</code> namespace\n    <ul>\n      <li> <code>System.IO.FileStream</code> </li>\n      <li> <code>System.IO.StreamReader</code> </li>\n      <li> <code>System.IO.StreamWriter</code> </li>\n    </ul> </li>\n  <li> <code>System.Net</code> namespace\n    <ul>\n      <li> <code>System.Net.WebClient</code> </li>\n    </ul> </li>\n  <li> <code>System.Net.Sockets</code> namespace\n    <ul>\n      <li> <code>System.Net.Sockets.Socket</code> </li>\n      <li> <code>System.Net.Sockets.TcpClient</code> </li>\n      <li> <code>System.Net.Sockets.UdpClient</code> </li>\n    </ul> </li>\n  <li> <code>System.Drawing</code> namespace\n    <ul>\n      <li> <code>System.Drawing.Image</code> </li>\n      <li> <code>System.Drawing.Bitmap</code> </li>\n    </ul> </li>\n</ul>\n<p>which are either instantiated directly using the <code>new</code> operator, or using one of the following factory methods:</p>\n<ul>\n  <li> <code>System.IO.File.Create()</code> </li>\n  <li> <code>System.IO.File.Open()</code> </li>\n  <li> <code>System.Drawing.Image.FromFile()</code> </li>\n  <li> <code>System.Drawing.Image.FromStream()</code> </li>\n</ul>\n<p>on both private fields and local variables.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ResourceHolder\n{\n  private FileStream fs; // Noncompliant; Dispose or Close are never called\n\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n\n  public void WriteToFile(string path, string text)\n  {\n    var fs = new FileStream(path, FileMode.Open); // Noncompliant\n    var bytes = Encoding.UTF8.GetBytes(text);\n    fs.Write(bytes, 0, bytes.Length);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n\n  public void Dispose()\n  {\n    this.fs.Dispose();\n  }\n\n  public void WriteToFile(string path, string text)\n  {\n    using (var fs = new FileStream(path, FileMode.Open))\n    {\n      var bytes = Encoding.UTF8.GetBytes(text);\n      fs.Write(bytes, 0, bytes.Length);\n    }\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>IDisposable</code> variables returned from a method or passed to other methods are ignored, as are local <code>IDisposable</code>s that are\ninitialized with other <code>IDisposable</code>s.</p>\n<pre>\npublic Stream WriteToFile(string path, string text)\n{\n  var fs = new FileStream(path, FileMode.Open); // Compliant, because it is returned\n  var bytes = Encoding.UTF8.GetBytes(text);\n  fs.Write(bytes, 0, bytes.Length);\n  return fs;\n}\n\npublic void ReadFromStream(Stream s)\n{\n  var sr = new StreamReader(s); // Compliant as it would close the underlying stream.\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>\n\r\n",
          "title": "\"IDisposables\" should be disposed",
          "language": "C#",
          "key": "S2930"
        }
      ],
      "tags": [
        "cwe",
        "denial-of-service"
      ],
      "title": "\"IDisposables\" should be disposed",
      "key": "S2930"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Typically you want to use <code>using</code> to create a local <code>IDisposable</code> variable; it will trigger disposal of the object when\ncontrol passes out of the block's scope. The exception to this rule is when your method returns that <code>IDisposable</code>. In that case\n<code>using</code> disposes of the object before the caller can make use of it, likely causing exceptions at runtime. So you should either remove\n<code>using</code> or avoid returning the <code>IDisposable</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic FileStream WriteToFile(string path, string text)\n{\n  using (var fs = File.Create(path)) // Noncompliant\n  {\n    var bytes = Encoding.UTF8.GetBytes(text);\n    fs.Write(bytes, 0, bytes.Length);\n    return fs;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic FileStream WriteToFile(string path, string text)\n{\n  var fs = File.Create(path);\n  var bytes = Encoding.UTF8.GetBytes(text);\n  fs.Write(bytes, 0, bytes.Length);\n  return fs;\n}\n</pre>\n\r\n",
          "title": "\"IDisposables\" created in a \"using\" statement should not be returned",
          "language": "C#",
          "key": "S2997"
        }
      ],
      "tags": [],
      "title": "\"IDisposables\" created in a \"using\" statement should not be returned",
      "key": "S2997"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>This rule raises an issue when a disposable type contains fields of the following types and does not implement a finalizer:</p>\n<ul>\n  <li> <code>System.IntPtr</code> </li>\n  <li> <code>System.UIntPtr</code> </li>\n  <li> <code>System.Runtime.InteropService.HandleRef</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n  public class Foo : IDisposable // Noncompliant: Doesn't have a finalizer\n  {\n    private IntPtr myResource;\n    private bool disposed = false;\n\n    protected virtual void Dispose(bool disposing)\n    {\n      if (!disposed)\n      {\n        // Dispose of resources held by this instance.\n        FreeResource(myResource);\n        disposed = true;\n\n        // Suppress finalization of this disposed instance.\n        if (disposing)\n        {\n          GC.SuppressFinalize(this);\n        }\n      }\n    }\n\n    public void Dispose() {\n      Dispose(true);\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n  public class Foo : IDisposable\n  {\n    private IntPtr myResource;\n    private bool disposed = false;\n\n    protected virtual void Dispose(bool disposing)\n    {\n      if (!disposed)\n      {\n        // Dispose of resources held by this instance.\n        FreeResource(myResource);\n        disposed = true;\n\n        // Suppress finalization of this disposed instance.\n        if (disposing)\n        {\n          GC.SuppressFinalize(this);\n        }\n      }\n    }\n\n    ~Foo()\n    {\n      Dispose(false);\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Related: <a class=\"rule-link\" href=\"#version=6.2.0.0&ruleId=S3881\">Rule S3881</a> - \"IDisposable\" should be implemented correctly </li>\n</ul>\n\r\n",
          "title": "Disposable types should declare finalizers",
          "language": "C#",
          "key": "S4002"
        }
      ],
      "tags": [],
      "title": "Disposable types should declare finalizers",
      "key": "S4002"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "denial-of-service"
          ],
          "severity": "Critical",
          "description": "<p>It is possible in an <code>IDisposable</code> to call <code>Dispose</code> on class members from any method, but the contract of\n<code>Dispose</code> is that it will clean up all unmanaged resources. Move disposing of members to some other method, and you risk resource\nleaks.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n\n  public void CleanUp()\n  {\n    this.fs.Dispose(); // Noncompliant; Dispose not called in class' Dispose method\n  }\n\n  public void Dispose()\n  {\n    // method added to satisfy demands of interface\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n\n  public void Dispose()\n  {\n    this.fs.Dispose();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>\n\r\n",
          "title": "Classes should \"Dispose\" of members from the classes' own \"Dispose\" methods",
          "language": "C#",
          "key": "S2952"
        }
      ],
      "tags": [
        "cwe",
        "denial-of-service"
      ],
      "title": "Classes should \"Dispose\" of members from the classes' own \"Dispose\" methods",
      "key": "S2952"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Blocker",
          "description": "<p><code>Dispose</code> as a method name should be used exclusively to implement <code>IDisposable.Dispose</code> to prevent any confusion.</p>\n<p>It may be tempting to create a <code>Dispose</code> method for other purposes, but doing so will result in confusion and likely lead to problems in\nproduction.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class GarbageDisposal\n{\n  private int Dispose()  // Noncompliant\n  {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class GarbageDisposal : IDisposable\n{\n  public void Dispose()\n  {\n    // ...\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic class GarbageDisposal\n{\n  private int Grind()\n  {\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods named <code>Dispose</code> and invoked from the <code>IDisposable.Dispose</code> implementation are not reported.</p>\n<pre>\npublic class GarbageDisposal  :  IDisposable\n{\n  protected virtual void Dispose(bool disposing)\n  {\n    //...\n  }\n  public void Dispose()\n  {\n    Dispose(true);\n    GC.SuppressFinalize(this);\n  }\n}\n</pre>\n\r\n",
          "title": "Methods named \"Dispose\" should implement \"IDisposable.Dispose\"",
          "language": "C#",
          "key": "S2953"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Methods named \"Dispose\" should implement \"IDisposable.Dispose\"",
      "key": "S2953"
    },
    {
      "implementations": [
        {
          "tags": [
            "performance"
          ],
          "severity": "Major",
          "description": "<p>Using <code>Type.Assembly</code> to get the current assembly is nearly free in terms of performance; it's a simple property access. On the other\nhand, <code>Assembly.GetExecutingAssembly()</code> can take up to 30 times as long because it walks up the call stack to find the assembly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = Assembly.GetExecutingAssembly(); // Noncompliant\n      Console.WriteLine(\"Assembly name: {0}\", assem.FullName);\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = typeof(Example).Assembly; // Here we use the type of the current class\n      Console.WriteLine(\"Assembly name: {0}\", assem.FullName);\n   }\n}\n</pre>\n\r\n",
          "title": "\"Assembly.GetExecutingAssembly\" should not be called",
          "language": "C#",
          "key": "S3902"
        }
      ],
      "tags": [
        "performance"
      ],
      "title": "\"Assembly.GetExecutingAssembly\" should not be called",
      "key": "S3902"
    },
    {
      "implementations": [
        {
          "tags": [
            "unpredictable"
          ],
          "severity": "Major",
          "description": "<p>The parameter to <code>Assembly.Load</code> includes the full specification of the dll to be loaded. Use another method, and you might end up with\na dll other than the one you expected. </p>\n<p>This rule raises an issue when <code>Assembly.LoadFrom</code>, <code>Assembly.LoadFile</code>, or <code>Assembly.LoadWithPartialName</code> is\ncalled.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic void Main(string[] args)\n{\n    Assembly.LoadFrom(...); // Noncompliant\n    Assembly.LoadFile(...); // Noncompliant\n    Assembly.LoadWithPartialName(...); // Noncompliant + deprecated\n}\n</pre>\n\r\n",
          "title": "\"Assembly.Load\" should be used",
          "language": "C#",
          "key": "S3885"
        }
      ],
      "tags": [
        "unpredictable"
      ],
      "title": "\"Assembly.Load\" should be used",
      "key": "S3885"
    },
    {
      "implementations": [
        {
          "tags": [
            "leak",
            "unpredictable"
          ],
          "severity": "Blocker",
          "description": "<p>Not surprisingly, the <code>SafeHandle.DangerousGetHandle</code> method is dangerous. That's because it may not return a valid handle. Using it can\nlead to leaks and vulnerabilities. While it is possible to use the method successfully, it's extremely difficult to do correctly, so the method should\nsimply be avoided altogether.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic void Main(string[] args)\n{\n    System.Reflection.FieldInfo fieldInfo = ...;\n    SafeHandle handle = (SafeHandle)fieldInfo.GetValue(rKey);\n    IntPtr dangerousHandle = handle.DangerousGetHandle();  // Noncompliant\n}\n</pre>\n\r\n",
          "title": "\"SafeHandle.DangerousGetHandle\" should not be called",
          "language": "C#",
          "key": "S3869"
        }
      ],
      "tags": [
        "leak",
        "unpredictable"
      ],
      "title": "\"SafeHandle.DangerousGetHandle\" should not be called",
      "key": "S3869"
    },
    {
      "implementations": [
        {
          "tags": [
            "performance",
            "unpredictable",
            "bad-practice"
          ],
          "severity": "Critical",
          "description": "<p>Calling <code>GC.Collect</code> is rarely necessary, and can significantly affect application performance. That's because it triggers a blocking\noperation that examines <em>every object in memory</em> for cleanup. Further, you don't have control over when this blocking cleanup will actually\nrun.</p>\n<p>As a general rule, the consequences of calling this method far outweigh the benefits unless perhaps you've just triggered some event that is unique\nin the run of your program that caused a lot of long-lived objects to die.</p>\n<p>This rule raises an issue when <code>GC.Collect</code> is invoked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic void Main(string[] args)\n{\n  // ...\n  GC.Collect(2, GCCollectionMode.Optimized); // Noncompliant\n}\n</pre>\n\r\n",
          "title": "\"GC.Collect\" should not be called",
          "language": "C#",
          "key": "S1215"
        }
      ],
      "tags": [
        "performance",
        "unpredictable",
        "bad-practice"
      ],
      "title": "\"GC.Collect\" should not be called",
      "key": "S1215"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p><code>GC.SuppressFinalize</code> requests that the system not call the finalizer for the specified object. This should only be done when\nimplementing <code>Dispose</code> as part of the <a href=\"https://msdn.microsoft.com/en-us/library/b1yfkh5e.aspx\">Dispose Pattern</a>.</p>\n<p>This rule raises an issue when <code>GC.SuppressFinalize</code> is called outside that pattern.</p>\n\r\n",
          "title": "\"GC.SuppressFinalize\" should not be called",
          "language": "C#",
          "key": "S3971"
        }
      ],
      "tags": [],
      "title": "\"GC.SuppressFinalize\" should not be called",
      "key": "S3971"
    },
    {
      "implementations": [
        {
          "tags": [
            "multi-threading",
            "unpredictable"
          ],
          "severity": "Blocker",
          "description": "<p><code>Thread.Suspend</code> and <code>Thread.Resume</code> can give unpredictable results, and both methods have been deprecated. Indeed, if\n<code>Thread.Suspend</code> is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock. Other safer\nsynchronization mechanisms should be used, such as <code>Monitor</code>, <code>Mutex</code>, and <code>Semaphore</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic void Main(string[] args)\n{\n  // ...\n  Thread.CurrentThread.Suspend(); // Noncompliant\n  Thread.CurrentThread.Resume(); // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://msdn.microsoft.com/en-us/library/system.threading.thread.resume.aspx\">Thread.Resume Method ()</a> </li>\n  <li> <a href=\"https://msdn.microsoft.com/en-us/library/system.threading.thread.suspend(v=vs.110).aspx\">Thread.Suspend Method ()</a> </li>\n</ul>\n\r\n",
          "title": "Neither \"Thread.Resume\" nor \"Thread.Suspend\" should be used",
          "language": "C#",
          "key": "S3889"
        }
      ],
      "tags": [
        "multi-threading",
        "unpredictable"
      ],
      "title": "Neither \"Thread.Resume\" nor \"Thread.Suspend\" should be used",
      "key": "S3889"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "error-handling"
          ],
          "severity": "Minor",
          "description": "<p>Catching <code>System.Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception\ntypes, including the ones that were not intended to be caught. To prevent any misunderstandings, the exception filters should be used. Alternatively\neach exception type should be in a separate <code>catch</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry\n{\n  // do something that might throw a FileNotFoundException or IOException\n}\ncatch (Exception e) // Noncompliant\n{\n  // log exception ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry\n{\n  // do something\n}\ncatch (Exception e) when (e is FileNotFoundException || e is IOException)\n{\n  // do something\n}\n\n</pre>\n<h2>Exceptions</h2>\n<p>The final option is to catch <code>System.Exception</code> and <code>throw</code> it in the last statement in the <code>catch</code> block. This is\nthe least-preferred option, as it is an old-style code, which also suffers from performance penalty compared to exception filters.</p>\n<pre>\ntry\n{\n  // do something\n}\ncatch (Exception e)\n{\n  if (e is FileNotFoundException || e is IOException)\n  {\n    // do something\n  }\n  else\n  {\n    throw;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n</ul>\n\n",
          "title": "\"Exception\" should not be caught when not required by called methods",
          "language": "C#",
          "key": "S2221"
        }
      ],
      "tags": [
        "cwe",
        "error-handling"
      ],
      "title": "\"Exception\" should not be caught when not required by called methods",
      "key": "S2221"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(collection.Count &gt;= 0){...}\n\nif(enumerable.Count() &lt; 0){...}\n\nif(array.Length &gt;= 0){...}\n\nbool result = array.Length &gt;=0;\n</pre>\n\r\n",
          "title": "Collection sizes and array length comparisons should make sense",
          "language": "C#",
          "key": "S3981"
        }
      ],
      "tags": [],
      "title": "Collection sizes and array length comparisons should make sense",
      "key": "S3981"
    },
    {
      "implementations": [
        {
          "tags": [
            "api-design",
            "performance"
          ],
          "severity": "Critical",
          "description": "<p>Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will\nbe much slower than a simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods\nso that callers are not surprised by unexpectedly poor performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate List&lt;string&gt; _foo = new List&lt;string&gt; { \"a\", \"b\", \"c\" };\npublic IEnumerable&lt;string&gt; Foo  // Noncompliant\n{\n    get\n    {\n        return _foo.ToList();\n    }\n}\n\nprivate string[] _bar = new string[] { \"a\", \"b\", \"c\" };\npublic IEnumerable&lt;string&gt; Bar // Noncompliant\n{\n    get\n    {\n        return (string[])_bar.Clone();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate List&lt;string&gt; _foo = new List&lt;string&gt; { \"a\", \"b\", \"c\" };\nprivate string[] _bar = new string[] { \"a\", \"b\", \"c\" };\n\npublic IEnumerable&lt;string&gt; GetFoo()\n{\n    return _foo.ToList();\n}\n\npublic IEnumerable&lt;string&gt; GetBar()\n{\n    return (string[])_bar.Clone();\n}\n</pre>\n\r\n",
          "title": "Properties should not make collection or array copies",
          "language": "C#",
          "key": "S2365"
        },
        {
          "tags": [
            "api-design",
            "performance"
          ],
          "severity": "Critical",
          "description": "<p>Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will\nbe much slower than a simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods\nso that callers are not surprised by unexpectedly poor performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    ' Internal state\n    Dim array = {\"apple\", \"banana\", \"orange\", \"pineapple\", \"strawberry\"}\n\n    ReadOnly Property Foo() As String() ' Noncompliant\n        Get\n            Dim copy = array.Clone      ' Expensive call\n            Return copy\n        End Get\n    End Property\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    ' Internal state\n    Dim array = {\"apple\", \"banana\", \"orange\", \"pineapple\", \"strawberry\"}\n\n    Function GetFoo() As String()       ' Compliant\n        Dim copy = array.Clone\n        Return copy\n    End Function\nEnd Module\n</pre>\n\r\n",
          "title": "Properties should not make collection or array copies",
          "language": "VB.NET",
          "key": "S2365"
        }
      ],
      "tags": [
        "api-design",
        "performance"
      ],
      "title": "Properties should not make collection or array copies",
      "key": "S2365"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>Changing an inherited member to <code>private</code> will not prevent access to the base class implementation.</p>\n<p>This rule raises an issue when a <code>private</code> method in an unsealed type has a signature that is identical to a <code>public</code> method\ndeclared in a base type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void SomeMethod(int count) { }\n  }\n  public class Bar:Foo\n  {\n    private void SomeMethod(int count) { } // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void SomeMethod(int count) { }\n  }\n  public sealed class Bar : Foo\n  {\n    private void SomeMethod(int count) { }\n  }\n}\n</pre>\n\n",
          "title": "Inherited member visibility should not be decreased",
          "language": "C#",
          "key": "S4015"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Inherited member visibility should not be decreased",
      "key": "S4015"
    },
    {
      "implementations": [
        {
          "tags": [
            "api-design"
          ],
          "severity": "Major",
          "description": "<p><code>System.Collections.Generic.List&lt;T&gt;</code> is a generic collection that is designed for performance and not inheritance. For example, it\ndoes not contain virtual members that make it easier to change the behavior of an inherited class. That means that future attempts to expand the\nbehavior will be spoiled because the extension points simply aren't there. Instead, one of the following generic collections should be used:</p>\n<ul>\n  <li> <code>System.Collections.Generic.IEnumerable&lt;T&gt;</code> </li>\n  <li> <code>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</code> </li>\n  <li> <code>System.Collections.Generic.ICollection&lt;TKey&gt;</code> </li>\n  <li> <code>System.Collections.Generic.IReadOnlyList&lt;T&gt;</code> </li>\n  <li> <code>System.Collections.Generic.IList&lt;TKey&gt;</code> </li>\n  <li> <code>System.Collections.ObjectModel.Collection&lt;T&gt;</code> </li>\n  <li> <code>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</code> </li>\n  <li> <code>System.Collections.ObjectModel.KeyedCollection&lt;TKey, Titem&gt;</code> </li>\n</ul>\n<p>This rule raises an issue every time a <code>System.Collections.Generic.List&lt;T&gt;</code> is exposed:</p>\n<ul>\n  <li> As an externally visible member. </li>\n  <li> As the return type of an externally visible method. </li>\n  <li> As a parameter type of an an externally visible method. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnamespace Foo\n{\n   public class Bar\n   {\n      public List&lt;T&gt; Method1(T arg) // Noncompliant\n      {\n           //...\n      }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace Foo\n{\n   public class Bar\n   {\n      public Collection&lt;T&gt; Method1(T arg)\n      {\n           //...\n      }\n   }\n}\n</pre>\n\n",
          "title": "\"Generic.List\" instances should not be part of public APIs",
          "language": "C#",
          "key": "S3956"
        }
      ],
      "tags": [
        "api-design"
      ],
      "title": "\"Generic.List\" instances should not be part of public APIs",
      "key": "S3956"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "cert",
            "sans-top25-porous",
            "owasp-a2"
          ],
          "severity": "Blocker",
          "description": "<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring username = \"admin\";\nstring password = \"Password123\"; // Noncompliant\nstring usernamePassword  = \"user=admin&amp;password=Password123\"; // Noncompliant\nstring usernamePassword2 = \"user=admin&amp;\" + \"password=\" + password; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstring username = \"admin\";\nstring password = GetEncryptedPassword();\nstring usernamePassword = string.Format(\"user={0}&amp;password={1}\", GetEncryptedUsername(), GetEncryptedPassword());\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/798\">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/259\">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>\n\n",
          "title": "Credentials should not be hard-coded",
          "language": "C#",
          "key": "S2068"
        }
      ],
      "tags": [
        "cwe",
        "cert",
        "sans-top25-porous",
        "owasp-a2"
      ],
      "title": "Credentials should not be hard-coded",
      "key": "S2068"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>When a method in a derived class has the same name as a method in the base class but with a signature that only differs by types that are weakly\nderived (e.g. <code>object</code> vs <code>string</code>), the result is that the base method becomes hidden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    internal void SomeMethod(string s1, string s2) { }\n  }\n\n  class Bar : Foo\n  {\n    internal void SomeMethod(string s1, object o2) { }  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    internal void SomeMethod(string s1, string s2) { }\n  }\n\n  class Bar : Foo\n  {\n    internal void SomeOtherMethod(string s1, object o2) { }\n  }\n}\n</pre>\n\n",
          "title": "Base class methods should not be hidden",
          "language": "C#",
          "key": "S4019"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Base class methods should not be hidden",
      "key": "S4019"
    },
    {
      "implementations": [
        {
          "tags": [
            "multi-threading",
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>A thread acquiring a lock on an object that can be accessed across application domain boundaries runs the risk of being blocked by another thread\nin a different application domain. Objects that can be accessed across application domain boundaries are said to have weak identity. Types with weak\nidentity are:</p>\n<ul>\n  <li> <code>MarshalByRefObject</code> </li>\n  <li> <code>ExecutionEngineException</code> </li>\n  <li> <code>OutOfMemoryException</code> </li>\n  <li> <code>StackOverflowException</code> </li>\n  <li> <code>String</code> </li>\n  <li> <code>MemberInfo</code> </li>\n  <li> <code>ParameterInfo</code> </li>\n  <li> <code>Thread</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Threading;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    string myString = \"foo\";\n\n    void Bar()\n    {\n      lock(myString) { } // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Threading;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    string myString = \"foo\";\n    private readonly Object thisLock = new Object();\n\n    void Bar()\n    {\n      lock(thisLock) { } // Compliant\n    }\n  }\n}\n</pre>\n\r\n",
          "title": "Threads should not lock on objects with weak identity",
          "language": "C#",
          "key": "S3998"
        }
      ],
      "tags": [
        "multi-threading",
        "pitfall"
      ],
      "title": "Threads should not lock on objects with weak identity",
      "key": "S3998"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>This rule raises an issue when an externally visible enumeration is marked with <code>FlagsAttribute</code> and one, or more, of its values is not\na power of 2 or a combination of the other defined values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    [FlagsAttribute]\n    public enum Color // Noncompliant, Orange is neither a power of two, nor a combination of any of the defined values\n    {\n        None    = 0,\n        Red     = 1,\n        Orange  = 3,\n        Yellow  = 4\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public enum Color // Compliant - no FlagsAttribute attribute\n    {\n        None = 0,\n        Red = 1,\n        Orange = 3,\n        Yellow = 4\n    }\n\n    [FlagsAttribute]\n    public enum Days\n    {\n        None = 0,\n        Monday = 1,\n        Tuesday = 2,\n        Wednesday = 4,\n        Thursday = 8,\n        Friday = 16,\n        All = Monday| Tuesday | Wednesday | Thursday | Friday    // Compliant - combination of other values\n    }\n}\n</pre>\n\n",
          "title": "Non-flags enums should not be marked with \"FlagsAttribute\"",
          "language": "C#",
          "key": "S4070"
        }
      ],
      "tags": [],
      "title": "Non-flags enums should not be marked with \"FlagsAttribute\"",
      "key": "S4070"
    },
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Major",
          "description": "<p>A nested type is a type argument that is also a generic type. Calling a method with such a nested type argument requires complicated and confusing\ncode. It should be avoided as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Collections.Generic;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void DoSomething(ICollection&lt;ICollection&lt;int&gt;&gt; outerCollect) // Noncompliant\n    {\n    }\n  }\n}\n</pre>\n\r\n",
          "title": "Method signatures should not contain nested generic types",
          "language": "C#",
          "key": "S4017"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "Method signatures should not contain nested generic types",
      "key": "S4017"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Critical",
          "description": "<p>Passing a parameter by reference, which is what happens when you use the <code>out</code> or <code>ref</code> parameter modifiers, means that the\nmethod will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change\nthe argument's values. If it was a reference type, then the method receives a pointer to a pointer, which is usually not what was intended. Even when\nit is what was intended, this is the sort of thing that's difficult to get right, and should be used with caution.</p>\n<p>This rule raises an issue when <code>out</code> or <code>ref</code> is used on a non-<code>Optional</code> parameter in a public method.\n<code>Optional</code> parameters are covered by S3447.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void GetReply(\n         ref MyClass input, // Noncompliant\n         out string reply)  // Noncompliant\n{ ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic string GetReply(MyClass input)\n{ ... }\n\npublic bool TryGetReply(MyClass input, out string reply)\n{ ... }\n\npublic ReplyData GetReply(MyClass input)\n{ ... }\n\ninternal void GetReply(ref MyClass input, out string reply)\n{ ... }\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise issues for:</p>\n<p>- non-public methods</p>\n<p>- methods with only 'out' parameters, name starting with \"Try\" and return type bool.</p>\n\r\n",
          "title": "\"out\" and \"ref\" parameters should not be used",
          "language": "C#",
          "key": "S3874"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "\"out\" and \"ref\" parameters should not be used",
      "key": "S3874"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Blocker",
          "description": "<p>The use of <code>==</code> to compare to objects is expected to do a reference comparison. That is, it is expected to return <code>true</code> if\nand only if they are the same object instance. Overloading the operator to do anything else will inevitably lead to the introduction of bugs by\ncallers. On the other hand, overloading it to do exactly that is pointless; that's what <code>==</code> does by default.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static bool operator== (MyType x, MyType y) // Noncompliant\n{\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Classes with overloaded <code>operator +</code> or <code>operator -</code> methods are ignored. </li>\n  <li> Classes that implement <code>IComparable&lt;T&gt;</code> or <code>IEquatable&lt;T&gt;</code> most probably behave as a value-type objects and\n  so are ignored. </li>\n</ul>\n\r\n",
          "title": "\"operator==\" should not be overloaded on reference types",
          "language": "C#",
          "key": "S3875"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "\"operator==\" should not be overloaded on reference types",
      "key": "S3875"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Critical",
          "description": "<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed. </li>\n  <li> It is not yet, or never will be, supported. In this case a <code>NotSupportedException</code> should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override void DoSomething()\n{\n}\n\npublic override void DoSomethingElse()\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic override void DoSomething()\n{\n  // Do nothing because of X and Y.\n}\n\npublic override void DoSomethingElse()\n{\n  throw new NotSupportedException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The following methods are ignored:</p>\n<ul>\n  <li> empty <code>virtual</code> methods, </li>\n  <li> empty methods that override an <code>abstract</code> method, </li>\n  <li> empty overrides in test assemblies. </li>\n</ul>\n\r\n<h2>Code Fixes</h2><ul><li>Throw NotSupportedException</li><li>Add comment</li></ul>",
          "title": "Methods should not be empty",
          "language": "C#",
          "key": "S1186"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "Methods should not be empty",
      "key": "S1186"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "unused"
          ],
          "severity": "Minor",
          "description": "<p>Namespaces with no lines of code clutter a project and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnamespace MyEmptyNamespace // Noncompliant\n{\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>\n\r\n<h2>Code Fixes</h2><ul><li>Remove empty namespace</li></ul>",
          "title": "Namespaces should not be empty",
          "language": "C#",
          "key": "S3261"
        }
      ],
      "tags": [
        "cert",
        "unused"
      ],
      "title": "Namespaces should not be empty",
      "key": "S3261"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Major",
          "description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>\n\r\n",
          "title": "Nested blocks of code should not be left empty",
          "language": "C#",
          "key": "S108"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "Nested blocks of code should not be left empty",
      "key": "S108"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe"
          ],
          "severity": "Major",
          "description": "<p>Nullable value types can hold either a value or <code>null</code>. The value held in the nullable type can be accessed with the <code>Value</code>\nproperty, but <code>.Value</code> throws an <code>InvalidOperationException</code> when the value is <code>null</code>. To avoid the exception, a\nnullable type should always be tested before <code>.Value</code> is accessed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint? nullable = null;\n...\nUseValue(nullable.Value); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint? nullable = null;\n...\nif (nullable.HasValue)\n{\n  UseValue(nullable.Value);\n}\n</pre>\n<p>or</p>\n<pre>\nint? nullable = null;\n...\nif (nullable != null)\n{\n  UseValue(nullable.Value);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n</ul>\n\r\n",
          "title": "Empty nullable value should not be accessed",
          "language": "C#",
          "key": "S3655"
        }
      ],
      "tags": [
        "cwe"
      ],
      "title": "Empty nullable value should not be accessed",
      "key": "S3655"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "cert",
            "unused"
          ],
          "severity": "Minor",
          "description": "<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething()\n{\n  ; // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse()\n{\n  Console.WriteLine(\"Hello, world!\");;  // Noncompliant - double ;\n  ...\n  // Rarely, they are used on purpose as the body of a loop. It is a bad practice to\n  // have side-effects outside of the loop:\n  for (int i = 0; i &lt; 3; Console.WriteLine(i), i++); // Noncompliant\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething()\n{\n}\n\nvoid doSomethingElse()\n{\n  Console.WriteLine(\"Hello, world!\");\n  ...\n  for (int i = 0; i &lt; 3; i++)\n  {\n    Console.WriteLine(i);\n   }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7gCTAw\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4FtAg\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>\n\r\n<h2>Code Fixes</h2><ul><li>Remove empty statement</li></ul>",
          "title": "Empty statements should be removed",
          "language": "C#",
          "key": "S1116"
        }
      ],
      "tags": [
        "misra",
        "cert",
        "unused"
      ],
      "title": "Empty statements should be removed",
      "key": "S1116"
    },
    {
      "implementations": [
        {
          "tags": [
            "error-handling"
          ],
          "severity": "Critical",
          "description": "<p><code>Enumerable.Sum()</code> always executes addition in a <code>checked</code> context, so an <code>OverflowException</code> will be thrown if\nthe value exceeds <code>MaxValue</code> even if an <code>unchecked</code> context was specified. Using an <code>unchecked</code> context anyway\nrepresents a misunderstanding of how <code>Sum</code> works.</p>\n<p>This rule raises an issue when an <code>unchecked</code> context is specified for a <code>Sum</code> on integer types.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid Add(List&lt;int&gt; list)\n{\n  int d = unchecked(list.Sum());  // Noncompliant\n\n  unchecked\n  {\n    int e = list.Sum();  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid Add(List&lt;int&gt; list)\n{\n  int d = list.Sum();\n\n  try\n  {\n    int e = list.Sum();\n  }\n  catch (System.OverflowException e)\n  {\n    // exception handling...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When the <code>Sum()</code> call is inside a <code>try-catch</code> block, no issues are reported.</p>\n<pre>\nvoid Add(List&lt;int&gt; list)\n{\n  unchecked\n  {\n    try\n    {\n      int e = list.Sum();\n    }\n    catch (System.OverflowException e)\n    {\n      // exception handling...\n    }\n  }\n}\n</pre>\n\r\n",
          "title": "Overflow checking should not be disabled for \"Enumerable.Sum\"",
          "language": "C#",
          "key": "S2291"
        }
      ],
      "tags": [
        "error-handling"
      ],
      "title": "Overflow checking should not be disabled for \"Enumerable.Sum\"",
      "key": "S2291"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nenum FooFlags // Noncompliant\n{\n    Foo = 1\n    Bar = 2\n    Baz = 4\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nenum Foo\n{\n    Foo = 1\n    Bar = 2\n    Baz = 4\n}\n</pre>\n\r\n",
          "title": "Enumeration type names should not have \"Flags\" or \"Enum\" suffixes",
          "language": "C#",
          "key": "S2344"
        },
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEnum FooFlags ' Noncompliant\n    Foo = 1\n    Bar = 2\n    Baz = 4\nEnd Enum\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEnum Foo      ' Compliant\n    Foo = 1\n    Bar = 2\n    Baz = 4\nEnd Enum\n</pre>\n\r\n",
          "title": "Enumeration type names should not have \"Flags\" or \"Enum\" suffixes",
          "language": "VB.NET",
          "key": "S2344"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Enumeration type names should not have \"Flags\" or \"Enum\" suffixes",
      "key": "S2344"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the enumeration type names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd><dt class=\"param-key\">flagsAttributeFormat</dt><dd><span class=\"param-description\">Regular expression used to check the flags enumeration type names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$</span></dd></dl><p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all <code>enum</code> names match a provided regular\nexpression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower case, e.g. GetHtml </li>\n  <li> If the enum is marked as [Flags] then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption) </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression for non-flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>\n<pre>\npublic enum foo // Noncompliant\n{\n    FooValue = 0\n}\n</pre>\n<p>With the default regular expression for flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$</code></p>\n<pre>\n[Flags]\npublic enum Option // Noncompliant\n{\n    None = 0,\n    Option1 = 1,\n    Option2 = 2\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Foo\n{\n    FooValue = 0\n}\n</pre>\n<pre>\n[Flags]\npublic enum Options\n{\n    None = 0,\n    Option1 = 1,\n    Option2 = 2\n}\n</pre>\n\r\n",
          "title": "Enumeration types should comply with a naming convention",
          "language": "C#",
          "key": "S2342"
        },
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the enumeration type names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd><dt class=\"param-key\">flagsAttributeFormat</dt><dd><span class=\"param-description\">Regular expression used to check the flags enumeration type names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$</span></dd></dl><p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all enum names match a provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower case, e.g. GetHtml </li>\n  <li> If the enum is marked as [Flags] then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption) </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression for non-flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>\n<pre>\nPublic Enum foo ' Noncompliant\n    FooValue = 0\nEnd Enum\n</pre>\n<p>With the default regular expression for flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$</code></p>\n<pre>\n&lt;Flags()&gt;\nPublic Enum Option ' Noncompliant\n    None = 0,\n    Option1 = 1,\n    Option2 = 2\nEnd Enum\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Enum Foo\n    FooValue = 0\nEnd Enum\n</pre>\n<pre>\n&lt;Flags()&gt;\nPublic Enum Options\n    None = 0,\n    Option1 = 1,\n    Option2 = 2\nEnd Enum\n</pre>\n\r\n",
          "title": "Enumeration types should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2342"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Enumeration types should comply with a naming convention",
      "key": "S2342"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>If an <code>enum</code> member's name contains the word \"reserved\" it implies it is not currently used and will be change in the future. However\nchanging an <code>enum</code> member is a breaking change and can create significant problems. There is no need to reserve an <code>enum</code> member\nsince a new member can be added in the future, and such an addition will usually not be a breaking change.</p>\n<p>This rule raises an issue when the name of an enumeration member contains \"reserved\".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public enum Color\n  {\n        None,\n        Red,\n        Orange,\n        Yellow,\n        ReservedColor  // Noncompliant\n    }\n}\n</pre>\n\r\n",
          "title": "Enumeration members should not be named \"Reserved\"",
          "language": "C#",
          "key": "S4016"
        }
      ],
      "tags": [],
      "title": "Enumeration members should not be named \"Reserved\"",
      "key": "S4016"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>By default the storage type of an <code>enum</code> is <code>Int32</code>. In most cases it is not necessary to change this. In particular you will\nnot achieve any performance gain by using a smaller data type (e.g. <code>Byte</code>) and may limit future uses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public enum Visibility : sbyte // Noncompliant\n    {\n        Visible = 0,\n        Invisible = 1,\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public enum Visibility\n    {\n        Visible = 0,\n        Invisible = 1,\n    }\n}\n</pre>\n\r\n",
          "title": "Enumerations should have \"Int32\" storage",
          "language": "C#",
          "key": "S4022"
        }
      ],
      "tags": [],
      "title": "Enumerations should have \"Int32\" storage",
      "key": "S4022"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra"
          ],
          "severity": "Major",
          "description": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.100000001f; // 0.1\ndouble d = 0.10000000000000001; // 0.1\n</pre>\n<p>(Results will vary based on compiler and compiler settings)</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error.</p>\n<p>This rule checks for the use of direct and indirect equality/inequality tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146f;\nif ( myNumber == 3.146f ) //Noncompliant. Because of floating point imprecision, this will be false\n{\n  // ...\n}\n\nif (myNumber &lt;= 3.146f &amp;&amp; mNumber &gt;= 3.146f) // Noncompliant indirect equality test\n{\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) // Noncompliant indirect inequality test\n{\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>\n\r\n",
          "title": "Floating point numbers should not be tested for equality",
          "language": "C#",
          "key": "S1244"
        }
      ],
      "tags": [
        "misra"
      ],
      "title": "Floating point numbers should not be tested for equality",
      "key": "S1244"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "suspicious"
          ],
          "severity": "Critical",
          "description": "<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic bool IsOdd(int x)\n{\n  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic bool IsOdd(int x)\n{\n  return x %2 != 0;\n}\n</pre>\n<p>or</p>\n<pre>\npublic bool IsOdd(uint x)\n{\n  return x %2 == 1;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/xAHAAQ\">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQBi\">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_YBLAQ\">CERT, INT10-CPP.</a> - Do not assume a positive remainder when using the %\n  operator </li>\n</ul>\n\r\n",
          "title": "Modulus results should not be checked for direct equality",
          "language": "C#",
          "key": "S2197"
        }
      ],
      "tags": [
        "cert",
        "suspicious"
      ],
      "title": "Modulus results should not be checked for direct equality",
      "key": "S2197"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>When a class implements the <code>IEquatable&lt;T&gt;</code> interface, it enters a contract that, in effect, states \"I know how to compare two\ninstances of type T or any type derived from T for equality.\". However if that class is derived, it is very unlikely that the base class will know how\nto make a meaningful comparison. Therefore that implicit contract is now broken.</p>\n<p>Alternatively <code>IEqualityComparer&lt;T&gt;</code> provides a safer interface and is used by collections or <code>Equals</code> could be made\n<code>virtual</code>.</p>\n<p>This rule raises an issue when a unsealed, <code>public</code> or <code>protected</code> class implements <code>IEquitable&lt;T&gt;</code> and the\n<code>Equals</code> is not <code>virtual</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  class Base : IEquatable&lt;Base&gt; // Noncompliant\n  {\n    bool Equals(Base other)\n    {\n      if (other == null) { return false };\n      // do comparison of base properties\n    }\n\n    override bool Equals(object other)  =&gt; Equals(other as Base);\n  }\n\n  class A : Base\n  {\n    bool Equals(A other)\n    {\n      if (other == null) { return false };\n      // do comparison of A properties\n      return base.Equals(other);\n    }\n\n    override bool Equals(object other)  =&gt; Equals(other as A);\n  }\n\n  class B : Base\n  {\n    bool Equals(B other)\n    {\n      if (other == null) { return false };\n      // do comparison of B properties\n     return base.Equals(other);\n    }\n\n    override bool Equals(object other)  =&gt; Equals(other as B);\n  }\n\n  static void Main() {\n    A a = new A();\n    B b = new B();\n\n    Console.WriteLine(a.Equals(b)); // This calls the WRONG equals. This causes Base::Equals(Base)\n    //  to be called which only compares the properties in Base and ignores the fact that\n    // a and b are different types. In the working example A::Equals(Object) would have been\n    // called and Equals would return false because it correctly recognizes that a and b are\n    // different types. If a and b have the same base properties they will  be returned as equal.\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public sealed class Foo : IEquatable&lt;Foo&gt;\n    {\n        public bool Equals(Foo other)\n        {\n            // Your code here\n        }\n    }\n}\n</pre>\n<h2>See</h2>\n<p><a href=\"http://blog.mischel.com/2013/01/05/inheritance-and-iequatable-do-not-mix/\">Inheritance and IEquatable do not mix</a></p>\n<p><a href=\"https://msdn.microsoft.com/en-us/library/ms132151(v=vs.110).aspx\">IEqualityComparer&lt;T&gt; Interface</a></p>\n\n",
          "title": "Classes implementing \"IEquatable<T>\" should be sealed",
          "language": "C#",
          "key": "S4035"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Classes implementing \"IEquatable<T>\" should be sealed",
      "key": "S4035"
    },
    {
      "implementations": [
        {
          "tags": [
            "error-handling",
            "confusing"
          ],
          "severity": "Major",
          "description": "<p>When rethrowing an exception, you should do it by simply calling <code>throw;</code> and not <code>throw exc;</code>, because the stack trace is\nreset with the second syntax, making debugging a lot harder.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry\n{}\ncatch(ExceptionType1 exc)\n{\n  Console.WriteLine(exc);\n  throw exc; // Noncompliant; stacktrace is reset\n}\ncatch (ExceptionType2 exc)\n{\n  throw new Exception(\"My custom message\", exc);  // Compliant; stack trace preserved\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry\n{}\ncatch(ExceptionType1 exc)\n{\n  Console.WriteLine(exc);\n  throw;\n}\ncatch (ExceptionType2 exc)\n{\n  throw new Exception(\"My custom message\", exc);\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Change to 'throw;'</li></ul>",
          "title": "Exceptions should not be explicitly rethrown",
          "language": "C#",
          "key": "S3445"
        }
      ],
      "tags": [
        "error-handling",
        "confusing"
      ],
      "title": "Exceptions should not be explicitly rethrown",
      "key": "S3445"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Blocker",
          "description": "<p>It is expected that some methods should be called with caution, but others, such as <code>ToString</code>, are expected to \"just work\". Throwing an\nexception from such a method is likely to break callers' code unexpectedly.</p>\n<p>An issue is raised when an exception is thrown from any of the following: </p>\n<ul>\n  <li> Event accessors </li>\n  <li> <code>Object.Equals</code> </li>\n  <li> <code>IEquatable.Equals</code> </li>\n  <li> <code>GetHashCode</code> </li>\n  <li> <code>ToString</code> </li>\n  <li> <code>static</code> constructors </li>\n  <li> <code>IDisposable.Dispose</code> </li>\n  <li> <code>operator ==, !=, &lt;, &gt;, &lt;=, &gt;=</code> </li>\n  <li> <code>implicit</code> cast operators </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override string ToString()\n{\n  if (string.IsNullOrEmpty(Name))\n  {\n    throw new ArgumentException(\"...\");  // Noncompliant\n  }\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p><code>System.NotImplementedException</code> and its derivatives are ignored.</p>\n<p><code>System.InvalidOperationException</code>, <code>System.NotSupportedException</code>, and <code>System.ArgumentException</code> and their\nderivatives are ignored in event accessors.</p>\n\r\n",
          "title": "Exceptions should not be thrown from unexpected methods",
          "language": "C#",
          "key": "S3877"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Exceptions should not be thrown from unexpected methods",
      "key": "S3877"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>Exceptions types should provide the following constructors:</p>\n<ul>\n  <li> <code>public MyException()</code> </li>\n  <li> <code>public MyException(string)</code> </li>\n  <li> <code>public MyException(string, Exception)</code> </li>\n  <li> <code>protected</code> or <code>private MyException(SerializationInfo, StreamingContext)</code> </li>\n</ul>\n<p>That fourth constructor should be <code>protected</code> in unsealed classes, and <code>private</code> in sealed classes.</p>\n<p>Not having this full set of constructors can make it difficult to handle exceptions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyException // Noncompliant: several constructors are missing\n  {\n    public MyException()\n    {\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Runtime.Serialization;\n\nnamespace MyLibrary\n{\n  public class MyException : Exception\n  {\n      public MyException()\n      {\n      }\n\n      public MyException(string message)\n          :base(message)\n      {\n      }\n\n      public MyException(string message, Exception innerException)\n          : base(message, innerException)\n      {\n      }\n\n      protected MyException(SerializationInfo info, StreamingContext context)\n          : base(info, context)\n      {\n      }\n  }\n}\n</pre>\n\r\n",
          "title": "Exceptions should provide standard constructors",
          "language": "C#",
          "key": "S4027"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Exceptions should provide standard constructors",
      "key": "S4027"
    },
    {
      "implementations": [
        {
          "tags": [
            "error-handling",
            "api-design"
          ],
          "severity": "Critical",
          "description": "<p>The point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be\n<code>public</code> for that to work. </p>\n<p>If a method throws a non-public exception, the best you can do on the caller's side is to <code>catch</code> the closest <code>public</code> base\nof the class. That is, you lose all that custom information you created the exception type to pass. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninternal class MyException : Exception   // Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException : Exception\n{\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores Exception types that are not derived directly from <code>System.Exception</code>, <code>System.SystemException</code>, or\n<code>System.ApplicationException</code>.</p>\n\r\n",
          "title": "Exception types should be \"public\"",
          "language": "C#",
          "key": "S3871"
        }
      ],
      "tags": [
        "error-handling",
        "api-design"
      ],
      "title": "Exception types should be \"public\"",
      "key": "S3871"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Creating a new <code>Exception</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n{\n  new ArgumentException(\"x must be nonnegative\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n{\n  throw new ArgumentException(\"x must be nonnegative\");\n}\n</pre>\n\r\n",
          "title": "Exception should not be created without being thrown ",
          "language": "C#",
          "key": "S3984"
        }
      ],
      "tags": [],
      "title": "Exception should not be created without being thrown ",
      "key": "S3984"
    },
    {
      "implementations": [
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Critical",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">max</dt><dd><span class=\"param-description\">Maximum number of allowed conditional operators in an expression</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">3</span></dd></dl><p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ((MyFirstCondition() || MySecondCondition()) &amp;&amp; MyLastCondition()) { ... }\n</pre>\n\r\n",
          "title": "Expressions should not be too complex",
          "language": "C#",
          "key": "S1067"
        },
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Critical",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">max</dt><dd><span class=\"param-description\">Maximum number of allowed conditional operators in an expression</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">3</span></dd></dl><p>Complex boolean expressions are hard to read and so to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3</p>\n<pre>\nIf ((condition1 AndAlso condition2) OrElse (condition3 AndAlso condition4)) AndAlso condition5) Then  'Noncompliant\n  ...\nEnd If\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIf ((MyFirstCondition() OrElse MySecondCondition()) AndAlso MyLastCondition()) Then\n  ...\nEnd If\n</pre>\n\r\n",
          "title": "Expressions should not be too complex",
          "language": "VB.NET",
          "key": "S1067"
        }
      ],
      "tags": [
        "brain-overload"
      ],
      "title": "Expressions should not be too complex",
      "key": "S1067"
    },
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Blocker",
          "description": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit\n{\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private bool ripe; // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit\n{\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private bool ripened;\n  private static Color FLESH_COLOR;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. It also ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit\n{\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>\n\r\n",
          "title": "Child class fields should not shadow parent class fields",
          "language": "C#",
          "key": "S2387"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "Child class fields should not shadow parent class fields",
      "key": "S2387"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>Having a field in a child class with a name that differs from a parent class' field only by capitalization is sure to cause confusion. Such child\nclass fields should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit\n{\n  protected string plantingSeason;\n  //...\n}\n\npublic class Raspberry : Fruit\n{\n  protected string plantingseason;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit\n{\n  protected string plantingSeason;\n  //...\n}\n\npublic class Raspberry : Fruit\n{\n  protected string whenToPlant;\n  // ...\n}\n</pre>\n<p>Or</p>\n<pre>\npublic class Fruit\n{\n  protected string plantingSeason;\n  //...\n}\n\npublic class Raspberry : Fruit\n{\n  // field removed; parent field will be used instead\n  // ...\n}\n</pre>\n\r\n",
          "title": "Child class fields should not differ from parent class fields only be capitalization",
          "language": "C#",
          "key": "S4025"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Child class fields should not differ from parent class fields only be capitalization",
      "key": "S4025"
    },
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Major",
          "description": "<p><code>readonly</code> fields can only be assigned in a class constructor. If a class has a field that's not marked <code>readonly</code> but is\nonly set in the constructor, it could cause confusion about the field's intended use. To avoid confusion, such fields should be marked\n<code>readonly</code> to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Person\n{\n  int _birthYear;  // Noncompliant\n  Person(int birthYear)\n  {\n    _birthYear = birthYear;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Person\n{\n  readonly int _birthYear;\n  Person(int birthYear)\n  {\n    _birthYear = birthYear;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Fields with attributes are ignored.</p>\n\r\n<h2>Code Fixes</h2><ul><li>Add 'readonly' keyword</li></ul>",
          "title": "Fields that are only assigned in the constructor should be \"readonly\"",
          "language": "C#",
          "key": "S2933"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "Fields that are only assigned in the constructor should be \"readonly\"",
      "key": "S2933"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and\nvalidation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties.\nExplicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  public int MagicNumber = 42;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  public int MagicNumber\n  {\n    get { return 42; }\n  }\n}\n</pre>\n<p>or </p>\n<pre>\npublic class Foo\n{\n  private int MagicNumber = 42;\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>struct</code>s are ignored, as are <code>static</code> and <code>const</code> fields in classes. </p>\n<p>Further, an issue is only raised when the real accessibility is <code>public</code>, taking into account the class accessibility.</p>\n\r\n",
          "title": "Fields should be private",
          "language": "C#",
          "key": "S2357"
        },
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and\nvalidation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties.\nExplicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nClass Foo\n    Public Foo = 42          ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Public Property Foo = 42 ' Compliant\nEnd Class\n</pre>\n<h2>Exceptions</h2>\n<p><code>Shared</code> and <code>Const</code> fields are ignored.</p>\n\r\n",
          "title": "Fields should be private",
          "language": "VB.NET",
          "key": "S2357"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Fields should be private",
      "key": "S2357"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe"
          ],
          "severity": "Minor",
          "description": "<p>Public fields in public classes do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private fields and public properties (set and get), unauthorized modifications are prevented. Properties also benefit from additional\nprotection (security) features such as Link Demands.</p>\n<p>Note that due to optimizations on simple properties, public fields provide only very little performance gain.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n    public int instanceData = 32; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n    private int instanceData = 32;\n\n    public int InstanceData\n    {\n        get { return instanceData; }\n\tset { instanceData = value ; }\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Fields marked as <code>readonly</code> or <code>const</code> are ignored by this rule.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>\n\r\n",
          "title": "Fields should not have public accessibility",
          "language": "C#",
          "key": "S1104"
        }
      ],
      "tags": [
        "cwe"
      ],
      "title": "Fields should not have public accessibility",
      "key": "S1104"
    },
    {
      "implementations": [
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Major",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">maximumFileLocThreshold</dt><dd><span class=\"param-description\">Maximum authorized lines in a file.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">1000</span></dd></dl><p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>\n\r\n",
          "title": "Files should not have too many lines of code",
          "language": "C#",
          "key": "S104"
        },
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Major",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">maximumFileLocThreshold</dt><dd><span class=\"param-description\">Maximum authorized lines in a file.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">1000</span></dd></dl><p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>\n\r\n",
          "title": "Files should not have too many lines of code",
          "language": "VB.NET",
          "key": "S104"
        }
      ],
      "tags": [
        "brain-overload"
      ],
      "title": "Files should not have too many lines of code",
      "key": "S104"
    },
    {
      "implementations": [
        {
          "tags": [
            "performance"
          ],
          "severity": "Major",
          "description": "<p>Finalizers come with a performance cost due to the overhead of tracking the life cycle of objects. An empty one is consequently costly with no\nbenefit or justification.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n    ~Foo() // Noncompliant\n    {\n    }\n}\n</pre>\n\r\n",
          "title": "Finalizers should not be empty",
          "language": "C#",
          "key": "S3880"
        }
      ],
      "tags": [
        "performance"
      ],
      "title": "Finalizers should not be empty",
      "key": "S3880"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to\n0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or\noperator in a useful way.</p>\n<p>Instead, 0 and powers of two (i.e. 1, 2, 4, 8, 16, ...) should be used to explicitly initialize all the members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Flags]\nenum FruitType    // Noncompliant\n{\n  None,\n  Banana,\n  Orange,\n  Strawberry\n}\nclass Program\n{\n    static void Main()\n    {\n        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;\n        // Will display only Strawberry!\n        Console.WriteLine(bananaAndStrawberry.ToString());\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[Flags]\nenum FruitType\n{\n  None = 0,\n  Banana = 1,\n  Orange = 2,\n  Strawberry = 4\n}\nclass Program\n{\n    static void Main()\n    {\n        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;\n        // Will display Banana and Strawberry, as expected.\n        Console.WriteLine(bananaAndStrawberry.ToString());\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The default initialization of 0, 1, 2, 3, 4, ... matches 0, 1, 2, 4, 8 ... in the first three values, so no issue is reported if the first three\nmembers of the enumeration is not initialized.</p>\n\r\n",
          "title": "Flags enumerations should explicitly initialize all their members",
          "language": "C#",
          "key": "S2345"
        },
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to\n0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or\noperator in a useful way.</p>\n<p>Instead, 0 and powers of two (i.e. 1, 2, 4, 8, 16, ...) should be used to explicitly initialize all the members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;Flags()&gt;\nEnum FruitType    ' Non-Compliant\n  None\n  Banana\n  Orange\n  Strawberry\nEnd Enum\n\nModule Module1\n  Sub Main()\n    Dim bananaAndStrawberry = FruitType.Banana Or FruitType.Strawberry\n\n    ' Will display only Strawberry!\n    Console.WriteLine(bananaAndStrawberry.ToString())\n  End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;Flags()&gt;\nEnum FruitType    ' Compliant\n  None = 0\n  Banana = 1\n  Orange = 2\n  Strawberry = 4\nEnd Enum\n\nModule Module1\n  Sub Main()\n    Dim bananaAndStrawberry = FruitType.Banana Or FruitType.Strawberry\n\n    ' Will display Banana and Strawberry, as expected.\n    Console.WriteLine(bananaAndStrawberry.ToString())\n  End Sub\nEnd Module\n</pre>\n<h2>Exceptions</h2>\n<p>The default initialization of 0, 1, 2, 3, 4, ... matches 0, 1, 2, 4, 8 ... in the first three values, so no issue is reported if the first three\nmembers of the enumeration is not initialized.</p>\n\r\n",
          "title": "Flags enumerations should explicitly initialize all their members",
          "language": "VB.NET",
          "key": "S2345"
        }
      ],
      "tags": [],
      "title": "Flags enumerations should explicitly initialize all their members",
      "key": "S2345"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Critical",
          "description": "<p>Consistent use of \"None\" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other\nstate, since there is no way to check that the bit <code>0</code> is set.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Flags]\nenum FruitType\n{\n    Void = 0,        // Non-Compliant\n    Banana = 1,\n    Orange = 2,\n    Strawberry = 4\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[Flags]\nenum FruitType\n{\n    None = 0,        // Compliant\n    Banana = 1,\n    Orange = 2,\n    Strawberry = 4\n}\n</pre>\n\r\n",
          "title": "Flags enumerations zero-value members should be named \"None\"",
          "language": "C#",
          "key": "S2346"
        },
        {
          "tags": [
            "convention"
          ],
          "severity": "Critical",
          "description": "<p>Consistent use of \"None\" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other\nstate, since there is no way to check that the bit <code>0</code> is set.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;Flags()&gt;\nEnum FruitType\n    Void = 0        ' Non-Compliant\n    Banana = 1\n    Orange = 2\n    Strawberry = 4\nEnd Enum\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;Flags()&gt;\nEnum FruitType\n    None = 0        ' Compliant\n    Banana = 1\n    Orange = 2\n    Strawberry = 4\nEnd Enum\n</pre>\n\r\n",
          "title": "Flags enumerations zero-value members should be named \"None\"",
          "language": "VB.NET",
          "key": "S2346"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Flags enumerations zero-value members should be named \"None\"",
      "key": "S2346"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Critical",
          "description": "<p>The <code>foreach</code> statement was introduced in the C# language prior to generics to make it easier to work with the non-generic collections\navailable at that time such as <code>ArrayList</code>. The <code>foreach</code> statements allows you to downcast elements of a collection of\n<code>Object</code>s to any other type. The problem is that to achieve the cast, the <code>foreach</code> statements silently performs\n<code>explicit</code> type conversion, which at runtime can result in an <code>InvalidCastException</code>.</p>\n<p>C# code iterating on generic collections or arrays should not rely on <code>foreach</code> statement's silent <code>explicit</code>\nconversions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit { }\npublic class Orange : Fruit { }\npublic class Apple : Fruit { }\n\nclass MyTest\n{\n  public void Test()\n  {\n    var fruitBasket = new List&lt;Fruit&gt;();\n    fruitBasket.Add(new Orange());\n    fruitBasket.Add(new Orange());\n    // fruitBasket.Add(new Apple());  // uncommenting this line will make both foreach below throw an InvalidCastException\n\n    foreach (Fruit fruit in fruitBasket)\n    {\n      var orange = (Orange)fruit; // This \"explicit\" conversion is hidden within the foreach loop below\n      ...\n    }\n\n    foreach (Orange orange in fruitBasket) // Noncompliant\n    {\n      ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar fruitBasket = new List&lt;Orange&gt;();\nfruitBasket.Add(new Orange());\nfruitBasket.Add(new Orange());\n// fruitBasket.Add(new Apple());  // uncommenting this line won't compile\n\nforeach (Orange orange in fruitBasket)\n{\n  ...\n}\n</pre>\n<p>or</p>\n<pre>\nvar fruitBasket = new List&lt;Fruit&gt;();\nfruitBasket.Add(new Orange());\nfruitBasket.Add(new Orange());\nfruitBasket.Add(new Apple());\n\nforeach (Orange orange in fruitBasket.OfType&lt;Orange&gt;())\n{\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule ignores iterations on collections of <code>object</code>s. This includes legacy code that uses <code>ArrayList</code>. Furthermore, the\nrule does not report on cases when user defined conversions are being called. </p>\n\r\n<h2>Code Fixes</h2><ul><li>Filter collection for the expected type</li></ul>",
          "title": "\"Explicit\" conversions of \"foreach\" loops should not be used",
          "language": "C#",
          "key": "S3217"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "\"Explicit\" conversions of \"foreach\" loops should not be used",
      "key": "S3217"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo\n{\n    static void Main()\n    {\n        for (int i = 1; i &lt;= 5; i++)\n        {\n            Console.WriteLine(i);\n            if (condition)\n            {\n               i = 20;\n           }\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo\n{\n    static void Main()\n    {\n        for (int i = 1; i &lt;= 5; i++)\n        {\n            Console.WriteLine(i);\n        }\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the\n  loop. </li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>\n</ul>\n\r\n",
          "title": "\"for\" loop stop conditions should be invariant",
          "language": "C#",
          "key": "S127"
        }
      ],
      "tags": [
        "misra",
        "pitfall"
      ],
      "title": "\"for\" loop stop conditions should be invariant",
      "key": "S127"
    },
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Critical",
          "description": "<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) // Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++)\n{\n  // ...\n}\n</pre>\n\r\n",
          "title": "\"for\" loop increment clauses should modify the loops' counters",
          "language": "C#",
          "key": "S1994"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "\"for\" loop increment clauses should modify the loops' counters",
      "key": "S1994"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>Adherence to the standard naming conventions makes your code not only more readable, but more usable. For instance, <code>class FirstAttribute :\nAttribute</code> can be used simply with <code>First</code>, but you must use the full name for <code>class AttributeOne : Attribute</code>.</p>\n<p>This rule raises an issue when classes extending <code>Attribute</code>, <code>EventArgs</code>, or <code>Exception</code>, do not end with their\nparent class names.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass AttributeOne : Attribute  // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass FirstAttribute : Attribute\n{\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If a class' direct base class doesn't follow the convention, then no issue is reported on the class itself, regardless of whether or not it\nconforms to the convention.</p>\n<pre>\nclass Timeout : Exception // Noncompliant\n{\n}\nclass ExtendedTimeout : Timeout // Ignored; doesn't conform to convention, but the direct base doesn't conform either\n{\n}\n</pre>\n\r\n",
          "title": "Attribute, EventArgs, and Exception type names should end with the type being extended",
          "language": "C#",
          "key": "S3376"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Attribute, EventArgs, and Exception type names should end with the type being extended",
      "key": "S3376"
    },
    {
      "implementations": [
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Critical",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">maximumFunctionComplexityThreshold</dt><dd><span class=\"param-description\">The maximum authorized complexity.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">10</span></dd></dl><p>The cyclomatic complexity of methods and properties should not exceed a defined threshold. Complex code can perform poorly and will in any case be\ndifficult to understand and therefore to maintain.</p>\n\r\n",
          "title": "Methods and properties should not be too complex",
          "language": "C#",
          "key": "S1541"
        },
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Critical",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">maximumFunctionComplexityThreshold</dt><dd><span class=\"param-description\">The maximum authorized complexity.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">10</span></dd></dl><p>The cyclomatic complexity of a function, procedure or property should not exceed a defined threshold. Complex code can perform poorly and will in\nany case be difficult to understand and therefore to maintain.</p>\n\r\n",
          "title": "Functions, procedures and properties should not be too complex",
          "language": "VB.NET",
          "key": "S1541"
        }
      ],
      "tags": [
        "brain-overload"
      ],
      "title": "Methods and properties should not be too complex",
      "key": "S1541"
    },
    {
      "implementations": [
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Critical",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">max</dt><dd><span class=\"param-description\">Maximum allowed control flow statement nesting depth.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">3</span></dd></dl><p>Nested <code>if</code>, <code>switch</code>, <code>for</code>, <code>foreach</code>, <code>while</code>, <code>do</code>, and <code>try</code>\nstatements are key ingredients for making what's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) // Compliant - depth = 1\n{\n  /* ... */\n  if (condition2) // Compliant - depth = 2\n  {\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) // Compliant - depth = 3, not exceeding the limit\n    {\n      /* ... */\n      if (condition4) // Noncompliant - depth = 4\n      {\n        if (condition5) // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n        {\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>\n\r\n",
          "title": "Control flow statements \"if\", \"switch\", \"for\", \"foreach\", \"while\", \"do\"  and \"try\" should not be nested too deeply",
          "language": "C#",
          "key": "S134"
        },
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Critical",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">maximumNestingLevel</dt><dd><span class=\"param-description\">Maximum allowed control flow statement nesting depth.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">3</span></dd></dl><p>Nested <code>If</code>, <code>Select</code>, <code>For</code>, <code>For Each</code>, <code>While</code>, <code>Do</code>, and <code>Try</code>\nstatements are key ingredients for making what's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nIf condition1 ' Compliant - depth = 1\n  ' ...\n  If condition2 ' Compliant - depth = 2\n    ' ...\n    For i = 0 to 10 ' Compliant - depth = 3, not exceeding the limit\n      ' ...\n      If condition4 ' Noncompliant - depth = 4\n        If condition5 ' Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          ' ...\n        End If\n        Return\n      End If\n    Next\n  End If\nEnd If\n</pre>\n\r\n",
          "title": "Control flow statements \"If\", \"For\", \"For Each\", \"Do\", \"While\", \"Select\" and \"Try\" should not be nested too deeply",
          "language": "VB.NET",
          "key": "S134"
        }
      ],
      "tags": [
        "brain-overload"
      ],
      "title": "Control flow statements \"if\", \"switch\", \"for\", \"foreach\", \"while\", \"do\"  and \"try\" should not be nested too deeply",
      "key": "S134"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>While the properties of a <code>readonly</code> reference type field can still be changed after initialization, those of a <code>readonly</code>\nvalue field, such as a <code>struct</code>, cannot. </p>\n<p>If the member could be either a <code>class</code> or a <code>struct</code> then assignment to its properties could be unreliable, working\nsometimes but not others.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface IPoint\n{\n  int X { get; set; }\n  int Y { get; set; }\n}\n\nclass PointManager&lt;T&gt; where T: IPoint\n{\n  readonly T point;  // this could be a struct\n  public PointManager(T point)\n  {\n    this.point = point;\n  }\n\n  public void MovePointVertically(int newX)\n  {\n    point.X = newX; //Noncompliant; if point is a struct, then nothing happened\n    Console.WriteLine(point.X);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ninterface IPoint\n{\n  int X { get; set; }\n  int Y { get; set; }\n}\n\nclass PointManager&lt;T&gt; where T : IPoint\n{\n  readonly T point;  // this could be a struct\n  public PointManager(T point)\n  {\n    this.point = point;\n  }\n\n  public void MovePointVertically(int newX) // assignment has been removed\n  {\n    Console.WriteLine(point.X);\n  }\n}\n</pre>\n<p>or</p>\n<pre>\ninterface IPoint\n{\n  int X { get; set; }\n  int Y { get; set; }\n}\n\nclass PointManager&lt;T&gt; where T : class, IPoint\n{\n  readonly T point;  // this can only be a class\n  public PointManager(T point)\n  {\n    this.point = point;\n  }\n\n  public void MovePointVertically(int newX)\n  {\n    point.X = newX;  // this assignment is guaranteed to work\n    Console.WriteLine(point.X);\n  }\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove assignment</li><li>Add reference type constraint</li></ul>",
          "title": "Property assignments should not be made for \"readonly\" fields not constrained to reference types",
          "language": "C#",
          "key": "S2934"
        }
      ],
      "tags": [],
      "title": "Property assignments should not be made for \"readonly\" fields not constrained to reference types",
      "key": "S2934"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>When constraints have not been applied to restrict a generic type parameter to be a reference type, then a value type, such as a\n<code>struct</code>, could also be passed. In such cases, comparing the type parameter to <code>null</code> would always be false, because a\n<code>struct</code> can be empty, but never <code>null</code>. If a value type is truly what's expected, then the comparison should use\n<code>default()</code>. If it's not, then constraints should be added so that no value type can be passed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate bool IsDefault&lt;T&gt;(T value)\n{\n  if (value == null) // Noncompliant\n  {\n    // ...\n  }\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate bool IsDefault&lt;T&gt;(T value)\n{\n  if(object.Equals(value, default(T)))\n  {\n    // ...\n  }\n  // ...\n}\n</pre>\n<p>or</p>\n<pre>\nprivate bool IsDefault&lt;T&gt;(T value) where T : class\n{\n  if (value == null)\n  {\n    // ...\n  }\n  // ...\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Change null checking</li></ul>",
          "title": "Generic parameters not constrained to reference types should not be compared to \"null\"",
          "language": "C#",
          "key": "S2955"
        }
      ],
      "tags": [],
      "title": "Generic parameters not constrained to reference types should not be compared to \"null\"",
      "key": "S2955"
    },
    {
      "implementations": [
        {
          "tags": [
            "api-design"
          ],
          "severity": "Major",
          "description": "<p>In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the <code>out</code> and\n<code>in</code> modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.</p>\n<p>The <code>out</code> keyword can be used when the type parameter is used only as a return type in the interface or delegate. Doing so makes the\nparameter covariant, and allows interface and delegate instances created with a sub-type to be used as instances created with a base type. The most\nnotable example of this is <code>IEnumerable&lt;out T&gt;</code>, which allows the assignment of an <code>IEnumerable&lt;string&gt;</code> instance to\nan <code>IEnumerable&lt;object&gt;</code> variable, for instance.</p>\n<p>The <code>in</code> keyword can be used when the type parameter is used only as a method parameter in the interface or a parameter in the delegate.\nDoing so makes the parameter contravariant, and allows interface and delegate instances created with a base type to be used as instances created with\na sub-type. I.e. this is the inversion of covariance. The most notable example of this is the <code>Action&lt;in T&gt;</code> delegate, which allows\nthe assignment of an <code>Action&lt;object&gt;</code> instance to a <code>Action&lt;string&gt;</code> variable, for instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface IConsumer&lt;T&gt;  // Noncompliant\n{\n    bool Eat(T fruit);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ninterface IConsumer&lt;in T&gt;\n{\n    bool Eat(T fruit);\n}\n</pre>\n\r\n",
          "title": "Generic type parameters should be co/contravariant when possible",
          "language": "C#",
          "key": "S3246"
        }
      ],
      "tags": [
        "api-design"
      ],
      "title": "Generic type parameters should be co/contravariant when possible",
      "key": "S3246"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>The best way to determine the type of a generic method is by inference based on the type of argument that is passed to the method. This is not\npossible when a parameter type is missing from the argument list.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void MyMethod&lt;T&gt;()  // Noncompliant\n    {\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void MyMethod&lt;T&gt;(T param)\n    {\n    }\n  }\n}\n</pre>\n\r\n",
          "title": "Generic methods should provide type parameters",
          "language": "C#",
          "key": "S4018"
        }
      ],
      "tags": [],
      "title": "Generic methods should provide type parameters",
      "key": "S4018"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "unused"
          ],
          "severity": "Major",
          "description": "<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MoreMath&lt;T&gt;   // Noncompliant; &lt;T&gt; is ignored\n{\n  public int Add&lt;T&gt;(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n  {\n    return a + b;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MoreMath\n{\n  public int Add (int a, int b)\n  {\n    return a + b;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n",
          "title": "Unused type parameters should be removed",
          "language": "C#",
          "key": "S2326"
        }
      ],
      "tags": [
        "cert",
        "unused"
      ],
      "title": "Unused type parameters should be removed",
      "key": "S2326"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Making a <code>base</code> call in an overriding method is generally a good idea, but not in <code>GetHashCode</code> and <code>Equals</code> for\nclasses that directly extend <code>object</code> because those methods are based on the object reference. Meaning that no two <code>objects</code>\nthat use those <code>base</code> methods will ever be equal or have the same hash.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Point\n{\n  private readonly int x;\n  public MyClass(int x)\n  {\n    this.x = x;\n  }\n  public override int GetHashCode()\n  {\n    return x.GetHashCode() ^ base.GetHashCode(); //Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Point\n{\n  private readonly int x;\n  public MyClass(int x)\n  {\n    this.x = x;\n  }\n  public override int GetHashCode()\n  {\n    return x.GetHashCode();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't report on guard conditions checking for reference equality.</p>\n<pre>\npublic class Point\n{\n  public override bool Equals(object obj)\n  {\n    if (base.Equals(obj)) // Compliant, although it could be replaced with object.ReferenceEquals(obj, this), which is clearer\n    {\n      return true;\n    }\n    ...\n  }\n}\n</pre>\n\r\n",
          "title": "Classes directly extending \"object\" should not call \"base\" in \"GetHashCode\" or \"Equals\"",
          "language": "C#",
          "key": "S3249"
        }
      ],
      "tags": [],
      "title": "Classes directly extending \"object\" should not call \"base\" in \"GetHashCode\" or \"Equals\"",
      "key": "S3249"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p><code>GetHashCode</code> is used to file an object in a <code>Dictionary</code> or <code>Hashtable</code>. If <code>GetHashCode</code> uses\nnon-<code>readonly</code> fields and those fields change after the object is stored, the object immediately becomes mis-filed in the\n<code>Hashtable</code>. Any subsequent test to see if the object is in the <code>Hashtable</code> will return a false negative.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person\n{\n  public int age;\n  public string name;\n\n  public override int GetHashCode()\n  {\n    int hash = 12;\n    hash += this.age.GetHashCode(); // Noncompliant\n    hash += this.name.GetHashCode(); // Noncompliant\n    return hash;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person\n{\n  public readonly DateTime birthday;\n  public string name;\n\n  public override int GetHashCode()\n  {\n    int hash = 12;\n    hash += this.birthday.GetHashCode();\n    return hash;\n  }\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Make field 'readonly'</li></ul>",
          "title": "\"GetHashCode\" should not reference mutable fields",
          "language": "C#",
          "key": "S2328"
        }
      ],
      "tags": [],
      "title": "\"GetHashCode\" should not reference mutable fields",
      "key": "S2328"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>To check the type of an object there are several options:</p>\n<ul>\n  <li> <code>expr is SomeType</code> or <code>expr.GetType() == typeof(SomeType)</code> if the type is known at compile time, </li>\n  <li> <code>typeInstance.IsInstanceOfType(expr)</code> if the type is calculated during runtime. </li>\n</ul>\n<p>If runtime calculated <code>Type</code>s need to be compared:</p>\n<ul>\n  <li> <code>typeInstance1.IsAssignableFrom(typeInstance2)</code>. </li>\n</ul>\n<p>Depending on whether the type is returned by a <code>GetType()</code> or <code>typeof()</code> call, the <code>IsAssignableFrom()</code> and\n<code>IsInstanceOfType()</code> might be simplified. Similarly, if the type is <code>sealed</code>, the type comparison with <code>==</code> can be\nconverted to an <code>is</code> call. Simplifying the calls also make <code>null</code> checking unnecessary because both <code>is</code> and\n<code>IsInstanceOfType</code> performs it already.</p>\n<p>Finally, utilizing the most concise language constructs for type checking makes the code more readable, so</p>\n<ul>\n  <li> <code>expr as T != null</code> checks should be simplified to <code>expr is T</code>, and </li>\n  <li> <code>expr is T</code> should be converted to <code>expr != null</code>, when <code>expr</code> is of type <code>T</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Fruit { }\nsealed class Apple : Fruit { }\n\nclass Program\n{\n  static void Main()\n  {\n    var apple = new Apple();\n    var b = apple != null &amp;&amp; apple.GetType() == typeof (Apple); // Noncompliant\n    b = typeof(Apple).IsInstanceOfType(apple); // Noncompliant\n    if (apple != null)\n    {\n      b = typeof(Apple).IsAssignableFrom(apple.GetType()); // Noncompliant\n    }\n    var appleType = typeof (Apple);\n    if (apple != null)\n    {\n      b = appleType.IsAssignableFrom(apple.GetType()); // Noncompliant\n    }\n\n    Fruit f = apple;\n    if (f as Apple != null) // Noncompliant\n    {\n    }\n    if (apple is Apple) // Noncompliant\n    {\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Fruit { }\nsealed class Apple : Fruit { }\n\nclass Program\n{\n  static void Main()\n  {\n    var apple = new Apple();\n    var b = apple is Apple;\n    b = apple is Apple;\n    b = apple is Apple;\n    var appleType = typeof(Apple);\n    b = appleType.IsInstanceOfType(apple);\n\n    Fruit f = apple;\n    if (f is Apple)\n    {\n    }\n    if (apple != null)\n    {\n    }\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Calling <code>GetType</code> on an object of <code>Nullable&lt;T&gt;</code> type returns the underlying generic type parameter <code>T</code>, thus\na comparison with <code>typeof(Nullable&lt;T&gt;)</code> can't be simplified to use the <code>is</code> operator, which doesn't make difference\nbetween <code>T</code> and <code>T?</code>.</p>\n<pre>\nint? i = 42;\nbool condition = i.GetType() == typeof(int?); // false;\ncondition = i is int?; // true\n</pre>\n<p>No issue is reported on <code>expr is T</code> expressions if either operand of the <code>is</code> operator is a value type. In that case CS0183\nor CS0184 reports.</p>\n\r\n<h2>Code Fixes</h2><ul><li>Simplify type checking</li></ul>",
          "title": "Runtime type checking should be simplified",
          "language": "C#",
          "key": "S2219"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "Runtime type checking should be simplified",
      "key": "S2219"
    },
    {
      "implementations": [
        {
          "tags": [
            "brain-overload",
            "misra"
          ],
          "severity": "Major",
          "description": "<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>\n  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>\n</ul>\n\r\n",
          "title": "\"goto\" statement should not be used",
          "language": "C#",
          "key": "S907"
        }
      ],
      "tags": [
        "brain-overload",
        "misra"
      ],
      "title": "\"goto\" statement should not be used",
      "key": "S907"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p><code>object.Equals()</code> overrides can be optimized by checking first for reference equality between <code>this</code> and the parameter. This\ncheck can be implemented by calling <code>object.ReferenceEquals()</code> or <code>base.Equals()</code>, where <code>base</code> is\n<code>object</code>. However, using <code>base.Equals()</code> is a maintenance hazard because while it works if you extend <code>Object</code>\ndirectly, if you introduce a new base class that overrides <code>Equals</code>, it suddenly stops working.</p>\n<p>This rule raises an issue if <code>base.Equals()</code> is used but <code>base</code> is not <code>object</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Base\n{\n  private int baseField;\n\n  public override bool Equals(object other)\n  {\n    if (base.Equals(other)) // Okay; base is object\n    {\n      return true;\n    }\n\n    return this.baseField == ((Base)other).baseField;\n  }\n}\n\nclass Derived : Base\n{\n  private int derivedField;\n\n  public override bool Equals(object other)\n  {\n    if (base.Equals(other))  // Noncompliant\n    {\n      return true;\n    }\n\n    return this.derivedField == ((Derived)other).derivedField;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Base\n{\n  private int baseField;\n\n  public override bool Equals(object other)\n  {\n    if (object.ReferenceEquals(this, other))  // base.Equals is okay here, but object.ReferenceEquals is better\n    {\n      return true;\n    }\n\n    return this.baseField == ((Base)other).baseField;\n  }\n}\n\nclass Derived : Base\n{\n  private int derivedField;\n\n  public override bool Equals(object other)\n  {\n    if (object.ReferenceEquals(this, other))\n    {\n      return true;\n    }\n\n    return base.Equals(other) &amp;&amp; this.derivedField == ((Derived)other).derivedField;\n  }\n}\n</pre>\n\r\n",
          "title": "\"base.Equals\" should not be used to check for reference equality in \"Equals\" if \"base\" is not \"object\"",
          "language": "C#",
          "key": "S3397"
        }
      ],
      "tags": [],
      "title": "\"base.Equals\" should not be used to check for reference equality in \"Equals\" if \"base\" is not \"object\"",
      "key": "S3397"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert"
          ],
          "severity": "Major",
          "description": "<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>\n<ul>\n  <li> a recompile is required if the address changes </li>\n  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) </li>\n  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer </li>\n  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar ip = \"127.0.0.1\";\nvar address = IPAddress.Parse(ip);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar ip = ConfigurationManager.AppSettings[\"myapplication.ip\"];\nvar address = IPAddress.Parse(ip);\n</pre>\n<h2>Exceptions</h2>\n<p>Although \"::\" is a valid IPv6 address, the rule doesn't report on it. </p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>\n\r\n",
          "title": "IP addresses should not be hardcoded",
          "language": "C#",
          "key": "S1313"
        }
      ],
      "tags": [
        "cert"
      ],
      "title": "IP addresses should not be hardcoded",
      "key": "S1313"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "cert"
          ],
          "severity": "Critical",
          "description": "<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0)\n{\n  doSomething();\n} else if (x == 1)\n{\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0)\n{\n  doSomething();\n} else if (x == 1)\n{\n  doSomethingElse();\n} else\n{\n  throw new IllegalStateException();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PQHRAw\">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>\n\r\n",
          "title": "\"if ... else if\" constructs should end with \"else\" clauses",
          "language": "C#",
          "key": "S126"
        }
      ],
      "tags": [
        "misra",
        "cert"
      ],
      "title": "\"if ... else if\" constructs should end with \"else\" clauses",
      "key": "S126"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Major",
          "description": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1)\n{\n  if (condition2)\n  {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1 &amp;&amp; condition2)\n{\n  ...\n}\n</pre>\n\r\n",
          "title": "Collapsible \"if\" statements should be merged",
          "language": "C#",
          "key": "S1066"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "Collapsible \"if\" statements should be merged",
      "key": "S1066"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "misra"
          ],
          "severity": "Major",
          "description": "<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true)\n{\n  DoSomething();\n}\n...\nif (false)\n{\n  DoSomethingElse();\n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = Foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nbool b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDoSomething();\n...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a class=\"rule-link\" href=\"#version=6.2.0.0&ruleId=S2583\">Rule S2583</a> instead.</p>\n\r\n<h2>Code Fixes</h2><ul><li>Remove useless 'if' statement</li></ul>",
          "title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
          "language": "C#",
          "key": "S1145"
        }
      ],
      "tags": [
        "cwe",
        "misra"
      ],
      "title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
      "key": "S1145"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>The <code>IDisposable</code> interface is a mechanism to release unmanaged resources, if not implemented correctly this could result in resource\nleaks or more severe bugs.</p>\n<p>This rule raises an issue when the recommended dispose pattern, as defined by Microsoft, is not adhered to. See the <strong>Compliant\nSolution</strong> section for examples.</p>\n<p>Satisfying the rule's conditions will enable potential derived classes to correctly dispose the members of your class:</p>\n<ul>\n  <li> <code>sealed</code> classes are not checked. </li>\n  <li> If a base class implements <code>IDisposable</code> your class should not have <code>IDisposable</code> in the list of its interfaces. In such\n  cases it is recommended to override the base class's <code>protected virtual void Dispose(bool)</code> method or its equivalent. </li>\n  <li> The class should not implement <code>IDisposable</code> explicitly, e.g. the <code>Dispose()</code> method should be public. </li>\n  <li> The class should contain <code>protected virtual void Dispose(bool)</code> method. This method allows the derived classes to correctly dispose\n  the resources of this class. </li>\n  <li> The content of the <code>Dispose()</code> method should be a single invocation of <code>Dispose(true)</code>. </li>\n  <li> If the class has a finalizer, i.e. a destructor, the only code in its body should be a single invocation of <code>Dispose(false)</code>. </li>\n  <li> If the class has a finalizer, an additional call to <code>GC.SuppressFinalize(this)</code> is required in the <code>Dispose()</code> method.\n  </li>\n  <li> If the class inherits from a class that implements <code>IDisposable</code> it must call the <code>Dispose</code>, or\n  <code>Dispose(bool)</code> method of the base class from within its own implementation of <code>Dispose</code> or <code>Dispose(bool)</code>,\n  respectively. This ensures that all resources from the base class are properly released. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo1 : IDisposable // Noncompliant - provide protected overridable implementation of Dispose(bool) on Foo or mark the type as sealed.\n{\n    public void Dispose() // Noncompliant - should contain only a call to Dispose(true) and then GC.SuppressFinalize(this)\n    {\n        // Cleanup\n    }\n}\n\npublic class Foo2 : IDisposable\n{\n    void IDisposable.Dispose() // Noncompliant - Dispose() should be public\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    public virtual void Dispose() // Noncompliant - Dispose() should be sealed\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n}\n\npublic class Foo3 : IDisposable\n{\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        // Cleanup\n    }\n\n    ~Foo3() // Noncompliant - Modify Foo.~Foo() so that it calls Dispose(false) and then returns.\n    {\n        // Cleanup\n    }\n}{code}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Sealed class\npublic sealed class Foo1 : IDisposable\n{\n    public void Dispose()\n    {\n        // Cleanup\n    }\n}\n\n// Simple implementation\npublic class Foo2 : IDisposable\n{\n    public void Dispose()\n    {\n        Dispose(true);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        // Cleanup\n    }\n}\n\n// Implementation with a finalizer\npublic class Foo3 : IDisposable\n{\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        // Cleanup\n    }\n\n    ~Foo3()\n    {\n        Dispose(false);\n    }\n}\n\n// Base disposable class\npublic class Foo4 : DisposableBase\n{\n    protected override void Dispose(bool disposing)\n    {\n        // Cleanup\n        // Do not forget to call base\n        base.Dispose(disposing);\n    }\n}\n</pre>\n<h2>See</h2>\n<p>Refer to </p>\n<ul>\n  <li> <a href=\"https://msdn.microsoft.com/en-us/library/498928w2.aspx\">MSDN</a> for complete documentation on the dispose pattern. </li>\n  <li> <a href=\"http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html\">Stephen Cleary</a> for excellent Q&amp;A about\n  IDisposable </li>\n  <li> <a href=\"http://pragmateek.com/c-scope-your-global-state-changes-with-idisposable-and-the-using-statement/\">Pragma Geek</a> for additional\n  usages of IDisposable, beyond releasing resources. </li>\n</ul>\n\r\n",
          "title": "\"IDisposable\" should be implemented correctly",
          "language": "C#",
          "key": "S3881"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "\"IDisposable\" should be implemented correctly",
      "key": "S3881"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>The <code>ISerializable</code> interface is the mechanism to control the type serialization process. If not implemented correctly this could result\nin an invalid serialization and hard to detect bugs.</p>\n<p>This rules raises an issue on types that implement <code>ISerializable</code> without following the serialization pattern recommended by\nMicrosoft.</p>\n<p>Specifically this rule checks for these problems:</p>\n<ul>\n  <li> The <code>System.SerializableAttribute</code> attribute is missing. </li>\n  <li> Non-serializable fields are not marked with the <code>System.NonSerializedAttribute</code> attribute. </li>\n  <li> There is no serialization constructor. </li>\n  <li> An unsealed type has a serialization constructor that is not <code>protected</code>. </li>\n  <li> A sealed type has a serialization constructor that is not <code>private</code>. </li>\n  <li> An unsealed type has a <code>ISerializable.GetObjectData</code> that is not both <code>public</code> and <code>virtual</code>. </li>\n  <li> A derived type has a serialization constructor that does not call the <code>base</code> constructor. </li>\n  <li> A derived type has a <code>ISerializable.GetObjectData</code> method that does not call the <code>base</code> method. </li>\n  <li> A derived type has serializable fields but the <code>ISerializable.GetObjectData</code> method is not overridden. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo : ISerializable // Noncompliant the [Serializable] attribute is missing\n{\n}\n</pre>\n<p>or</p>\n<pre>\npublic class Bar\n{\n}\n\n[Serializable]\npublic class Foo : ISerializable // Noncompliant the serialization constructor is missing\n{\n    private readonly Bar bar; // Noncompliant the field is not marked with [NonSerialized]\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Bar\n{\n}\n\n[Serializable]\npublic class Foo : ISerializable\n{\n    [NonSerialized]\n    private readonly Bar bar;\n\n    public Foo()\n    {\n        // ...\n    }\n\n    protected Foo(SerializationInfo info, StreamingContext context)\n    {\n        // ...\n    }\n\n    public virtual void GetObjectData(SerializationInfo info, StreamingContext context)\n    {\n        // ...\n    }\n}\n\n[Serializable]\npublic sealed class SubFoo : Foo\n{\n    private int val;\n\n    public SubFoo()\n    {\n        // ...\n    }\n\n    private SubFoo(SerializationInfo info, StreamingContext context)\n        : base(info, context)\n    {\n        // ...\n    }\n\n    public override void GetObjectData(SerializationInfo info, StreamingContext context)\n    {\n        base.GetObjectData(info, context);\n        // ...\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Classes in test projects are not checked. </li>\n</ul>\n\r\n",
          "title": "\"ISerializable\" should be implemented correctly",
          "language": "C#",
          "key": "S3925"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "\"ISerializable\" should be implemented correctly",
      "key": "S3925"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Serialization event handlers that don't have the correct signature will simply not be called, thus bypassing any attempts to augment the automated\nde/serialization.</p>\n<p>This rule raises issue when a method marked with one of the following attributes is not <code>private</code>, does not return <code>void</code>,\nhas type parameters, or does not have a single parameter of type <code>System.Runtime.Serialization.StreamingContext</code>:</p>\n<ul>\n  <li> <code>System.Runtime.Serialization.OnSerializingAttribute</code> </li>\n  <li> <code>System.Runtime.Serialization.OnSerializedAttribute</code> </li>\n  <li> <code>System.Runtime.Serialization.OnDeserializingAttribute</code> </li>\n  <li> <code>System.Runtime.Serialization.OnDeserializedAttribute</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Serializable]\npublic class Foo\n{\n    [OnSerializing]\n    public void OnSerializing(StreamingContext context) {} // Noncompliant should be private\n\n    [OnSerialized]\n    int OnSerialized(StreamingContext context) {} // Noncompliant should return void\n\n    [OnDeserializing]\n    void OnDeserializing() {} // Noncompliant should have a single parameter of type StreamingContext\n\n    [OnSerializing]\n    public void OnSerializing2&lt;T&gt;(StreamingContext context) {} // Noncompliant should have no type parameters\n\n    [OnDeserialized]\n    void OnDeserialized(StreamingContext context, string str) {} // Noncompliant should have a single parameter of type StreamingContext\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[Serializable]\npublic class Foo\n{\n    [OnSerializing]\n    void OnSerializing(StreamingContext context) {}\n\n    [OnSerialized]\n    void OnSerialized(StreamingContext context) {}\n\n    [OnDeserializing]\n    void OnDeserializing(StreamingContext context) {}\n\n    [OnDeserialized]\n    void OnDeserialized(StreamingContext context) {}\n}\n</pre>\n\n",
          "title": "Serialization event handlers should be implemented correctly",
          "language": "C#",
          "key": "S3927"
        }
      ],
      "tags": [],
      "title": "Serialization event handlers should be implemented correctly",
      "key": "S3927"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Critical",
          "description": "<p>Most checks against an <code>IndexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values\n<code>&gt;0</code> ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>string</code>,\n<code>List</code>, or an array, consider using the <code>Contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>IndexOf</code> value retrieved from a <code>string</code>, <code>List</code>, or array is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring color = \"blue\";\nstring name = \"ishmael\";\n\nList&lt;string&gt; strings = new List&lt;string&gt;();\nstrings.Add(color);\nstrings.Add(name);\nstring[] stringArray = strings.ToArray();\n\nif (strings.IndexOf(color) &gt; 0) // Noncompliant\n{\n  // ...\n}\nif (name.IndexOf(\"ish\") &gt; 0) // Noncompliant\n{\n  // ...\n}\nif (name.IndexOf(\"ae\") &gt; 0) // Noncompliant\n{\n  // ...\n}\nif (Array.IndexOf(stringArray, color) &gt; 0) // Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstring color = \"blue\";\nstring name = \"ishmael\";\n\nList&lt;string&gt; strings = new List&lt;string&gt; ();\nstrings.Add(color);\nstrings.Add(name);\nstring[] stringArray = strings.ToArray();\n\nif (strings.IndexOf(color) &gt; -1)\n{\n  // ...\n}\nif (name.IndexOf(\"ish\") &gt;= 0)\n{\n  // ...\n}\nif (name.Contains(\"ae\"))\n{\n  // ...\n}\nif (Array.IndexOf(stringArray, color) &gt;= 0)\n{\n  // ...\n}\n</pre>\n\r\n",
          "title": "\"IndexOf\" checks should not be for positive numbers",
          "language": "C#",
          "key": "S2692"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "\"IndexOf\" checks should not be for positive numbers",
      "key": "S2692"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Blocker",
          "description": "<p>Recursion happens when control enters a loop that has no exit. This can happen a method invokes itself, when a pair of methods invoke each other,\nor when <code>goto</code>s are used to move between two segments of code. It can be a useful tool, but unless the method includes a provision to break\nout of the recursion and <code>return</code>, the recursion will continue until the stack overflows and the program crashes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint Pow(int num, int exponent)   // Noncompliant; no condition under which pow isn't re-called\n{\n  num = num * Pow(num, exponent-1);\n  return num;  // this is never reached\n}\n\nvoid InternalRecursion(int i)\n{\n  start:\n    goto end;\n  end:\n    goto start; // Noncompliant; there's no way to break out of this method\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint Pow(int num, int exponent)\n{\n  if (exponent &gt; 1) // recursion now conditional and stop-able\n  {\n    num = num * Pow(num, exponent-1);\n  }\n  return num;\n}\n</pre>\n\r\n",
          "title": "Recursion should not be infinite",
          "language": "C#",
          "key": "S2190"
        }
      ],
      "tags": [],
      "title": "Recursion should not be infinite",
      "key": "S2190"
    },
    {
      "implementations": [
        {
          "tags": [
            "design"
          ],
          "severity": "Minor",
          "description": "<p>When an interface inherits from two interfaces that both define a member with the same name, trying to access that member through the derived\ninterface will result in the compiler error <code>CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'</code>.</p>\n<p>So instead, every caller will be forced to cast instances of the derived interface to one or the other of its base interfaces to resolve the\nambiguity and be able to access the member. Instead, it is better to resolve the ambiguity in the definition of the derived interface either by:</p>\n<ul>\n  <li> renaming the member in one of the base interfaces to remove the collision </li>\n  <li> also defining that member in the derived interface. Use this only if all copies of the member are meant to hold the same value. </li>\n</ul>\n<p> </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface IBase1\n{\n  string SomeProperty { get; set; }\n}\n\npublic interface IBase2\n{\n  string SomeProperty { get; set; }\n}\n\npublic interface IDerived : IBase1, IBase2 // Noncompliant, accessing IDerived.SomeProperty is ambiguous\n{\n}\n\npublic class MyClass : IDerived\n{\n  // Implements both IBase1.SomeProperty and IBase2.SomeProperty\n  public string SomeProperty { get; set; } = \"Hello\";\n\n  public static void Main()\n  {\n    MyClass myClass = new MyClass();\n    Console.WriteLine(myClass.SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IDerived)myClass).SomeProperty); // Error CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface IDerived : IBase1, IBase2\n{\n  new string SomeProperty { get; set; }\n}\n\npublic class MyClass : IDerived\n{\n  // Implements IBase1.SomeProperty, IBase2.SomeProperty and IDerived.SomeProperty\n  public string SomeProperty { get; set; } = \"Hello\";\n\n  public static void Main()\n  {\n    MyClass myClass = new MyClass();\n    Console.WriteLine(myClass.SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IDerived)myClass).SomeProperty); // Writes \"Hello\" as expected\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic interface IBase1\n{\n  string SomePropertyOne { get; set; }\n}\n\npublic interface IBase2\n{\n  string SomePropertyTwo { get; set; }\n}\n\npublic interface IDerived : IBase1, IBase2\n{\n}\n</pre>\n\r\n",
          "title": "Interfaces should not simply inherit from base interfaces with colliding members",
          "language": "C#",
          "key": "S3444"
        }
      ],
      "tags": [
        "design"
      ],
      "title": "Interfaces should not simply inherit from base interfaces with colliding members",
      "key": "S3444"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>When a <code>static</code> constructor serves no other purpose that initializing <code>static</code> fields, it comes with an unnecessary\nperformance cost because the compiler generates a check before each <code>static</code> method or instance constructor invocation.</p>\n<p>Instead, inline initialization is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnamespace myLib\n{\n  public class Foo\n  {\n    static int i;\n    static string s;\n\n    static Foo() // Noncompliant\n    {\n      i = 3;\n      ResourceManager sm =  new ResourceManager(\"strings\", Assembly.GetExecutingAssembly());\n      s = sm.GetString(\"mystring\");\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace myLib\n{\n  public class Foo\n  {\n    static int i =3;\n    static string s = InitString();\n\n    static string InitString()\n    {\n      ResourceManager sm = new ResourceManager(\"strings\", Assembly.GetExecutingAssembly());\n      return sm.GetString(\"mystring\");\n    }\n  }\n}\n</pre>\n\r\n",
          "title": "\"static\" fields should be initialized inline",
          "language": "C#",
          "key": "S3963"
        }
      ],
      "tags": [],
      "title": "\"static\" fields should be initialized inline",
      "key": "S3963"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "cert",
            "owasp-a6",
            "sans-top25-porous"
          ],
          "severity": "Blocker",
          "description": "<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>\n<blockquote>\n  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer\n  provides the security that is needed to protect federal government information.</p>\n  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>\n</blockquote>\n<p>For similar reasons, RC2 should also be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing (var tripleDES = new TripleDESCryptoServiceProvider()) //Noncompliant\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing (var aes = new AesCryptoServiceProvider())\n{\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwAZAg\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE\">DES / DESede Unsafe</a> </li>\n</ul>\n\r\n",
          "title": "Neither DES (Data Encryption Standard) nor DESede (3DES) should be used",
          "language": "C#",
          "key": "S2278"
        }
      ],
      "tags": [
        "cwe",
        "cert",
        "owasp-a6",
        "sans-top25-porous"
      ],
      "title": "Neither DES (Data Encryption Standard) nor DESede (3DES) should be used",
      "key": "S2278"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "owasp-a6",
            "sans-top25-porous"
          ],
          "severity": "Critical",
          "description": "<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,\nit takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash\nvalue gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,\nMD4, MD6.</p>\n<p>This rule tracks usage of the <code>System.Security.Cryptography.CryptoConfig.CreateFromName()</code>, and\n<code>System.Security.Cryptography.HashAlgorithm.Create()</code> methods to instantiate MD5 or SHA-1 algorithms, and of derived class instances of\n<code>System.Security.Cryptography.SHA1</code> and <code>System.Security.Cryptography.MD5</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar hashProvider1 = new MD5CryptoServiceProvider(); //Noncompliant\nvar hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName(\"MD5\"); //Noncompliant\nvar hashProvider3 = new SHA1Managed(); //Noncompliant\nvar hashProvider4 = HashAlgorithm.Create(\"SHA1\"); //Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar hashProvider1 = new SHA256Managed();\nvar hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName(\"SHA256Managed\");\nvar hashProvider3 = HashAlgorithm.Create(\"SHA256Managed\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/328\">MITRE, CWE-328</a> - Reversible One-Way Hash </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST\">MessageDigest Is Weak</a> </li>\n</ul>\n\r\n",
          "title": "SHA-1 and Message-Digest hash algorithms should not be used",
          "language": "C#",
          "key": "S2070"
        }
      ],
      "tags": [
        "cwe",
        "owasp-a6",
        "sans-top25-porous"
      ],
      "title": "SHA-1 and Message-Digest hash algorithms should not be used",
      "key": "S2070"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>When a base type explicitly implements a public interface method, that method is only accessible in derived types through a reference to the\ncurrent instance (namely <code>this</code>). If the derived type explicitly overrides that interface method, the base implementation becomes\ninaccessible.</p>\n<p>This rule raises an issue when an unsealed, externally visible type provides an explicit method implementation of a <code>public interface</code>\nand does not provide an alternate, externally visible method with the same name.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public interface IMyInterface\n  {\n    void MyMethod();\n  }\n\n  public class Foo : IMyInterface\n  {\n    void IMyInterface.MyMethod()  // Noncompliant\n    {\n      // Do something ...\n    }\n  }\n\n  public class Bar : Foo, IMyInterface\n  {\n    public void MyMethod()\n   {\n     // Can't access base.MyMethod()\n    // ((IMyInterface)this).MyMethod() would be a recursive call\n   }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public interface IMyInterface\n  {\n    void MyMethod();\n  }\n\n  public class Foo : IMyInterface\n  {\n    void IMyInterface.MyMethod()\n    {\n      MyMethod();\n    }\n    void MyMethod()\n    {\n      // Do something ...\n    }\n  }\n\n  public class Bar : Foo, IMyInterface\n  {\n    public void MyMethod()\n   {\n      // Do something\n      base.MyMethod();\n   }\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not report a violation for an explicit implementation of <code>IDisposable.Dispose</code> when an externally visible\n<code>Close()</code> or <code>System.IDisposable.Dispose(Boolean)</code> method is provided.</p>\n\n",
          "title": "Interface methods should be callable by derived types",
          "language": "C#",
          "key": "S4039"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Interface methods should be callable by derived types",
      "key": "S4039"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>Empty interfaces are usually used as a marker or a way to identify groups of types. The preferred way to achieve this is to use custom\nattributes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public interface MyInterface // Noncompliant\n   {\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public interface MyInterface\n   {\n      void Foo();\n   }\n}\n</pre>\n\r\n",
          "title": "Interfaces should not be empty",
          "language": "C#",
          "key": "S4023"
        }
      ],
      "tags": [],
      "title": "Interfaces should not be empty",
      "key": "S4023"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "misra",
            "cert",
            "suspicious"
          ],
          "severity": "Critical",
          "description": "<p>Inappropriate casts are issues that will lead to unexpected behavior or runtime errors, such as <code>InvalidCastException</code>s. The compiler\nwill catch bad casts from one class to another, but not bad casts to interfaces. Nor will it catch nullable values that are known to be null but that\nare cast to their underlying value types anyway.</p>\n<p>It is much better to use the <code>as</code> operator because it will return <code>null</code> instead of throwing an exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface IMyInterface\n{ /* ... */ }\n\npublic class Implementer : IMyInterface\n{ /* ... */ }\n\npublic class MyClass\n{ /* ... */ }\n\npublic static class Program\n{\n  public static void Main()\n  {\n    var myclass = new MyClass();\n    var x = (IMyInterface) myclass; // Noncompliant, InvalidCastException is being thrown\n    var b = myclass is IMyInterface; // Noncompliant, always false\n\n    int? i = null;\n    var ii = (int)i; // Noncompliant, InvalidOperationException is being thrown\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface IMyInterface\n{ /* ... */ }\n\npublic class Implementer : IMyInterface\n{ /* ... */ }\n\npublic class MyClass\n{ /* ... */ }\n\npublic static class Program\n{\n  public static void Main()\n  {\n    var myclass = new MyClass();\n    var x = myclass as IMyInterface; // Compliant, but will always be null\n    var b = false;\n\n    int? i = null;\n    if (i.HasValue)\n    {\n      var ii = (int)i;\n    }\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported if the interface has no implementing class in the assembly.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 11.4 - A cast should not be performed between a pointer to object type and an integral type. </li>\n  <li> MISRA C++:2008, 5-2-3 - Casts to a base class from a derived class should not be performed on polymorphic types. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/tgAV\">CERT, EXP36-C.</a> - Do not cast pointers into more strictly aligned pointer\n  types </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/588.html\">MITRE, CWE-588</a> - Attempt to Access Child of a Non-structure Pointer </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/704.html\">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>\n</ul>\n\r\n",
          "title": "Inappropriate casts should not be made",
          "language": "C#",
          "key": "S1944"
        }
      ],
      "tags": [
        "cwe",
        "misra",
        "cert",
        "suspicious"
      ],
      "title": "Inappropriate casts should not be made",
      "key": "S1944"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Minor",
          "description": "<p>The rules for method resolution are complex and perhaps not properly understood by all coders. The <code>params</code> keyword can make method\ndeclarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different methods.</p>\n<p>This rule raises an issue when an invocation resolves to a method declaration with <code>params</code>, but could also resolve to another\nnon-<code>params</code> method too.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  private void Format(string a, params object[] b) { }\n\n  private void Format(object a, object b, object c) { }\n}\n\n// ...\nMyClass myClass = new MyClass();\n\nmyClass.Format(\"\", null, null); //Noncompliant, resolves to the first Format with params, but was that intended?\n</pre>\n\r\n",
          "title": "Method calls should not resolve ambiguously to overloads with \"params\"",
          "language": "C#",
          "key": "S3220"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Method calls should not resolve ambiguously to overloads with \"params\"",
      "key": "S3220"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Info",
          "description": "<p>This rule allows you to track the usage of the <code>SuppressMessage</code> attributes and <code>#pragma warning disable</code> mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[SuppressMessage(\"\", \"S100\")]\n...\n\n#pragma warning disable S100\n...\n#pragma warning restore S100\n</pre>\n\r\n",
          "title": "Track uses of in-source issue suppressions",
          "language": "C#",
          "key": "S1309"
        }
      ],
      "tags": [],
      "title": "Track uses of in-source issue suppressions",
      "key": "S1309"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Major",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">maximumLineLength</dt><dd><span class=\"param-description\">The maximum authorized line length.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">200</span></dd></dl><p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>\n\r\n",
          "title": "Lines should not be too long",
          "language": "C#",
          "key": "S103"
        },
        {
          "tags": [
            "convention"
          ],
          "severity": "Major",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">maximumLineLength</dt><dd><span class=\"param-description\">The maximum authorized line length.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">200</span></dd></dl><p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>\n\r\n",
          "title": "Lines should not be too long",
          "language": "VB.NET",
          "key": "S103"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Lines should not be too long",
      "key": "S103"
    },
    {
      "implementations": [
        {
          "tags": [
            "localisation",
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>String literals embedded in the source code will not be localized properly.</p>\n<p>This rule raises an issue when a literal string is passed as a parameter or property and one or more of the following cases is true:</p>\n<ul>\n  <li> The <code>LocalizableAttribute</code> attribute of the parameter or property is set to true. </li>\n  <li> The parameter or property name contains \"Text\", \"Message\", or \"Caption\". </li>\n  <li> The name of the string parameter that is passed to a <code>Console.Write</code> or <code>Console.WriteLine</code> method is either \"value\" or\n  \"format\". </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Globalization;\nusing System.Reflection;\nusing System.Windows.Forms;\n\n[assembly: NeutralResourcesLanguageAttribute(\"en-US\")]\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void SetHour(int hour)\n        {\n            if (hour &lt; 0 || hour &gt; 23)\n            {\n                MessageBox.Show(\"The valid range is 0 - 23.\"); // Noncompliant\n            }\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Globalization;\nusing System.Reflection;\nusing System.Resources;\nusing System.Windows.Forms;\n\n\n\n[assembly: NeutralResourcesLanguageAttribute(\"en-US\")]\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        ResourceManager rm;\n        public Foo()\n        {\n            rm = new ResourceManager(\"en-US\", Assembly.GetExecutingAssembly());\n        }\n\n        public void SetHour(int hour)\n        {\n            if (hour &lt; 0 || hour &gt; 23)\n            {\n                MessageBox.Show(\n                rm.GetString(\"OutOfRangeMessage\", CultureInfo.CurrentUICulture));\n            }\n        }\n    }\n}\n</pre>\n\r\n",
          "title": "Literals should not be passed as localized parameters",
          "language": "C#",
          "key": "S4055"
        }
      ],
      "tags": [
        "localisation",
        "pitfall"
      ],
      "title": "Literals should not be passed as localized parameters",
      "key": "S4055"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention",
            "misra",
            "cert",
            "pitfall"
          ],
          "severity": "Minor",
          "description": "<p>Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst long b = 0l;      // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst long b = 0L;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>\n  <li> MISRA C:2012, 7.3 - The lowercase character \"l\" shall not be used in a literal suffix </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/koAtAQ\">CERT DCL16-C.</a> - Use \"L,\" not \"l,\" to indicate a long value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/n4AtAQ\">CERT DCL16-CPP.</a> - Use \"L,\" not \"l,\" to indicate a long value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>\n\r\n<h2>Code Fixes</h2><ul><li>Make literal suffix upper case</li></ul>",
          "title": "Literal suffixes should be upper case",
          "language": "C#",
          "key": "S818"
        }
      ],
      "tags": [
        "convention",
        "misra",
        "cert",
        "pitfall"
      ],
      "title": "Literal suffixes should be upper case",
      "key": "S818"
    },
    {
      "implementations": [
        {
          "tags": [
            "multi-threading"
          ],
          "severity": "Critical",
          "description": "<p>Locking on the current object instance (i.e. <code>this</code>), or on a <code>Type</code> object increases the chance of deadlocks because any\nother thread could acquire (or attempt to acquire) the same lock for another unrelated purpose. </p>\n<p>Instead, a new, private <code>object</code> should be created and used for the lock.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void MyLockingMethod()\n{\n  lock (this) // Noncompliant\n  {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nobject lockObj = new object();\n\npublic void MyLockingMethod()\n{\n  lock (lockObj)\n  {\n    // ...\n  }\n}\n</pre>\n\r\n",
          "title": "Types and \"this\" should not be used for locking",
          "language": "C#",
          "key": "S2551"
        }
      ],
      "tags": [
        "multi-threading"
      ],
      "title": "Types and \"this\" should not be used for locking",
      "key": "S2551"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "overflow",
            "sans-top25-risky",
            "misra",
            "cert"
          ],
          "severity": "Minor",
          "description": "<p>When division is performed on <code>int</code>s, the result will always be an <code>int</code>. You can assign that result to a\n<code>double</code>, <code>float</code> or <code>decimal</code> with automatic type conversion, but having started as an <code>int</code>, the result\nwill likely not be what you expect. If the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost\nbefore the assignment. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic void Main()\n{\n  decimal dec = 3/2; // Noncompliant\n  Method(3/2); // Noncompliant\n}\n\nstatic void Method(float f) { }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic void Main()\n{\n  decimal dec = (decimal)3/2;\n  Method(3.0F/2);\n}\n\nstatic void Method(float f) { }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 5-0-8 - An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue\n  expression. </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/190\">MITRE, CWE-190</a> - Integer Overflow or Wraparound </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/woIyAQ\">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point\n  operations </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/AxE\">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1IAyAQ\">CERT, INT18-CPP.</a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Risky Resource Management </li>\n</ul>\n\r\n",
          "title": "Results of integer division should not be assigned to floating point variables",
          "language": "C#",
          "key": "S2184"
        }
      ],
      "tags": [
        "cwe",
        "overflow",
        "sans-top25-risky",
        "misra",
        "cert"
      ],
      "title": "Results of integer division should not be assigned to floating point variables",
      "key": "S2184"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>If no <code>AssemblyVersionAttribute</code> is provided, the same default version will be used for every build. Since the version number is used by\nThe .NET Framework to uniquely identify an assembly this can lead to broken dependencies.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Reflection;\n\n[assembly: AssemblyTitle(\"MyAssembly\")] // Noncompliant\n\nnamespace MyLibrary\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Reflection;\n\n[assembly: AssemblyTitle(\"MyAssembly\")]\n[assembly: AssemblyVersionAttribute(\"1.2.125.0\")]\n\nnamespace MyLibrary\n{\n}\n</pre>\n<h2>See</h2>\n<p><a href=\"https://msdn.microsoft.com/en-us/library/51ket42z.aspx\">Assembly Versioning (MSDN)</a></p>\n\r\n",
          "title": "Assemblies should have version information",
          "language": "C#",
          "key": "S3904"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Assemblies should have version information",
      "key": "S3904"
    },
    {
      "implementations": [
        {
          "tags": [
            "api-design"
          ],
          "severity": "Major",
          "description": "<p>Assemblies should conform with the Common Language Specification (CLS) in order to be usable across programming languages. To be compliant an\nassembly has to indicate it with <code>System.CLSCompliantAttribute</code>.</p>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\n[assembly:CLSCompliant(true)]\nnamespace MyLibrary\n{\n}\n</pre>\n\r\n",
          "title": "Assemblies should be marked as CLS compliant",
          "language": "C#",
          "key": "S3990"
        }
      ],
      "tags": [
        "api-design"
      ],
      "title": "Assemblies should be marked as CLS compliant",
      "key": "S3990"
    },
    {
      "implementations": [
        {
          "tags": [
            "api-design"
          ],
          "severity": "Major",
          "description": "<p>Assemblies should explicitly indicate whether they are meant to be COM visible or not. If the <code>ComVisibleAttribute</code> is not present, the\ndefault is to make the content of the assembly visible to COM clients.</p>\n<p>Note that COM visibility can be overridden for individual types and members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary  // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\n[assembly: System.Runtime.InteropServices.ComVisible(false)]\nnamespace MyLibrary\n{\n}\n</pre>\n\r\n",
          "title": "Assemblies should explicitly specify COM visibility",
          "language": "C#",
          "key": "S3992"
        }
      ],
      "tags": [
        "api-design"
      ],
      "title": "Assemblies should explicitly specify COM visibility",
      "key": "S3992"
    },
    {
      "implementations": [
        {
          "tags": [
            "performance"
          ],
          "severity": "Minor",
          "description": "<p>It is important to inform the <code>ResourceManager</code> of the language used to display the resources of the neutral culture for an assembly.\nThis improves lookup performance for the first resource loaded. </p>\n<p>This rule raises an issue when an assembly contains a <code>ResX</code>-based resource but does not have the\n<code>System.Resources.NeutralResourcesLanguageAttribute</code> applied to it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\npublic class MyClass // Noncompliant\n{\n   public static void Main()\n   {\n      string[] cultures = { \"de-DE\", \"en-us\", \"fr-FR\" };\n      Random rnd = new Random();\n      int index = rnd.Next(0, cultures.Length);\n      Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(cultures[index]);\n\n      ResourceManager rm = new ResourceManager(\"MyResources\" ,\n                                               typeof(MyClass).Assembly);\n      string greeting = rm.GetString(\"Greeting\");\n\n      Console.Write(\"Enter your name: \");\n      string name = Console.ReadLine();\n      Console.WriteLine(\"{0} {1}!\", greeting, name);\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\n[assembly:NeutralResourcesLanguageAttribute(\"en\")]\npublic class MyClass\n{\n   public static void Main()\n   {\n      string[] cultures = { \"de-DE\", \"en-us\", \"fr-FR\" };\n      Random rnd = new Random();\n      int index = rnd.Next(0, cultures.Length);\n      Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(cultures[index]);\n\n      ResourceManager rm = new ResourceManager(\"MyResources\" ,\n                                               typeof(MyClass).Assembly);\n      string greeting = rm.GetString(\"Greeting\");\n\n      Console.Write(\"Enter your name: \");\n      string name = Console.ReadLine();\n      Console.WriteLine(\"{0} {1}!\", greeting, name);\n   }\n}\n</pre>\n\n",
          "title": "Assemblies should be marked with \"NeutralResourcesLanguageAttribute\"",
          "language": "C#",
          "key": "S4026"
        }
      ],
      "tags": [
        "performance"
      ],
      "title": "Assemblies should be marked with \"NeutralResourcesLanguageAttribute\"",
      "key": "S4026"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention",
            "finding"
          ],
          "severity": "Minor",
          "description": "<p>The compiler automatically initializes class fields, auto-properties and events to their default values before setting them with any initialization\nvalues, so there is no need to explicitly set a member to its default value. Further, under the logic that cleaner code is better code, it's\nconsidered poor style to do so.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass X\n{\n  public int field = 0; // Noncompliant\n  public object o = null; // Noncompliant\n  public object MyProperty { get; set; } = null; // Noncompliant\n  public event EventHandler MyEvent = null;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass X\n{\n  public int field;\n  public object o;\n  public object MyProperty { get; set; }\n  public event EventHandler MyEvent;\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>const</code> fields are ignored.</p>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant initializer</li></ul>",
          "title": "Members should not be initialized to default values",
          "language": "C#",
          "key": "S3052"
        }
      ],
      "tags": [
        "convention",
        "finding"
      ],
      "title": "Members should not be initialized to default values",
      "key": "S3052"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>Fields, properties and events can be initialized either inline or in the constructor. Initializing them inline and in the constructor at the same\ntime is redundant; the inline initialization will be overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Person\n{\n  int age = 42; // Noncompliant\n  public Person(int age)\n  {\n    this.age = age;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Person\n{\n  int age;\n  public Person(int age)\n  {\n    this.age = age;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't report an issue if not all constructors initialize the field. If the field is initialized inline to its default value, then\n<a class=\"rule-link\" href=\"#version=6.2.0.0&ruleId=S3052\">Rule S3052</a> already reports an issue on the initialization. </p>\n\r\n",
          "title": "Member initializer values should not be redundant",
          "language": "C#",
          "key": "S3604"
        }
      ],
      "tags": [],
      "title": "Member initializer values should not be redundant",
      "key": "S3604"
    },
    {
      "implementations": [
        {
          "tags": [
            "redundant",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Overriding a method just to call the same method from the base class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>sealed</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores overrides\nof <code>Equals</code> and <code>GetHashCode</code>.</p>\n<p>NOTE: In some cases it might be dangerous to add or remove empty overrides, as they might be breaking changes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override void Method() // Noncompliant\n{\n  base.Method();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic override void Method()\n{\n  //do something else\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If there is an attribute in any level of the overriding chain, then the overridden member is ignored.</p>\n<pre>\npublic class Base\n{\n  [Required]\n  public virtual string Name { get; set; }\n}\n\npublic class Derived : Base\n{\n  public override string Name\n  {\n    get\n    {\n      return base.Name;\n    }\n    set\n    {\n      base.Name = value;\n    }\n  }\n}\n</pre>\n<p>If there is a documentation comment on the overriding method, it will be ignored:</p>\n<pre>\npublic class Foo : Bar\n{\n    /// &lt;summary&gt;\n    /// Keep this method for backwards compatibility.\n    /// &lt;/summary&gt;\n    public override void DoSomething()\n    {\n        base.DoSomething();\n    }\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant override</li></ul>",
          "title": "Overriding members should do more than simply call the same member in the base class",
          "language": "C#",
          "key": "S1185"
        }
      ],
      "tags": [
        "redundant",
        "clumsy"
      ],
      "title": "Overriding members should do more than simply call the same member in the base class",
      "key": "S1185"
    },
    {
      "implementations": [
        {
          "tags": [
            "design",
            "cert",
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>It's possible to name the members of an inner class the same as the <code>static</code> members of its enclosing class - possible, but a bad idea.\nThat's because maintainers may be confused about which members are being used where. Instead the inner class' members should be renamed and all the\nreferences updated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int A; //Noncompliant\n    public int MyProp\n    {\n      get { return A; }  // Returns inner A. Was that intended?\n    }\n  }\n}\n</pre>\n<p>After a rename</p>\n<pre>\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int B;\n    public int MyProp\n    {\n      get { return A; }  // Still compiles and runs but functionality has changed\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int InnerA;\n    public int MyProp\n    {\n      get { return InnerA; }\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>\n\r\n",
          "title": "Inner class members should not shadow outer class \"static\" or type members",
          "language": "C#",
          "key": "S3218"
        }
      ],
      "tags": [
        "design",
        "cert",
        "pitfall"
      ],
      "title": "Inner class members should not shadow outer class \"static\" or type members",
      "key": "S3218"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Minor",
          "description": "<p>Class methods and properties that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the\nmethod. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Utilities\n{\n  public int MagicNum // Noncompliant\n  {\n    get\n    {\n      return 42;\n    }\n  }\n\n  private static string magicWord = \"please\";\n  public string MagicWord  // Noncompliant\n  {\n    get\n    {\n      return magicWord;\n    }\n    set\n    {\n      magicWord = value;\n    }\n  }\n\n  public int Sum(int a, int b)  // Noncompliant\n  {\n    return a + b;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Utilities\n{\n  public static int MagicNum\n  {\n    get\n    {\n      return 42;\n    }\n  }\n\n  private static string magicWord = \"please\";\n  public static string MagicWord\n  {\n    get\n    {\n      return magicWord;\n    }\n    set\n    {\n      magicWord = value;\n    }\n  }\n\n  public static int Sum(int a, int b)\n  {\n    return a + b;\n  }\n}\n</pre>\n\r\n",
          "title": "Methods and properties that don't access instance data should be static",
          "language": "C#",
          "key": "S2325"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Methods and properties that don't access instance data should be static",
      "key": "S2325"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not method and property names are camel cased. To\nreduce noise, two consecutive upper case characters are allowed unless they form the whole name. So, <code>MyXMethod</code> is compliant, but\n<code>XM</code> on its own is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int doSomething(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int DoSomething(){...}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule ignores members in types that are marked with <code>ComImportAttribute</code> or <code>InterfaceTypeAttribute</code>. <code>extern</code>\nmethods are also excluded from the check. Furthermore, when <code>'_'</code> character is found in a name, the camel casing is not enforced.</p>\n<pre>\nvoid My_method(){...} // valid\nvoid My_method_(){...} // invalid, leading and trailing underscores are reported\n</pre>\n\r\n",
          "title": "Methods and properties should be named in camel case",
          "language": "C#",
          "key": "S100"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Methods and properties should be named in camel case",
      "key": "S100"
    },
    {
      "implementations": [
        {
          "tags": [
            "unused",
            "pitfall"
          ],
          "severity": "Blocker",
          "description": "<p>The rules for method resolution are complex and perhaps not properly understood by all coders. Having overloads with optional parameter values\nmakes the matter even harder to understand. </p>\n<p>This rule raises an issue when an overload with default parameter values is hidden by one without the optional parameters. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  void Print(string[] messages) {...}\n  void Print(string[] messages, string delimiter = \"\\n\") {...} // Noncompliant; default parameter value is hidden by overload\n}\n\n// ...\nMyClass myClass = new MyClass();\n\nmyClass.Print(new string[3] {\"yes\", \"no\", \"maybe\"});  // which version of Print will be called?\n</pre>\n\r\n",
          "title": "Method overloads with default parameter values should not overlap ",
          "language": "C#",
          "key": "S3427"
        }
      ],
      "tags": [
        "unused",
        "pitfall"
      ],
      "title": "Method overloads with default parameter values should not overlap ",
      "key": "S3427"
    },
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Critical",
          "description": "<p>Adding <code>params</code> to a method override has no effect. The compiler accepts it, but the callers won't be able to benefit from the added\nmodifier.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Base\n{\n  public virtual void Method(int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(params int[] numbers) // Noncompliant, method can't be called with params syntax.\n  {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Base\n{\n  public virtual void Method(int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(int[] numbers)\n  {\n    ...\n  }\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove the 'params' modifier</li></ul>",
          "title": "\"params\" should not be introduced on overrides",
          "language": "C#",
          "key": "S3600"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "\"params\" should not be introduced on overrides",
      "key": "S3600"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "cert",
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>Default arguments are determined by the static type of the object. If a default argument is different for a parameter in an overriding method, the\nvalue used in the call will be different when calls are made via the base or derived object, which may be contrary to developer expectations. </p>\n<p>Default parameter values are useless in explicit interface implementations, because the static type of the object will always be the implemented\ninterface. Thus, specifying default values is useless and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Base\n{\n  public virtual void Write(int i = 42)\n  {\n    Console.WriteLine(i);\n  }\n}\n\npublic class Derived : Base\n{\n  public override void Write(int i = 5) // Noncompliant\n  {\n    Console.WriteLine(i);\n  }\n}\n\npublic class Program\n{\n  public static void Main()\n  {\n    var derived = new Derived();\n    derived.Write(); // writes 5\n    Print(derived);  // writes 42; was that expected?\n  }\n  private void Print(Base item)\n  {\n    item.Write();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Base\n{\n  public virtual void Write(int i = 42)\n  {\n    Console.WriteLine(i);\n  }\n}\n\npublic class Derived : Base\n{\n  public override void Write(int i = 42)\n  {\n    Console.WriteLine(i);\n  }\n}\n\npublic class Program\n{\n  public static void Main()\n  {\n    var derived = new Derived();\n    derived.Write(); // writes 42\n    Print(derived);  // writes 42\n  }\n  private void Print(Base item)\n  {\n    item.Write();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 8-3-1 - Parameters in a overriding virtual function shall either use the same default arguments as the function they override,\n  or else shall not specify any default arguments. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/-YBS\">CERT, OOP04-CPP.</a> - Prefer not to give virtual functions default argument\n  initializers </li>\n</ul>\n\r\n<h2>Code Fixes</h2><ul><li>Synchronize default parameter value</li><li>Remove default parameter value from explicit interface implementation</li></ul>",
          "title": "Method overrides should not change parameter defaults",
          "language": "C#",
          "key": "S1006"
        }
      ],
      "tags": [
        "misra",
        "cert",
        "pitfall"
      ],
      "title": "Method overrides should not change parameter defaults",
      "key": "S1006"
    },
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Major",
          "description": "<p>Overriding methods automatically inherit the <code>params</code> behavior. To ease readability, this modifier should be explicitly used in the\noverriding method as well.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Base\n{\n  public virtual void Method(params int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(int[] numbers) // Noncompliant, the params is missing.\n  {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Base\n{\n  public virtual void Method(params int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(params int[] numbers)\n  {\n    ...\n  }\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Add the 'params' modifier</li></ul>",
          "title": "\"params\" should be used on overrides",
          "language": "C#",
          "key": "S3262"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "\"params\" should be used on overrides",
      "key": "S3262"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Minor",
          "description": "<p>There is no point in providing a default value for a parameter if callers are required to provide a value for it anyway. Thus,\n<code>[DefaultParameterValue]</code> should always be used in conjunction with <code>[Optional]</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void MyMethod([DefaultParameterValue(5)] int j) //Noncompliant, useless\n{\n  Console.WriteLine(j);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void MyMethod(int j = 5)\n{\n  Console.WriteLine(j);\n}\n</pre>\n<p>or</p>\n<pre>\npublic void MyMethod([DefaultParameterValue(5)][Optional] int j)\n{\n  Console.WriteLine(j);\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Add missing 'Optional' attribute</li></ul>",
          "title": "Parameters with \"[DefaultParameterValue]\" attributes should also be marked \"[Optional]\"",
          "language": "C#",
          "key": "S3450"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Parameters with \"[DefaultParameterValue]\" attributes should also be marked \"[Optional]\"",
      "key": "S3450"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "cert",
            "unused"
          ],
          "severity": "Major",
          "description": "<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid DoSomething(int a, int b) // \"b\" is unused\n{\n  Compute(a);\n}\n\nvoid DoSomething2(int a) // value of \"a\" is unused\n{\n  a = 10;\n  Compute(a);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid DoSomething(int a)\n{\n  Compute(a);\n}\n\nvoid DoSomething2()\n{\n  var a = 10;\n  Compute(a);\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>virtual</code>, <code>override</code> methods and interface implementations are ignored. </p>\n<pre>\noverride void DoSomething(int a, int b) // no issue reported on b\n{\n  Compute(a);\n}\n</pre>\n<p>Furthermore, the <code>this</code> parameter of extension methods is also ignored.</p>\n<pre>\npublic static class Extensions\n{\n  public static void MyHelper(this HtmlHelper helper) //no issue reported here\n  {\n    // no use of helper here\n  }\n}\n</pre>\n<p>Methods that have attributes defined on them are ignored.</p>\n<pre>\npublic class MyDto\n{\n  public string Name { get; set; }\n\n  [OnDeserialized]\n  private void OnDeserialized(StreamingContext context)\n  {\n    // ...\n  }\n}\n</pre>\n<p>Empty or unsupported methods are ignored.</p>\n<pre>\npublic void DoSomething()\n{}\n\npublic void Call()\n{\n  throw new NotImplementedException();\n}\n</pre>\n<p>And obviously no issue is raised on the <code>static void Main(string[] args)</code> method</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n<h2>Code Fixes</h2><ul><li>Remove unused parameter</li></ul>",
          "title": "Unused method parameters should be removed",
          "language": "C#",
          "key": "S1172"
        }
      ],
      "tags": [
        "misra",
        "cert",
        "unused"
      ],
      "title": "Unused method parameters should be removed",
      "key": "S1172"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "cert"
          ],
          "severity": "Major",
          "description": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  FirstActionInBlock();\n  SecondAction();  // Noncompliant; executed unconditionally\nThirdAction();\n\nif(condition) FirstActionInBlock(); SecondAction();  // Noncompliant; secondAction executed unconditionally\n\nif(condition) FirstActionInBlock();  // Noncompliant\n  SecondAction();  // Executed unconditionally\n\nstring str = null;\nfor (int i = 0; i &lt; array.Length; i++)\n  str = array[i];\n  DoTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n{\n  FirstActionInBlock();\n  SecondAction();\n}\nThirdAction();\n\nstring str = null;\nfor (int i = 0; i &lt; array.Length; i++)\n{\n  str = array[i];\n  DoTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>\n\r\n",
          "title": "Multiline blocks should be enclosed in curly braces",
          "language": "C#",
          "key": "S2681"
        }
      ],
      "tags": [
        "cwe",
        "cert"
      ],
      "title": "Multiline blocks should be enclosed in curly braces",
      "key": "S2681"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention",
            "misra",
            "cert"
          ],
          "severity": "Minor",
          "description": "<p>Declaring multiple variable on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  private int a, b; // Noncompliant\n\n  public void Method()\n  {\n    int c, d; // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  private int a;\n  private int b;\n\n  public void Method()\n  {\n    int c;\n    int d;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator\n  respectively </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7wHEAw\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VgU\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fAAhAQ\">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration\n  </li>\n</ul>\n\r\n<h2>Code Fixes</h2><ul><li>Separate declarations</li></ul>",
          "title": "Multiple variables should not be declared on the same line",
          "language": "C#",
          "key": "S1659"
        },
        {
          "tags": [
            "convention",
            "misra",
            "cert"
          ],
          "severity": "Minor",
          "description": "<p>Declaring multiple variable on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n  Public Const AAA As Integer = 5, BBB = 42, CCC As String = \"foo\"  ' Noncompliant\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n  Public Const AAA As Integer = 5\n  Public Const BBB = 42\n  Public Const CCC as String = \"foo\"\nEnd Module\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator\n  respectively </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7wHEAw\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VgU\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fAAhAQ\">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration\n  </li>\n</ul>\n\r\n<h2>Code Fixes</h2><ul><li>Separate declarations</li></ul>",
          "title": "Multiple variables should not be declared on the same line",
          "language": "VB.NET",
          "key": "S1659"
        }
      ],
      "tags": [
        "convention",
        "misra",
        "cert"
      ],
      "title": "Multiple variables should not be declared on the same line",
      "key": "S1659"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>Using the <code>readonly</code> keyword on a field means that it can't be changed after initialization. However, when applied to collections or\narrays, that's only partly true. <code>readonly</code> enforces that another instance can't be assigned to the field, but it cannot keep the contents\nfrom being updated. That means that in practice, the field value really can be changed, and the use of <code>readonly</code> on such a field is\nmisleading, and you're likely to not be getting the behavior you expect.</p>\n<p>This rule raises an issue when a non-private, <code>readonly</code> field is an array or collection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  public readonly string[] strings;  // Noncompliant\n\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n{\n  public string[] strings;\n\n  // ...\n</pre>\n<p>or</p>\n<pre>\npublic class MyClass\n{\n  private readonly string[] strings;\n\n  // ...\n</pre>\n\r\n",
          "title": "Mutable, non-private fields should not be \"readonly\"",
          "language": "C#",
          "key": "S3887"
        }
      ],
      "tags": [],
      "title": "Mutable, non-private fields should not be \"readonly\"",
      "key": "S3887"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "unpredictable",
            "cert"
          ],
          "severity": "Minor",
          "description": "<p><code>public static</code> mutable fields of classes which are accessed directly should be protected to the degree possible. This can be done by\nreducing the accessibility of the field or by changing the return type to an immutable type.</p>\n<p>This rule raises issues for <code>public static</code> fields with a type inheriting/implementing <code>System.Array</code> or\n<code>System.Collections.Generic.ICollection&lt;T&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A\n{\n  public static string[] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new List&lt;String&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported:</p>\n<ul>\n  <li> If the type of the field inherits/implements one (at least) of the following types:\n    <ul>\n      <li> <code>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</code> </li>\n      <li> <code>System.Collections.ObjectModel.ReadOnlyDictionary&lt;TKey, TValue&gt;</code> </li>\n      <li> <code>System.Collections.Immutable.IImmutableArray&lt;T&gt;</code> </li>\n      <li> <code>System.Collections.Immutable.IImmutableDictionary&lt;TKey, TValue&gt;</code> </li>\n      <li> <code>System.Collections.Immutable.IImmutableList&lt;T&gt;</code> </li>\n      <li> <code>System.Collections.Immutable.IImmutableSet&lt;T&gt;</code> </li>\n      <li> <code>System.Collections.Immutable.IImmutableStack&lt;T&gt;</code> </li>\n      <li> <code>System.Collections.Immutable.IImmutableQueue&lt;T&gt;</code> </li>\n    </ul> </li>\n  <li> If the field is <code>readonly</code> and is initialized inline with an immutable type (i.e. inherits/implements one of the types in the\n  previous list) or null. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>\n\r\n",
          "title": "Mutable fields should not be \"public static\"",
          "language": "C#",
          "key": "S2386"
        }
      ],
      "tags": [
        "cwe",
        "unpredictable",
        "cert"
      ],
      "title": "Mutable fields should not be \"public static\"",
      "key": "S2386"
    },
    {
      "implementations": [
        {
          "tags": [
            "error-handling",
            "cert",
            "suspicious"
          ],
          "severity": "Critical",
          "description": "<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>\nblock, and the masked's exception message and stack trace will be lost.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry\n{\n  /* some work which end up throwing an exception */\n  throw new ArgumentException();\n}\nfinally\n{\n  /* clean up */\n  throw new InvalidOperationException();       // Noncompliant; will mask the ArgumentException\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry\n{\n  /* some work which end up throwing an exception */\n  throw new ArgumentException();\n}\nfinally\n{\n  /* clean up */                       // Compliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/soUbAQ\">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block\n  </li>\n</ul>\n\r\n",
          "title": "Exceptions should not be thrown in finally blocks",
          "language": "C#",
          "key": "S1163"
        }
      ],
      "tags": [
        "error-handling",
        "cert",
        "suspicious"
      ],
      "title": "Exceptions should not be thrown in finally blocks",
      "key": "S1163"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Critical",
          "description": "<p><code>enum</code>s are usually used to identify distinct elements in a set of values. However <code>enum</code>s can be treated as bit fields and\nbitwise operations can be used on them to combine the values. This is a good way of specifying multiple elements of set with a single value. When\n<code>enum</code>s are used this way, it is a best practice to mark the <code>enum</code> with the <code>FlagsAttribute</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nenum Permissions\n{\n  None = 0,\n  Read = 1,\n  Write = 2,\n  Execute = 4\n}\n// ...\n\nvar x = Permissions.Read | Permissions.Write;  // Noncompliant; enum is not marked with [Flags]\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[Flags]\nenum Permissions\n{\n  None = 0,\n  Read = 1,\n  Write = 2,\n  Execute = 4\n}\n// ...\n\nvar x = Permissions.Read | Permissions.Write;\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Add [Flags] to enum declaration</li></ul>",
          "title": "Non-flags enums should not be used in bitwise operations",
          "language": "C#",
          "key": "S3265"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Non-flags enums should not be used in bitwise operations",
      "key": "S3265"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Minor",
          "description": "<p>Certain characters, once normalized to lowercase, cannot make a round trip. That is, they can not be converted from one locale to another and then\naccurately restored to their original characters.</p>\n<p>It is therefore strongly recommended to normalize strings to uppercase instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString s = myString.ToLower(CultureInfo.InvariantCulture);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString s = myString.ToUpper(CultureInfo.InvariantCulture);\n</pre>\n\n",
          "title": "Strings should be normalized to uppercase",
          "language": "C#",
          "key": "S4040"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Strings should be normalized to uppercase",
      "key": "S4040"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Minor",
          "description": "<p>Fields and auto-properties that are never assigned to hold the default values for their types. They are either pointless code or, more likely,\nmistakes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  private int field; // Noncompliant, shouldn't it be initialized? This way the value is always default(int), 0.\n  private int Property { get; set; }  // Noncompliant\n  public void Print()\n  {\n    Console.WriteLine(field); //Will always print 0\n    Console.WriteLine(Property); //Will always print 0\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  private int field;\n  private int Property { get; set; } = 42;\n  public void Print()\n  {\n    field++;\n    Console.WriteLine(field);\n    Console.WriteLine(Property);\n  }\n}\n</pre>\n\r\n",
          "title": "Unassigned members should be removed",
          "language": "C#",
          "key": "S3459"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "Unassigned members should be removed",
      "key": "S3459"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "cert"
          ],
          "severity": "Major",
          "description": "<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullReferenceException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nobject o = null;\nif (condition)\n{\n  M1(o.ToString()); // Noncompliant, always null\n}\nelse\n{\n  o = new object();\n}\nM2(o.ToString());\n</pre>\n<h2>Exceptions</h2>\n<p>Calls to extension methods are not reported because they can still operate on <code>null</code> values.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PAw\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>\n\r\n",
          "title": "Null pointers should not be dereferenced",
          "language": "C#",
          "key": "S2259"
        }
      ],
      "tags": [
        "cwe",
        "cert"
      ],
      "title": "Null pointers should not be dereferenced",
      "key": "S2259"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.</p>\n<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and\ncalled directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n  new ArgumentException(\"x must be nonnegative\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n  throw new ArgumentException(\"x must be nonnegative\");\n</pre>\n\r\n",
          "title": "Objects should not be created to be dropped immediately without being used",
          "language": "C#",
          "key": "S1848"
        }
      ],
      "tags": [],
      "title": "Objects should not be created to be dropped immediately without being used",
      "key": "S1848"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>A proper implementation of <code>IDisposable.Dispose</code> should allow for it to be called multiple times on the same object, however this is not\nguaranteed and could result in an exception being thrown.</p>\n<p>It is best not to rely on this behaviour and therefore make sure an object is disposed only once on all execution paths. This is particularly true\nwhen dealing with nested <code>using</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing (Stream stream = new FileStream(\"file.txt\", FileMode.OpenOrCreate))\n{\n    using (StreamWriter writer = new StreamWriter(stream))  // Noncompliant: 'stream' will be disposed twice\n    {\n        // Use the writer object...\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStream stream = null;\ntry\n{\n    stream = new FileStream(\"file.txt\", FileMode.OpenOrCreate);\n    using (StreamWriter writer = new StreamWriter(stream))\n    {\n        stream = null;\n        // Use the writer object...\n    }\n}\nfinally\n{\n    if(stream != null)\n        stream.Dispose();\n}\n</pre>\n\r\n",
          "title": "Objects should not be disposed more than once",
          "language": "C#",
          "key": "S3966"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Objects should not be disposed more than once",
      "key": "S3966"
    },
    {
      "implementations": [
        {
          "tags": [
            "obsolete",
            "bad-practice"
          ],
          "severity": "Major",
          "description": "<p>The <code>Obsolete</code> attribute can be applied with or without arguments, but marking something <code>Obsolete</code> without including advice\nas to why it's obsolete or on what to use instead will lead maintainers to waste time trying to figure those things out - every single time the\nwarning is encountered.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car\n{\n\n  [Obsolete]  // Noncompliant\n  public void CrankEngine(int turnsOfCrank)\n  { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car\n{\n\n  [Obsolete(\"Replaced by the automatic starter\")]\n  public void CrankEngine(int turnsOfCrank)\n  { ... }\n}\n</pre>\n\n",
          "title": "\"Obsolete\" attributes should include explanations",
          "language": "C#",
          "key": "S1123"
        }
      ],
      "tags": [
        "obsolete",
        "bad-practice"
      ],
      "title": "\"Obsolete\" attributes should include explanations",
      "key": "S1123"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>Operator overloading is convenient but unfortunately not portable across languages. To be able to access the same functionality from another\nlanguage you need to provide an alternate named method following the convention:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operator</th>\n      <th>Method Name</th>\n    </tr>\n    <tr>\n      <th><code>+</code> (binary)</th>\n      <th>Add</th>\n    </tr>\n    <tr>\n      <th><code>+=</code></th>\n      <th>Add</th>\n    </tr>\n    <tr>\n      <th><code>&amp;</code></th>\n      <th>BitwiseAnd</th>\n    </tr>\n    <tr>\n      <th><code>&amp;=</code></th>\n      <th>BitwiseAnd</th>\n    </tr>\n    <tr>\n      <th><code>|</code></th>\n      <th>BitwiseOr</th>\n    </tr>\n    <tr>\n      <th><code>=</code></th>\n      <th>BitwiseOr</th>\n    </tr>\n    <tr>\n      <th><code>--</code></th>\n      <th>Decrement</th>\n    </tr>\n    <tr>\n      <th><code>/</code></th>\n      <th>Divide</th>\n    </tr>\n    <tr>\n      <th><code>/=</code></th>\n      <th>Divide</th>\n    </tr>\n    <tr>\n      <th><code>==</code></th>\n      <th>Equals</th>\n    </tr>\n    <tr>\n      <th><code>^</code></th>\n      <th>Xor</th>\n    </tr>\n    <tr>\n      <th><code>^=</code></th>\n      <th>Xor</th>\n    </tr>\n    <tr>\n      <th><code>&gt;</code></th>\n      <th>Compare</th>\n    </tr>\n    <tr>\n      <th><code>&gt;=</code></th>\n      <th>Compare</th>\n    </tr>\n    <tr>\n      <th><code>++</code></th>\n      <th>Increment</th>\n    </tr>\n    <tr>\n      <th><code>&lt;&gt;</code></th>\n      <th>Equals</th>\n    </tr>\n    <tr>\n      <th><code>&lt;&lt;</code></th>\n      <th>LeftShift</th>\n    </tr>\n    <tr>\n      <th><code>&lt;&lt;=</code></th>\n      <th>LeftShift</th>\n    </tr>\n    <tr>\n      <th><code>&lt;</code></th>\n      <th>Compare</th>\n    </tr>\n    <tr>\n      <th><code>&lt;=</code></th>\n      <th>Compare</th>\n    </tr>\n    <tr>\n      <th><code>&amp;&amp;</code></th>\n      <th>LogicalAnd</th>\n    </tr>\n    <tr>\n      <th><code>||</code></th>\n      <th>LogicalOr</th>\n    </tr>\n    <tr>\n      <th><code>!</code></th>\n      <th>LogicalNot</th>\n    </tr>\n    <tr>\n      <th><code>%</code></th>\n      <th>Mod or Remainder</th>\n    </tr>\n    <tr>\n      <th><code>%=</code></th>\n      <th>Mod</th>\n    </tr>\n    <tr>\n      <th><code>*</code> (binary)</th>\n      <th>Multiply</th>\n    </tr>\n    <tr>\n      <th><code>*=</code></th>\n      <th>Multiply</th>\n    </tr>\n    <tr>\n      <th><code>~</code></th>\n      <th>OnesComplement</th>\n    </tr>\n    <tr>\n      <th><code>&gt;&gt;</code></th>\n      <th>RightShift</th>\n    </tr>\n    <tr>\n      <th><code>=</code></th>\n      <th>RightShift</th>\n    </tr>\n    <tr>\n      <th><code>-</code> (binary)</th>\n      <th>Subtract</th>\n    </tr>\n    <tr>\n      <th><code>-=</code></th>\n      <th>Subtract</th>\n    </tr>\n    <tr>\n      <th><code>true</code></th>\n      <th>IsTrue (Property)</th>\n    </tr>\n    <tr>\n      <th><code>-</code> (unary)</th>\n      <th>Negate</th>\n    </tr>\n    <tr>\n      <th><code>+</code> (unary)</th>\n      <th>Plus</th>\n    </tr>\n    <tr>\n      <th><code>false</code></th>\n      <th>IsTrue (Property)</th>\n    </tr>\n  </tbody>\n</table>\n<p>This rule raises an exception when there is an operator overload without the expected named alternative method.</p>\n\r\n",
          "title": "Operator overloads should have named alternatives",
          "language": "C#",
          "key": "S4069"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Operator overloads should have named alternatives",
      "key": "S4069"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>When implementing operator overloads, it is very important to make sure that all related operators and methods are consistent in their\nimplementation.</p>\n<p>The following guidelines should be followed:</p>\n<ul>\n  <li> When providing <code>operator ==</code> you should also provide <code>operator !=</code> and vice-versa. </li>\n  <li> When providing <code>operator ==</code> you should also provide <code>Equals(Object)</code> and <code>GetHashCode()</code>. </li>\n  <li> When providing <code>operator +</code> or <code>operator -</code> you should also provide <code>operator ==</code>, respecting previous\n  guidelines. </li>\n</ul>\n<p>This rule raises an issue when any of these guidelines are not followed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo // Noncompliant\n  {\n    private int left;\n    private int right;\n\n    public Foo(int l, int r)\n    {\n      this.left = l;\n      this.right = r;\n    }\n\n    public static Foo operator +(Foo a, Foo b)\n    {\n      return new Foo(a.left + b.left, a.right + b.right);\n    }\n\n    public static Foo operator -(Foo a, Foo b)\n    {\n      return new Foo(a.left - b.left, a.right - b.right);\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    private int left;\n    private int right;\n\n    public Foo(int l, int r)\n    {\n      this.left = l;\n      this.right = r;\n    }\n\n    public static Foo operator +(Foo a, Foo b)\n    {\n      return new Foo(a.left + b.left, a.right + b.right);\n    }\n\n    public static Foo operator -(Foo a, Foo b)\n    {\n      return new Foo(a.left - b.left, a.right - b.right);\n    }\n\n    public static bool operator ==(Foo a, Foo b)\n    {\n      return (a.left == b.left &amp;&amp; a.right == b.right);\n    }\n\n    public static bool operator !=(Foo a, Foo b)\n    {\n      return !(a == b);\n    }\n\n    public override bool Equals(Object obj)\n    {\n      Foo a = obj as Foo;\n      if (a == null)\n        return false;\n      return this == a;\n    }\n\n    public override int GetHashCode()\n    {\n       return (this.left * 10) + this.right;\n    }\n  }\n}\n</pre>\n\n",
          "title": "Operators should be overloaded consistently",
          "language": "C#",
          "key": "S4050"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Operators should be overloaded consistently",
      "key": "S4050"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>The overloading mechanism should be used in place of optional parameters for several reasons:</p>\n<ul>\n  <li> Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need\n  to be rebuilt, otherwise the original values will be used. </li>\n  <li> The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify\n  the values. </li>\n  <li> The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only\n  way to get the same behavior. </li>\n  <li> Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,\n  when one is defined, is the second one still optional or mandatory? </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid Notify(string company, string office = \"QJZ\") // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid Notify(string company)\n{\n  Notify(company, \"QJZ\");\n}\nvoid Notify(string company, string office)\n{\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule ignores non externally visible methods.</p>\n\r\n",
          "title": "Optional parameters should not be used",
          "language": "C#",
          "key": "S2360"
        },
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>The overloading mechanism should be used in place of optional parameters for several reasons:</p>\n<ul>\n  <li> Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need\n  to be rebuilt, otherwise the original values will be used. </li>\n  <li> The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify\n  the values. </li>\n  <li> The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only\n  way to get the same behavior. </li>\n  <li> Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,\n  when one is defined, is the second one still optional or mandatory? </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSub Notify(ByVal Company As String, Optional ByVal Office As String = \"QJZ\") ' Noncompliant\n\nEnd Sub\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSub Notify(ByVal Company As String)\n  Notify(Company, \"QJZ\")\nEnd Sub\n\nSub Notify(ByVal Company As String, ByVal Office As String)\n\nEnd Sub\n</pre>\n<h2>Exceptions</h2>\n<p>The rule ignores non externally visible methods.</p>\n\r\n",
          "title": "Optional parameters should not be used",
          "language": "VB.NET",
          "key": "S2360"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Optional parameters should not be used",
      "key": "S2360"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Generally, writing the least code that will <em>readably</em> do the job is a good thing, so omitting default parameter values seems to make sense.\nUnfortunately, when you omit them from the <code>base</code> call in an override, you're not actually getting the job done thoroughly, because you're\nignoring the value the caller passed in. The result will likely not be what the caller expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class BaseClass\n{\n    public virtual void MyMethod(int i = 1)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public override void MyMethod(int i = 1)\n    {\n        // ...\n        base.MyMethod(); // Noncompliant; caller's value is ignored\n    }\n\n    static int Main(string[] args)\n    {\n        DerivedClass dc = new DerivedClass();\n        dc.MyMethod(12);  // prints 1\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class BaseClass\n{\n    public virtual void MyMethod(int i = 1)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public override void MyMethod(int i = 1)\n    {\n        // ...\n        base.MyMethod(i);\n    }\n\n    static int Main(string[] args)\n    {\n        DerivedClass dc = new DerivedClass();\n        dc.MyMethod(12);  // prints 12\n    }\n}\n</pre>\n\r\n",
          "title": "Optional parameters should be passed to \"base\" calls",
          "language": "C#",
          "key": "S3466"
        }
      ],
      "tags": [],
      "title": "Optional parameters should be passed to \"base\" calls",
      "key": "S3466"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Critical",
          "description": "<p>The use of <code>[DefaultValue]</code> with <code>[Optional]</code> has no more effect than <code>[Optional]</code> alone. That's because\n<code>[DefaultValue]</code> doesn't actually do anything; it merely indicates the intent for the value. More than likely, <code>[DefaultValue]</code>\nwas used in confusion instead of <code>[DefaultParameterValue]</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n    public void DoStuff([Optional][DefaultValue(4)]int i, int j = 5)  // Noncompliant\n    {\n        Console.WriteLine(i);\n    }\n\n    public static void Main()\n    {\n        new MyClass().DoStuff(); // prints 0\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n    public void DoStuff([Optional][DefaultParameterValue(4)]int i, int j = 5)\n    {\n        Console.WriteLine(i);\n    }\n\n    public static void Main()\n    {\n        new MyClass().DoStuff(); // prints 4\n    }\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Change to '[DefaultParameterValue]'</li></ul>",
          "title": "\"[DefaultValue]\" should not be used when \"[DefaultParameterValue]\" is meant",
          "language": "C#",
          "key": "S3451"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "\"[DefaultValue]\" should not be used when \"[DefaultParameterValue]\" is meant",
      "key": "S3451"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>The use of <code>ref</code> or <code>out</code> in combination with <code>[Optional]</code> is both confusing and contradictory.\n<code>[Optional]</code> indicates that the parameter doesn't have to be provided, while <code>out</code> and <code>ref</code> mean that the parameter\nwill be used to return data to the caller (<code>ref</code> additionally indicates that the parameter may also be used to pass data into the\nmethod).</p>\n<p>Thus, making it <code>[Optional]</code> to provide the parameter in which you will be passing back the method results doesn't make sense. In fact,\nthe compiler will raise an error on such code. Unfortunately, it raises the error on method calls where the <code>[Optional]</code> parameter has been\nomitted, not the source of the problem, the method declaration. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n    public void DoStuff([Optional] ref int i) // Noncompliant\n    {\n        Console.WriteLine(i);\n    }\n\n    public static void Main()\n    {\n        new MyClass().DoStuff(); // This doesn't compile, CS7036 shows\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  public void DoStuff(ref int i)\n  {\n    Console.WriteLine(i);\n  }\n\n  public static void Main()\n  {\n    var i = 42;\n    new MyClass().DoStuff(ref i);\n  }\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove 'Optional' attribute</li></ul>",
          "title": "\"[Optional]\" should not be used on \"ref\" or \"out\" parameters",
          "language": "C#",
          "key": "S3447"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "\"[Optional]\" should not be used on \"ref\" or \"out\" parameters",
      "key": "S3447"
    },
    {
      "implementations": [
        {
          "tags": [
            "performance"
          ],
          "severity": "Major",
          "description": "<p>There's no point in chaining multiple <code>OrderBy</code> calls in a LINQ; only the last one will be reflected in the result because each\nsubsequent call completely reorders the list. Thus, calling <code>OrderBy</code> multiple times is a performance issue as well, because all of the\nsorting will be executed, but only the result of the last sort will be kept.</p>\n<p>Instead, use <code>ThenBy</code> for each call after the first. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = personList\n  .OrderBy(person =&gt; person.Age)\n  .OrderBy(person =&gt; person.Name)  // Noncompliant\n  .ToList();  // x is sorted by Name, not sub-sorted\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = personList\n  .OrderBy(person =&gt; person.Age)\n  .ThenBy(person =&gt; person.Name)\n  .ToList();\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Change 'OrderBy' to 'ThenBy'</li></ul>",
          "title": "Multiple \"OrderBy\" calls should not be used",
          "language": "C#",
          "key": "S3169"
        }
      ],
      "tags": [
        "performance"
      ],
      "title": "Multiple \"OrderBy\" calls should not be used",
      "key": "S3169"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "cert"
          ],
          "severity": "Minor",
          "description": "<p>There is a contract between <code>Equals(object)</code> and <code>GetHashCode()</code>: If two objects are equal according to the\n<code>Equals(object)</code> method, then calling <code>GetHashCode()</code> on each of them must yield the same result. If this is not the case, many\ncollections won't handle class instances correctly.</p>\n<p>In order to comply with the contract, <code>Equals(object)</code> and <code>GetHashCode()</code> should be either both inherited, or both\noverridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {    // Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/581.html\">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYYbAQ\">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>\n\r\n",
          "title": "\"Equals(Object)\" and \"GetHashCode()\" should be overridden in pairs",
          "language": "C#",
          "key": "S1206"
        }
      ],
      "tags": [
        "cwe",
        "cert"
      ],
      "title": "\"Equals(Object)\" and \"GetHashCode()\" should be overridden in pairs",
      "key": "S1206"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "pitfall"
          ],
          "severity": "Minor",
          "description": "<p>While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate\nresults.</p>\n<p>This rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when\n<code>this</code> was forgotten.</p>\n<p>Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or\nsome temporary variable is being accessed without going through the whole method.</p>\n<p>Moreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse\nthem.</p>\n<p>All parameters should be treated as <code>readonly</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  public string name;\n\n  public MyClass(string name)\n  {\n    name = name;                    // Noncompliant - useless identity assignment\n  }\n\n  public int Add(int a, int b)\n  {\n    a = a + b;                      // Noncompliant\n\n    /* additional logic */\n\n    return a;                       // Seems like the parameter is returned as is, what is the point?\n  }\n\n  public static void Main()\n  {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.Add(a, b);                  // Variable \"a\" will still hold 40 after this call\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  public string name;\n\n  public MyClass(string name)\n  {\n    this.name = name;               // Compliant\n  }\n\n  public int Add(int a, int b)\n  {\n    return a + b;                   // Compliant\n  }\n\n  public static void Main()\n  {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.Add(a, b);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>\n\r\n",
          "title": "Method parameters and caught exceptions should not be reassigned",
          "language": "C#",
          "key": "S1226"
        },
        {
          "tags": [
            "misra",
            "pitfall"
          ],
          "severity": "Minor",
          "description": "<p>While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate\nresults.</p>\n<p>This rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when\n<code>Me</code> was forgotten.</p>\n<p>Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or\nsome temporary variable is being accessed without going through the whole method.</p>\n<p>Moreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse\nthem.</p>\n<p>All parameters should be treated as <code>ReadOnly</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Foo(ByVal a As Integer)\n        a = 42                  ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Foo(ByVal a As Integer)\n        Dim tmp = a\n        tmp = 42                ' Compliant\n    End Sub\nEnd Module\n' or\nModule Module1\n    Sub Foo(ByRef a As Integer)\n        a = 42                  ' Compliant - it is a ByRef parameter\n    End Sub\nEnd Module\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>\n\r\n",
          "title": "Method parameters and caught exceptions should not be reassigned",
          "language": "VB.NET",
          "key": "S1226"
        }
      ],
      "tags": [
        "misra",
        "pitfall"
      ],
      "title": "Method parameters and caught exceptions should not be reassigned",
      "key": "S1226"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "cert",
            "suspicious"
          ],
          "severity": "Critical",
          "description": "<p>The name of a parameter in an externally visible method override does not match the name of the parameter in the base declaration of the method, or\nthe name of the parameter in the interface declaration of the method or the name of any other <code>partial</code> definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npartial class Point\n{\n  partial void MoveVertically(int z);\n}\n\npartial class Point\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n\n  partial void MoveVertically(int y)  // Noncompliant\n  {\n    this.y = y;\n  }\n}\n\ninterface IFoo\n{\n  void Bar(int i);\n}\n\nclass Foo : IFoo\n{\n  void Bar(int z) // Noncompliant, parameter name should be i\n  {\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npartial class Point\n{\n  partial void MoveVertically(int z);\n}\n\npartial class Point\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n\n  partial void MoveVertically(int z)\n  {\n    this.z = z;\n  }\n}\n\ninterface IFoo\n{\n  void Bar(int i);\n}\n\nclass Foo : IFoo\n{\n  void Bar(int i)\n  {\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 8.3 - For each function parameter the type given in the declaration and definition shall be identical, and the return types shall\n  also be identical </li>\n  <li> MISRA C:2004, 16.4 - The identifiers used in the declaration and definition of a function shall be identical. </li>\n  <li> MISRA C++:2008, 8-4-2 - The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the\n  declaration. </li>\n  <li> MISRA C:2012, 8.3 - All declarations of an object or function shall use the same names and type qualifiers. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/cwGTAw\">CERT, DCL40-C.</a> - Do not create incompatible declarations of the same\n  function or object </li>\n</ul>\n\r\n",
          "title": "parameter names should match base declaration and other partial definitions",
          "language": "C#",
          "key": "S927"
        }
      ],
      "tags": [
        "misra",
        "cert",
        "suspicious"
      ],
      "title": "parameter names should match base declaration and other partial definitions",
      "key": "S927"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention",
            "confusing"
          ],
          "severity": "Minor",
          "description": "<p>The name of a method should communicate what it does, and the names of its parameters should indicate how they're used. If a method and its\nparameter have the same name it is an indication that one of these rules of thumb has been broken, if not both. Even if by some trick of language\nthat's not the case, it is still likely to confuse callers and maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void Login(string login)  // Noncompliant\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void Login(string userName)\n{\n  //...\n}\n</pre>\n\r\n",
          "title": "Parameter names should not duplicate the names of their methods",
          "language": "C#",
          "key": "S3872"
        }
      ],
      "tags": [
        "convention",
        "confusing"
      ],
      "title": "Parameter names should not duplicate the names of their methods",
      "key": "S3872"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic double Divide(int divisor, int dividend)\n{\n  return divisor/dividend;\n}\n\npublic void DoTheThing()\n{\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = Divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic double Divide(int divisor, int dividend)\n{\n  return divisor/dividend;\n}\n\npublic void DoTheThing()\n{\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = Divide(divisor, dividend);\n  //...\n}\n</pre>\n\r\n",
          "title": "Parameters should be passed in the correct order",
          "language": "C#",
          "key": "S2234"
        }
      ],
      "tags": [],
      "title": "Parameters should be passed in the correct order",
      "key": "S2234"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Minor",
          "description": "<p><code>partial</code> methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking\nmethods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to\nproduction, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are\ncritical, missing functionality, the loss of which will lead to unexpected results at runtime.</p>\n<p>This rule raises an issue for partial methods for which no implementation can be found in the assembly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npartial class C\n{\n  partial void M(); //Noncompliant\n\n  void OtherM()\n  {\n    M(); //Noncompliant. Will be removed.\n  }\n}\n</pre>\n\r\n",
          "title": "Implementations should be provided for \"partial\" methods",
          "language": "C#",
          "key": "S3251"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "Implementations should be provided for \"partial\" methods",
      "key": "S3251"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Critical",
          "description": "<p>The <code>IntPtr</code> and <code>UIntPtr</code> types are used to access unmanaged memory, usually in order to use C or C++ libraries. If such a\npointer is not secured by making it <code>private</code>, <code>internal</code> or <code>readonly</code>, it can lead to a vulnerability allowing\naccess to arbitrary locations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyClass\n  {\n    public IntPtr myPointer;  // Noncompliant\n    protected UIntPtr myOtherPointer; // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyClass\n  {\n    private IntPtr myPointer;\n    protected readonly UIntPtr myOtherPointer;\n  }\n}\n</pre>\n\r\n",
          "title": "Pointers to unmanaged memory should not be visible",
          "language": "C#",
          "key": "S4000"
        }
      ],
      "tags": [],
      "title": "Pointers to unmanaged memory should not be visible",
      "key": "S4000"
    },
    {
      "implementations": [
        {
          "tags": [
            "design"
          ],
          "severity": "Minor",
          "description": "<p>A jagged array is an array whose elements are arrays. It is recommended over a multidimensional array because the arrays that make up the elements\ncan be of different sizes, which avoids wasting memory space.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint [,] myArray =  // Noncompliant\n    {\n        {1,2,3,4},\n        {5,6,7,0},\n        {8,0,0,0},\n        {9,0,0,0}\n    };\n// ...\nmyArray[1,1] = 0;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint[][] myArray =\n    {\n        new int[] {1,2,3,4},\n        new int[] {5,6,7},\n        new int[] {8},\n        new int[] {9}\n    };\n// ...\nmyArray[1][1] = 0;\n</pre>\n\r\n",
          "title": "Multidimensional arrays should not be used",
          "language": "C#",
          "key": "S3967"
        }
      ],
      "tags": [
        "design"
      ],
      "title": "Multidimensional arrays should not be used",
      "key": "S3967"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Minor",
          "description": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  private int singularField;\n\n  public void DoSomething(int x)\n  {\n    singularField = x + 5;\n\n    if (singularField == 0) { /* ... */ }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  public void DoSomething(int x)\n  {\n    int localVariable = x + 5;\n\n    if (localVariable == 0) { /* ... */ }\n  }\n}\n</pre>\n\r\n",
          "title": "Private fields only used as local variables in methods should become local variables",
          "language": "C#",
          "key": "S1450"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Private fields only used as local variables in methods should become local variables",
      "key": "S1450"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>Properties are accessed like fields which makes them easier to use.</p>\n<p>This rule raises an issue when the name of a <code>public</code> or <code>protected</code> method starts with <code>Get</code>, takes no parameter,\nand returns a value that is not an array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    private string name;\n\n    public string GetName()  // Noncompliant\n    {\n      return name;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    private string name;\n\n    public string Name\n    {\n      get\n      {\n        return name;\n      }\n    }\n  }\n}\n</pre>\n\n",
          "title": "Properties should be preferred",
          "language": "C#",
          "key": "S4049"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Properties should be preferred",
      "key": "S4049"
    },
    {
      "implementations": [
        {
          "tags": [
            "error-handling"
          ],
          "severity": "Major",
          "description": "<p>Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a\nmethod. </p>\n<p>It is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int Foo\n{\n  get\n  {\n    throw new Exception(); // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub SetFoo(ByVal value As Integer)         ' Compliant\n        ' ... some code ...\n    End Sub\nEnd Module\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is raised when the thrown exception derives from or is of type <code>NotImplementedException</code>, <code>NotSupportedException</code> or\n<code>PlatformNotSupportedException</code>.</p>\n\r\n",
          "title": "Exceptions should not be thrown from property getters",
          "language": "C#",
          "key": "S2372"
        },
        {
          "tags": [
            "error-handling"
          ],
          "severity": "Major",
          "description": "<p>Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a\nmethod. </p>\n<p>It is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Public Property Foo() As Integer\n        Get\n            Throw New Exception  ' Non-Compliant\n        End Get\n        Set(ByVal value As Integer)\n            ' ... some code ...\n        End Set\n    End Property\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub SetFoo(ByVal value As Integer)         ' Compliant\n        ' ... some code ...\n    End Sub\nEnd Module\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is raised when the thrown exception derives from or is of type <code>NotImplementedException</code>, <code>NotSupportedException</code> or\n<code>PlatformNotSupportedException</code>.</p>\n\r\n",
          "title": "Exceptions should not be thrown from property getters",
          "language": "VB.NET",
          "key": "S2372"
        }
      ],
      "tags": [
        "error-handling"
      ],
      "title": "Exceptions should not be thrown from property getters",
      "key": "S2372"
    },
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Major",
          "description": "<p>Properties and Get method should have names that makes them clearly distinguishable.</p>\n<p>This rule raises an issue when the name of a public or protected member starts with 'Get' and otherwise matches the name of a public or protected\nproperty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DateTime Date\n        {\n            get { return DateTime.Today; }\n        }\n\n        public string GetDate() // Noncompliant\n        {\n            return this.Date.ToString();\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DateTime Date\n        {\n            get { return DateTime.Today; }\n        }\n\n        public string GetDateAsString()\n        {\n            return this.Date.ToString();\n        }\n    }\n}\n</pre>\n\n",
          "title": "Property names should not match get methods",
          "language": "C#",
          "key": "S4059"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "Property names should not match get methods",
      "key": "S4059"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Trivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented properties, yielding\ncleaner and more readable code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car\n{\n  private string _make;\n  public string Make // Noncompliant\n  {\n    get { return _make; }\n    set { _make = value; }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car\n{\n  public string Make { get; set; }\n}\n</pre>\n\r\n",
          "title": "Trivial properties should be auto-implemented",
          "language": "C#",
          "key": "S2292"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "Trivial properties should be auto-implemented",
      "key": "S2292"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be\nreplaced with a setter method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Program\n{\n    public int Foo  //Non-Compliant\n    {\n        set\n        {\n            // ... some code ...\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Program\n{\n    private int foo;\n\n    public void SetFoo(int value)\n    {\n        // ... some code ...\n        foo = value;\n    }\n}\n</pre>\n<p>or</p>\n<pre>\nclass Program\n{\n  public int Foo { get; set; } // Compliant\n}\n</pre>\n\r\n",
          "title": "Write-only properties should not be used",
          "language": "C#",
          "key": "S2376"
        },
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be\nreplaced with a setter method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    WriteOnly Property Foo() As Integer ' Non-Compliant\n        Set(ByVal value As Integer)\n            ' ... some code ...\n        End Set\n    End Property\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub SetFoo(ByVal value As Integer)  ' Compliant\n        ' ... some code ...\n    End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "Write-only properties should not be used",
          "language": "VB.NET",
          "key": "S2376"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Write-only properties should not be used",
      "key": "S2376"
    },
    {
      "implementations": [
        {
          "tags": [
            "serialization"
          ],
          "severity": "Major",
          "description": "<p>Fields marked with <code>System.Runtime.Serialization.OptionalFieldAttribute</code> are serialized just like any other field. But such fields are\nignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to\nset such fields during the deserialization process.</p>\n<p>This rule raises when at least one field with the <code>System.Runtime.Serialization.OptionalFieldAttribute</code> attribute is declared but one\n(or both) of the following event handlers <code>System.Runtime.Serialization.OnDeserializingAttribute</code> or\n<code>System.Runtime.Serialization.OnDeserializedAttribute</code> are not present.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Serializable]\npublic class Foo\n{\n    [OptionalField(VersionAdded = 2)]\n    int optionalField = 5;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[Serializable]\npublic class Foo\n{\n    [OptionalField(VersionAdded = 2)]\n    int optionalField = 5;\n\n    [OnDeserializing]\n    void OnDeserializing(StreamingContext context)\n    {\n\t    optionalField = 5;\n    }\n\n    [OnDeserialized]\n    void OnDeserialized(StreamingContext context)\n    {\n        // Set optionalField if dependent on other deserialized values.\n    }\n}\n</pre>\n\r\n",
          "title": "Deserialization methods should be provided for \"OptionalField\" members",
          "language": "C#",
          "key": "S3926"
        }
      ],
      "tags": [
        "serialization"
      ],
      "title": "Deserialization methods should be provided for \"OptionalField\" members",
      "key": "S3926"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>Constant members are copied at compile time to the call sites, instead of being fetched at runtime.</p>\n<p>As an example, say you have a library with a constant <code>Version</code> member set to <code>1.0</code>, and a client application linked to it.\nThis library is then updated and <code>Version</code> is set to <code>2.0</code>. Unfortunately, even after the old DLL is replaced by the new one,\n<code>Version</code> will still be <code>1.0</code> for the client application. In order to see <code>2.0</code>, the client application would need to\nbe rebuilt against the new version of the library.</p>\n<p>This means that you should use constants to hold values that by definition will never change, such as <code>Zero</code>. In practice, those cases\nare uncommon, and therefore it is generally better to avoid constant members.</p>\n<p>This rule only reports issues on public constant fields, which can be reached from outside the defining assembly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n    public const double Version = 1.0;           // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n    public static double Version\n    {\n      get { return 1.0; }\n    }\n}\n</pre>\n\r\n",
          "title": "Public constant members should not be used",
          "language": "C#",
          "key": "S2339"
        },
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>Constant members are copied at compile time to the call sites, instead of being fetched at runtime.</p>\n<p>As an example, say you have a library with a constant <code>Version</code> member set to <code>1.0</code>, and a client application linked to it.\nThis library is then updated and <code>Version</code> is set to <code>2.0</code>. Unfortunately, even after the old DLL is replaced by the new one,\n<code>Version</code> will still be <code>1.0</code> for the client application. In order to see <code>2.0</code>, the client application would need to\nbe rebuilt against the new version of the library.</p>\n<p>This means that you should use constants to hold values that by definition will never change, such as <code>Zero</code>. In practice, those cases\nare uncommon, and therefore it is generally better to avoid constant members.</p>\n<p>This rule only reports issues on public constant fields, which can be reached from outside the defining assembly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPublic Class Foo\n    Public Const Version = 1.0           ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Class Foo\n    Public Shared ReadOnly Property Version = 1.0 ' Compliant\nEnd Class\n</pre>\n\r\n",
          "title": "Public constant members should not be used",
          "language": "VB.NET",
          "key": "S2339"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Public constant members should not be used",
      "key": "S2339"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Major",
          "description": "<p>A public method can be called from anywhere, which means you should validate parameters to be within the expected constraints. In general, checking\nagainst <code>null</code> is recommended defensive programming.</p>\n<p>This rule raises an issue when a parameter of public method is not validated against <code>null</code> before being dereferenced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n    private MyOtherClass other;\n\n    public void Foo(MyOtherClass other)\n    {\n        this.other = other; // Compliant: other not being dereferenced\n    }\n\n    public void Bar(MyOtherClass other)\n    {\n        this.other = other.Clone(); // Noncompliant\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n{\n    private MyOtherClass other;\n\n    public void Foo(MyOtherClass other)\n    {\n        this.other = other; // Compliant: other not being dereferenced\n    }\n\n    public void Bar(MyOtherClass other)\n    {\n        if (other != null)\n        {\n            this.other = other.Clone();\n        }\n    }\n}\n</pre>\n\r\n",
          "title": "Arguments of public methods should be validated against null",
          "language": "C#",
          "key": "S3900"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Arguments of public methods should be validated against null",
      "key": "S3900"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Blocker",
          "description": "<p>Exposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to\nuse them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used\ninternally.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Program\n{\n    public void WriteMatrix(int[][] matrix) // Non-Compliant\n    {\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Matrix\n{\n    // ...\n}\n\npublic class Program\n{\n    public void WriteMatrix(Matrix matrix) // Compliant\n    {\n    }\n}\n</pre>\n\r\n",
          "title": "Public methods should not have multidimensional array parameters",
          "language": "C#",
          "key": "S2368"
        },
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Blocker",
          "description": "<p>Exposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to\nuse them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used\ninternally.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub WriteMatrix(ByVal matrix As Integer()()) ' Non-Compliant\n        ' ...\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Matrix\n    ' ...\nEnd Class\n\nModule Module1\n    Sub WriteMatrix(ByVal matrix As Matrix)      ' Compliant\n        ' ...\n    End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "Public methods should not have multidimensional array parameters",
          "language": "VB.NET",
          "key": "S2368"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Public methods should not have multidimensional array parameters",
      "key": "S2368"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Marking a method with the <code>[Pure]</code> attribute specifies that the method doesn't make any visible changes; thus, the method should return\na result, otherwise the call to the method should be equal to no-operation. So <code>[Pure]</code> on a <code>void</code> method is either a mistake,\nor the method doesn't do any meaningful task.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Person\n{\n  private int age;\n  [Pure] // Noncompliant. In this case the method makes a possibly visible state change\n  void ConfigureAge(int age)\n  {\n    ...\n    this.age = age;\n  }\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Person\n{\n  private int age;\n\n  void ConfigureAge(int age)\n  {\n    ...\n    this.age = age;\n  }\n  ...\n}\n</pre>\n\r\n",
          "title": "Methods with \"Pure\" attribute should return a value ",
          "language": "C#",
          "key": "S3603"
        }
      ],
      "tags": [],
      "title": "Methods with \"Pure\" attribute should return a value ",
      "key": "S3603"
    },
    {
      "implementations": [
        {
          "tags": [
            "finding",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Since the compiler will automatically invoke the base type's no-argument constructor, there's no need to specify its invocation explicitly. Also,\nwhen only a single <code>public</code> parameterless constructor is defined in a class, then that constructor can be removed because the compiler\nwould generate it automatically. Similarly, empty <code>static</code> constructors and empty destructors are also wasted keystrokes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass X\n{\n  public X() { } // Noncompliant\n  static X() { }  // Noncompliant\n  ~X() { } // Noncompliant\n\n  ...\n}\n\nclass Y : X\n{\n  public Y(int parameter) : base() // Noncompliant\n  {\n    /* does something with the parameter */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass X\n{\n  ...\n}\n\nclass Y : X\n{\n  public Y(int parameter)\n  {\n    /* does something with the parameter */\n  }\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove 'base()' call</li><li>Remove constructor</li><li>Remove destructor</li></ul>",
          "title": "Constructor and destructor declarations should not be redundant",
          "language": "C#",
          "key": "S3253"
        }
      ],
      "tags": [
        "finding",
        "clumsy"
      ],
      "title": "Constructor and destructor declarations should not be redundant",
      "key": "S3253"
    },
    {
      "implementations": [
        {
          "tags": [
            "finding",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Specifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void M(int x, int y=5, int z = 7) { /* ... */ }\n\n// ...\nM(1, 5); //Noncompliant, y has the default value\nM(1, z: 7); //Noncompliant, z has the default value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void M(int x, int y=5, int z = 7) { /* ... */ }\n\n// ...\nM(1);\nM(1);\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant arguments</li><li>Remove redundant arguments with adding named arguments</li></ul>",
          "title": "Default parameter values should not be passed as arguments",
          "language": "C#",
          "key": "S3254"
        }
      ],
      "tags": [
        "finding",
        "clumsy"
      ],
      "title": "Default parameter values should not be passed as arguments",
      "key": "S3254"
    },
    {
      "implementations": [
        {
          "tags": [
            "redundant",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int Example(int i)\n{\n  return (int) (i + 42); // Noncompliant\n}\npublic IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)\n{\n  return coll.Reverse().OfType&lt;int&gt;(); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int Example(int i)\n{\n  return i + 42;\n}\npublic IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)\n{\n  return coll.Reverse();\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant cast</li></ul>",
          "title": "Redundant casts should not be used",
          "language": "C#",
          "key": "S1905"
        }
      ],
      "tags": [
        "redundant",
        "clumsy"
      ],
      "title": "Redundant casts should not be used",
      "key": "S1905"
    },
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Minor",
          "description": "<p>There's no point in checking a variable against the value you're about to assign it. Save the cycles and lines of code, and simply perform the\nassignment.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x != a)  // Noncompliant; why bother?\n{\n  x = a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = a;\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant conditional</li></ul>",
          "title": "Variables should not be checked against the values they're about to be assigned",
          "language": "C#",
          "key": "S3440"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "Variables should not be checked against the values they're about to be assigned",
      "key": "S3440"
    },
    {
      "implementations": [
        {
          "tags": [
            "finding",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Unnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified.</p>\n<p>Specifically the following should be omitted when they can be inferred:</p>\n<ul>\n  <li> array element type </li>\n  <li> array size </li>\n  <li> <code>new DelegateType</code> </li>\n  <li> <code>new Nullable&lt;Type&gt;</code> </li>\n  <li> object or collection initializers (<code>{</code>}) </li>\n  <li> type of lambda expression parameters </li>\n  <li> parameter declarations of anonymous methods when the parameters are not used. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar l = new List&lt;int&gt;() {}; // Noncompliant, {} can be removed\nvar o = new object() {}; // Noncompliant, {} can be removed\n\nvar ints = new int[] {1, 2, 3}; // Noncompliant, int can be omitted\nints = new int[3] {1, 2, 3}; // Noncompliant, the size specification can be removed\n\nint? i = new int?(5); // Noncompliant new int? could be omitted, it can be inferred from the declaration, and there's implicit conversion from T to T?\nvar j = new int?(5);\n\nFunc&lt;int, int&gt; f1 = (int i) =&gt; 1; //Noncompliant, can be simplified\n\nclass Class\n{\n    private event EventHandler MyEvent;\n\n    public Class()\n    {\n        MyEvent += new EventHandler((a,b)=&gt;{ }); // Noncompliant, needlessly verbose\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar l = new List&lt;int&gt;();\nvar o = new object();\n\nvar ints = new [] {1, 2, 3};\nints = new [] {1, 2, 3};\n\nint? i = 5;\nvar j = new int?(5);\n\nFunc&lt;int, int&gt; f1 = (i) =&gt; 1;\n\nclass Class\n{\n    private event EventHandler MyEvent;\n\n    public Class()\n    {\n        MyEvent += (a,b)=&gt;{ };\n    }\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant array size</li><li>Remove redundant array type</li><li>Remove redundant type declaration</li><li>Remove redundant explicit delegate creation</li><li>Remove redundant explicit nullable creation</li><li>Remove redundant object initializer</li><li>Remove redundant parameter list</li></ul>",
          "title": "Declarations and initializations should be as concise as possible",
          "language": "C#",
          "key": "S3257"
        }
      ],
      "tags": [
        "finding",
        "clumsy"
      ],
      "title": "Declarations and initializations should be as concise as possible",
      "key": "S3257"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>An inheritance list entry is redundant if:</p>\n<ul>\n  <li> It is <code>Object</code> - all classes extend <code>Object</code> implicitly. </li>\n  <li> It is <code>int</code> for an <code>enum</code> </li>\n  <li> It is a base class of another listed inheritance. </li>\n</ul>\n<p>Such redundant declarations should be removed because they needlessly clutter the code and can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass : Object  // Noncompliant\n\nenum MyEnum : int  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n\nenum MyEnum\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant declaration</li></ul>",
          "title": "Inheritance list should not be redundant",
          "language": "C#",
          "key": "S1939"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "Inheritance list should not be redundant",
      "key": "S1939"
    },
    {
      "implementations": [
        {
          "tags": [
            "finding",
            "redundant",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Jump statements, such as <code>return</code>, <code>yield break</code>, <code>goto</code>, and <code>continue</code> let you change the default\nflow of program execution, but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid Foo()\n{\n  goto A; // Noncompliant\n  A:\n  while (condition1)\n  {\n    if (condition2)\n    {\n      continue; // Noncompliant\n    }\n    else\n    {\n      DoTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid Foo()\n{\n  while (condition1)\n  {\n    if (!condition2)\n    {\n      DoTheThing();\n    }\n  }\n}\n</pre>\n\r\n",
          "title": "Jump statements should not be redundant",
          "language": "C#",
          "key": "S3626"
        }
      ],
      "tags": [
        "finding",
        "redundant",
        "clumsy"
      ],
      "title": "Jump statements should not be redundant",
      "key": "S3626"
    },
    {
      "implementations": [
        {
          "tags": [
            "unused",
            "finding",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Unnecessary keywords simply clutter the code and should be removed. Specifically:</p>\n<ul>\n  <li> <code>partial</code> on type declarations that are completely defined in one place </li>\n  <li> <code>sealed</code> on members of <code>sealed</code> classes </li>\n  <li> <code>unsafe</code> method or block inside construct already marked with <code>unsafe</code>, or when there are no <code>unsafe</code>\n  constructs in the block </li>\n  <li> <code>checked</code> and <code>unchecked</code> blocks with no integral-type arithmetic operations </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic partial class MyClass // Noncompliant\n{\n  public virtual void Method()\n  {\n  }\n}\n\npublic sealed class MyOtherClass : MyClass\n{\n  public sealed override void Method() // Noncompliant\n  {\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n{\n  public virtual void Method()\n  {\n  }\n}\n\npublic sealed class MyOtherClass : MyClass\n{\n  public override void Method()\n  {\n  }\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant 'unsafe' modifier</li><li>Remove redundant 'checked' and 'unchecked' modifier</li><li>Remove redundant 'partial' modifier</li><li>Remove redundant 'sealed' modifier</li></ul>",
          "title": "Redundant modifiers should not be used",
          "language": "C#",
          "key": "S2333"
        }
      ],
      "tags": [
        "unused",
        "finding",
        "clumsy"
      ],
      "title": "Redundant modifiers should not be used",
      "key": "S2333"
    },
    {
      "implementations": [
        {
          "tags": [
            "redundant"
          ],
          "severity": "Major",
          "description": "<p>Calling <code>GetType()</code> on a nullable object returns the underlying value type. Thus, comparing the returned <code>Type</code> object to\n<code>typeof(Nullable&lt;SomeType&gt;)</code> doesn't make sense. The comparison either throws an exception or the result can be known at compile\ntime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint? nullable = 42;\nbool comparison = nullable.GetType() == typeof(Nullable&lt;int&gt;); // Noncompliant, always false\ncomparison = nullable.GetType() != typeof(Nullable&lt;int&gt;); // Noncompliant, always true\n\nnullable = null;\ncomparison = nullable.GetType() != typeof(Nullable&lt;int&gt;); // Noncompliant, calling GetType on a null always throws an exception\n</pre>\n\r\n",
          "title": "Nullable type comparison should not be redundant",
          "language": "C#",
          "key": "S3610"
        }
      ],
      "tags": [
        "redundant"
      ],
      "title": "Nullable type comparison should not be redundant",
      "key": "S3610"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "unused",
            "finding"
          ],
          "severity": "Minor",
          "description": "<p>Redundant parentheses are simply wasted keystrokes, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[MyAttribute()] //Noncompliant\nclass MyClass\n{\n  public int MyProperty { get; set; }\n  public static MyClass CreateNew(int propertyValue)\n  {\n    return new MyClass() //Noncompliant\n    {\n      MyProperty = propertyValue\n    };\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[MyAttribute]\nclass MyClass\n{\n  public int MyProperty { get; set; }\n  public static MyClass CreateNew(int propertyValue)\n  {\n    return new MyClass\n    {\n      MyProperty = propertyValue\n    };\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant parentheses</li></ul>",
          "title": "Redundant parentheses should not be used",
          "language": "C#",
          "key": "S3235"
        }
      ],
      "tags": [
        "cert",
        "unused",
        "finding"
      ],
      "title": "Redundant parentheses should not be used",
      "key": "S3235"
    },
    {
      "implementations": [
        {
          "tags": [
            "finding",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>When an anonymous type's properties are copied from properties or variables with the same names, it yields cleaner code to omit the new type's\nproperty name and the assignment operator.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar X = 5;\n\nvar anon = new\n{\n  X = X, //Noncompliant, the new object would have the same property without the \"X =\" part.\n  Y = \"my string\"\n};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar X = 5;\n\nvar anon = new\n{\n  X,\n  Y = \"my string\"\n};\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant explicit property names</li></ul>",
          "title": "Redundant property names should be omitted in anonymous classes",
          "language": "C#",
          "key": "S3441"
        }
      ],
      "tags": [
        "finding",
        "clumsy"
      ],
      "title": "Redundant property names should be omitted in anonymous classes",
      "key": "S3441"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p><code>ToCharArray</code> can be omitted when the operation on the array could have been done directly on the string, such as when iterating over\nthe characters in a string, and when accessing a character in a string via an array index. In those cases, explicit <code>ToCharArray</code> calls\nshould be omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring str = \"some string\";\nforeach (var c in str.ToCharArray()) // Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstring str = \"some string\";\nforeach (var c in str)\n{\n  // ...\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant 'ToCharArray' call</li></ul>",
          "title": "\"string.ToCharArray()\" should not be called redundantly",
          "language": "C#",
          "key": "S3456"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "\"string.ToCharArray()\" should not be called redundantly",
      "key": "S3456"
    },
    {
      "implementations": [
        {
          "tags": [
            "finding",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. Similarly, explicitly\ninvoking <code>ToString()</code> when the compiler would do it implicitly is also needless code-bloat.</p>\n<p>This rule raises an issue when <code>ToString()</code> is invoked:</p>\n<ul>\n  <li> on a <code>string</code> </li>\n  <li> on a non-<code>string</code> operand to concatenation </li>\n  <li> on an argument to <code>string.Format</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar s = \"foo\";\nvar t = \"fee fie foe \" + s.ToString();  // Noncompliant\nvar someObject = new object();\nvar u = \"\" + someObject.ToString(); // Noncompliant\nvar v = string.Format(\"{0}\", someObject.ToString()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar s = \"foo\";\nvar t = \"fee fie foe \" + s;\nvar someObject = new object();\nvar u = \"\" + someObject;\nvar v = string.Format(\"{0}\", someObject);\n</pre>\n<h2>Exceptions</h2>\n<p>The rule does not report on value types, where leaving off the <code>ToString()</code> call would result in automatic boxing.</p>\n<pre>\nvar v = string.Format(\"{0}\", 1.ToString());\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove redundant 'ToString' call</li></ul>",
          "title": "\"ToString()\" calls should not be redundant",
          "language": "C#",
          "key": "S1858"
        }
      ],
      "tags": [
        "finding",
        "clumsy"
      ],
      "title": "\"ToString()\" calls should not be redundant",
      "key": "S1858"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "cert",
            "suspicious"
          ],
          "severity": "Minor",
          "description": "<p>Using the equality <code>==</code> and inequality <code>!=</code> operators to compare two objects generally works. The operators can be\noverloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then\n<code>==</code> resolves to reference equality, which may result in unexpected behavior if implementing classes override <code>Equals</code>.\nSimilarly, when a class overrides <code>Equals</code>, but instances are compared with non-overloaded <code>==</code>, there is a high chance that\nvalue comparison was meant instead of the reference one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface IMyInterface\n{\n}\n\npublic class MyClass : IMyInterface\n{\n    public override bool Equals(object obj)\n    {\n        //...\n    }\n}\n\npublic class Program\n{\n    public static void Method(IMyInterface instance1, IMyInterface instance2)\n    {\n        if (instance1 == instance2) // Noncompliant, will do reference equality check, but was that intended? MyClass overrides Equals.\n        {\n            Console.WriteLine(\"Equal\");\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface IMyInterface\n{\n}\n\npublic class MyClass : IMyInterface\n{\n    public override bool Equals(object obj)\n    {\n        //...\n    }\n}\n\npublic class Program\n{\n    public static void Method(IMyInterface instance1, IMyInterface instance2)\n    {\n        if (object.Equals(instance1, instance2)) // object.Equals checks for null and then calls the instance based Equals, so MyClass.Equals\n        {\n            Console.WriteLine(\"Equal\");\n        }\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule does not report on comparisons of <code>System.Type</code> instances and on comparisons inside <code>Equals</code> overrides.</p>\n<p>It also does not raise an issue when one of the operands is <code>null</code> nor when one of the operand is cast to <code>object</code> (because\nin this case we want to ensure reference equality even if some <code>==</code> overload is present).</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wwD1AQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/8AEqAQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>\n\r\n",
          "title": "\"==\" should not be used when \"Equals\" is overridden",
          "language": "C#",
          "key": "S1698"
        }
      ],
      "tags": [
        "cwe",
        "cert",
        "suspicious"
      ],
      "title": "\"==\" should not be used when \"Equals\" is overridden",
      "key": "S1698"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Using <code>Object.ReferenceEquals</code> to compare the references of two value types simply won't return the expected results most of the time\nbecause such types are passed by value, not by reference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  private MyStruct myStruct;\n\n  public void DoSomething(MyStruct s1) {\n    int a = 1;\n    int b = 1;\n\n    if (Object.ReferenceEquals(myStruct, s1))  // Noncompliant; this can never be true\n    {\n      // ...\n    }\n    else if (Object.ReferenceEquals(a,b)) // Noncompliant\n    {\n      // ...\n    }\n  }\n}\n</pre>\n\r\n",
          "title": "\"Object.ReferenceEquals\" should not be used for value types",
          "language": "C#",
          "key": "S2995"
        }
      ],
      "tags": [],
      "title": "\"Object.ReferenceEquals\" should not be used for value types",
      "key": "S2995"
    },
    {
      "implementations": [
        {
          "tags": [
            "api-design"
          ],
          "severity": "Major",
          "description": "<p>When defining custom attributes, <code>System.AttributeUsageAttribute</code> must be used to indicate where the attribute can be applied. This will\ndetermine its valid locations in the code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n\n   public sealed class MyAttribute :Attribute // Noncompliant\n   {\n      string text;\n\n      public MyAttribute(string myText)\n      {\n         text = myText;\n      }\n      public string Text\n      {\n         get\n         {\n            return text;\n         }\n      }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n\n   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate)]\n   public sealed class MyAttribute :Attribute\n   {\n      string text;\n\n      public MyAttribute(string myText)\n      {\n         text = myText;\n      }\n      public string Text\n      {\n         get\n         {\n            return text;\n         }\n      }\n   }\n}\n</pre>\n\r\n",
          "title": "Custom attributes should be marked with \"System.AttributeUsageAttribute\"",
          "language": "C#",
          "key": "S3993"
        }
      ],
      "tags": [
        "api-design"
      ],
      "title": "Custom attributes should be marked with \"System.AttributeUsageAttribute\"",
      "key": "S3993"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "cert"
          ],
          "severity": "Major",
          "description": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected.</p>\n<p>This rule raises an issue when the results of the following methods are ignored:</p>\n<ul>\n  <li> LINQ method, </li>\n  <li> <code>[Pure]</code> method, </li>\n  <li> any method on <code>string</code>, <code>int</code>, ..., <code>System.Collections.Immutable.ImmutableArray&lt;T&gt;</code>,\n  <code>ImmutableHashSet&lt;T&gt;</code>, ... </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncoll.Where(i =&gt; i &gt; 5).Select(i =&gt; i*i); // Noncompliant\n\"this string\".Equals(\"other string\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar res = coll.Where(i =&gt; i &gt; 5).Select(i =&gt; i*i);\nvar isEqual = \"this string\".Equals(\"other string\");\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't report issues on method calls with <code>out</code> or <code>ref</code> arguments.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>\n\r\n",
          "title": "Return values from functions without side effects should not be ignored",
          "language": "C#",
          "key": "S2201"
        }
      ],
      "tags": [
        "misra",
        "cert"
      ],
      "title": "Return values from functions without side effects should not be ignored",
      "key": "S2201"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=\\!</code> ) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>\\!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>\n\r\n",
          "title": "\"=+\" should not be used instead of \"+=\"",
          "language": "C#",
          "key": "S2757"
        }
      ],
      "tags": [],
      "title": "\"=+\" should not be used instead of \"+=\"",
      "key": "S2757"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "owasp-a1",
            "sans-top25-insecure",
            "cert",
            "sql"
          ],
          "severity": "Blocker",
          "description": "<p>Applications that execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an\nattacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed.</p>\n<p>This rule raises an issue when user-provided values are concatenated into SQL statements.</p>\n<p>If user input must be part of the query, use one of the following mitigations, listed in order of effectiveness:</p>\n<ul>\n  <li> Use a stored procedure. </li>\n  <li> Use a parameterized command string. </li>\n  <li> Validate the user input for both type and content before you build the command string. </li>\n</ul>\n<p>The following .NET Framework types implement the <code>CommandText</code> property or provide constructors that set the property by using a string\nargument.</p>\n<ul>\n  <li> <code>System.Data.Odbc.OdbcCommand</code> </li>\n  <li> <code>System.Data.Odbc.OdbcDataAdapter</code> </li>\n  <li> <code>System.Data.OleDb.OleDbCommand</code> </li>\n  <li> <code>System.Data.OleDb.OleDbDataAdapter</code> </li>\n  <li> <code>System.Data.OracleClient.OracleCommand</code> </li>\n  <li> <code>System.Data.OracleClient.OracleDataAdapter</code> </li>\n  <li> <code>System.Data.SqlServerCe.SqlCeCommand</code> </li>\n  <li> <code>System.Data.SqlServerCe.SqlCeDataAdapter</code> </li>\n  <li> <code>System.Data.SqlClient.SqlCommand</code> </li>\n  <li> <code>System.Data.SqlClient.SqlDataAdapter</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Data;\nusing System.Data.SqlClient;\n\nnamespace MyLibrary\n{\n   public class Foo\n   {\n      public object Bar(string connection, string name, string password)\n      {\n         SqlConnection someConnection = new SqlConnection(connection);\n         SqlCommand someCommand = new SqlCommand();\n         someCommand.Connection = someConnection;\n\n         someCommand.CommandText = \"SELECT AccountNumber FROM Users \" +\n            \"WHERE Username='\" + name +\n            \"' AND Password='\" + password + \"'\"; // Noncompliant\n\n         someConnection.Open();\n         object accountNumber = someCommand.ExecuteScalar();\n         someConnection.Close();\n         return accountNumber;\n      }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Data;\nusing System.Data.SqlClient;\n\nnamespace MyLibrary\n{\n   public class Foo\n   {\n      public object Bar(string connection, string name, string password)\n      {\n         SqlConnection someConnection = new SqlConnection(connection);\n         SqlCommand someCommand = new SqlCommand();\n         someCommand.Connection = someConnection;\n\n         someCommand.Parameters.Add(\n            \"@username\", SqlDbType.NChar).Value = name;\n         someCommand.Parameters.Add(\n            \"@password\", SqlDbType.NChar).Value = password;\n         someCommand.CommandText = \"SELECT AccountNumber FROM Users \" +\n            \"WHERE Username=@username AND Password=@password\";\n\n         someConnection.Open();\n         object accountNumber = someCommand.ExecuteScalar();\n         someConnection.Close();\n         return accountNumber;\n      }\n   }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/89\">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/564.html\">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/943.html\">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PgIRAg\">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rules <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>\n\n",
          "title": "User-provided values should be sanitized before use in SQL statements",
          "language": "C#",
          "key": "S3649"
        }
      ],
      "tags": [
        "cwe",
        "owasp-a1",
        "sans-top25-insecure",
        "cert",
        "sql"
      ],
      "title": "User-provided values should be sanitized before use in SQL statements",
      "key": "S3649"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>\n\r\n",
          "title": "A close curly brace should be located at the beginning of a line",
          "language": "C#",
          "key": "S1109"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "A close curly brace should be located at the beginning of a line",
      "key": "S1109"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Blocker",
          "description": "<p><code>CoSetProxyBlanket</code> and <code>CoInitializeSecurity</code> both work to set the permissions context in which the process invoked\nimmediately after is executed. Calling them from within that process is useless because it's to late at that point; the permissions context has\nalready been set.</p>\n<p>Specifically, these methods are meant to be called from a non-managed code such as a C++ wrapper that then invokes the managed, i.e. C# or VB.NET,\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[DllImport(\"ole32.dll\")]\nstatic extern int CoSetProxyBlanket([MarshalAs(UnmanagedType.IUnknown)]object pProxy, uint dwAuthnSvc, uint dwAuthzSvc,\n\t[MarshalAs(UnmanagedType.LPWStr)] string pServerPrincName, uint dwAuthnLevel, uint dwImpLevel, IntPtr pAuthInfo,\n\tuint dwCapabilities);\n\npublic enum RpcAuthnLevel\n{\n\tDefault = 0,\n\tNone = 1,\n\tConnect = 2,\n\tCall = 3,\n\tPkt = 4,\n\tPktIntegrity = 5,\n\tPktPrivacy = 6\n}\n\npublic enum RpcImpLevel\n{\n\tDefault = 0,\n\tAnonymous = 1,\n\tIdentify = 2,\n\tImpersonate = 3,\n\tDelegate = 4\n}\n\npublic enum EoAuthnCap\n{\n\tNone = 0x00,\n\tMutualAuth = 0x01,\n\tStaticCloaking = 0x20,\n\tDynamicCloaking = 0x40,\n\tAnyAuthority = 0x80,\n\tMakeFullSIC = 0x100,\n\tDefault = 0x800,\n\tSecureRefs = 0x02,\n\tAccessControl = 0x04,\n\tAppID = 0x08,\n\tDynamic = 0x10,\n\tRequireFullSIC = 0x200,\n\tAutoImpersonate = 0x400,\n\tNoCustomMarshal = 0x2000,\n\tDisableAAA = 0x1000\n}\n\n[DllImport(\"ole32.dll\")]\npublic static extern int CoInitializeSecurity(IntPtr pVoid, int cAuthSvc, IntPtr asAuthSvc, IntPtr pReserved1,\n\tRpcAuthnLevel level, RpcImpLevel impers, IntPtr pAuthList, EoAuthnCap dwCapabilities, IntPtr pReserved3);\n\nstatic void Main(string[] args)\n{\n\tvar hres1 = CoSetProxyBlanket(null, 0, 0, null, 0, 0, IntPtr.Zero, 0); // Noncompliant\n\n\tvar hres2 = CoInitializeSecurity(IntPtr.Zero, -1, IntPtr.Zero, IntPtr.Zero, RpcAuthnLevel.None,\n\t\tRpcImpLevel.Impersonate, IntPtr.Zero, EoAuthnCap.None, IntPtr.Zero); // Noncompliant\n}\n</pre>\n\r\n",
          "title": "\"CoSetProxyBlanket\" and \"CoInitializeSecurity\" should not be used",
          "language": "C#",
          "key": "S3884"
        }
      ],
      "tags": [],
      "title": "\"CoSetProxyBlanket\" and \"CoInitializeSecurity\" should not be used",
      "key": "S3884"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert"
          ],
          "severity": "Major",
          "description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void SetName(string name)\n{\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void SetName(string name)\n{\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n",
          "title": "Variables should not be self-assigned",
          "language": "C#",
          "key": "S1656"
        },
        {
          "tags": [
            "cert"
          ],
          "severity": "Major",
          "description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPublic Sub SetName(name As String)\n  name = name\nEnd Sub\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Sub SetName(name As String)\n  Me.name = name\nEnd Sub\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n",
          "title": "Variables should not be self-assigned",
          "language": "VB.NET",
          "key": "S1656"
        }
      ],
      "tags": [
        "cert"
      ],
      "title": "Variables should not be self-assigned",
      "key": "S1656"
    },
    {
      "implementations": [
        {
          "tags": [
            "localisation"
          ],
          "severity": "Major",
          "description": "<p>When you create a <code>DataTable</code> or <code>DataSet</code>, you should set the locale explicitly. By default, the locale for these types is\nthe current culture. For data that is stored in a database or file and is shared globally, the locale should ordinarily be set to the invariant\nculture (<code>CultureInfo.InvariantCulture</code>).</p>\n<p>This rule raises an issue when <code>System.Data.DataTable</code> or <code>System.Data.DataSet</code> instances are created without explicitly\nsetting the locale property (<code>DataTable.Locale</code> or <code>DataSet.Locale</code>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Data;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DataTable CreateTable()\n        {\n            DataTable table = new DataTable(\"Customers\"); // Noncompliant table.Locale not set\n            DataColumn key = table.Columns.Add(\"ID\", typeof(Int32));\n\n            key.AllowDBNull = false;\n            key.Unique = true;\n            table.Columns.Add(\"LastName\", typeof(String));\n            table.Columns.Add(\"FirstName\", typeof(String));\n            return table;\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Data;\nusing System.Globalization;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DataTable CreateTable()\n        {\n            DataTable table = new DataTable(\"Customers\");\n            table.Locale = CultureInfo.InvariantCulture;\n            DataColumn key = table.Columns.Add(\"ID\", typeof(Int32));\n\n            key.AllowDBNull = false;\n            key.Unique = true;\n            table.Columns.Add(\"LastName\", typeof(String));\n            table.Columns.Add(\"FirstName\", typeof(String));\n            return table;\n        }\n    }\n}\n</pre>\n\n",
          "title": "Locales should be set for data types",
          "language": "C#",
          "key": "S4057"
        }
      ],
      "tags": [
        "localisation"
      ],
      "title": "Locales should be set for data types",
      "key": "S4057"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Critical",
          "description": "<p>Numbers can be shifted with the <code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators, but the right operand of the operation needs to be an\n<code>int</code> or a type that has an implicit conversion to <code>int</code>. However, with <code>dynamic</code>, the compiler's type checking is\nturned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to <code>int</code> at runtime,\nthen a <code>RuntimeBinderException</code> will be raised.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndynamic d = 5;\nvar x = d &gt;&gt; 5.4; // Noncompliant\nx = d &gt;&gt; null; // Noncompliant\nx &lt;&lt;= new object(); // Noncompliant\n</pre>\n\r\n",
          "title": "Right operands of shift operators should be integers",
          "language": "C#",
          "key": "S3449"
        }
      ],
      "tags": [],
      "title": "Right operands of shift operators should be integers",
      "key": "S3449"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null || str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.Length == 0)\n{\n  Console.WriteLine(\"String is empty\");\n}\n\nif (str != null &amp;&amp; str.Length &gt; 0)\n{\n  Console.WriteLine(\"String is not empty\");\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a class=\"rule-link\" href=\"#version=6.2.0.0&ruleId=S2259\">Rule S2259</a> instead.</p>\n\r\n",
          "title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals",
          "language": "C#",
          "key": "S1697"
        }
      ],
      "tags": [],
      "title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals",
      "key": "S1697"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Blocker",
          "description": "<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and\n<code>anyValue | 0</code>.</p>\n\r\n<h2>Code Fixes</h2><ul><li>Remove bitwise operation</li></ul>",
          "title": "Silly bit operations should not be performed",
          "language": "C#",
          "key": "S2437"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "Silly bit operations should not be performed",
      "key": "S2437"
    },
    {
      "implementations": [
        {
          "tags": [
            "style"
          ],
          "severity": "Major",
          "description": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) DoSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition)\n{\n  DoSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Anonymous functions containing a single statement are ignored. Block statements are not considered either.</p>\n<pre>\nFunc&lt;object, bool&gt; item1 = o =&gt; { return true; }; // Compliant\nFunc&lt;object, bool&gt; item1 = o =&gt; { var r = false; return r; }; // Noncompliant\n</pre>\n\r\n",
          "title": "Statements should be on separate lines",
          "language": "C#",
          "key": "S122"
        },
        {
          "tags": [
            "style"
          ],
          "severity": "Major",
          "description": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim a = 0 : Dim b = 0  ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim a = 0              ' Compliant\n        Dim b = 0              ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "Statements should be on separate lines",
          "language": "VB.NET",
          "key": "S122"
        }
      ],
      "tags": [
        "style"
      ],
      "title": "Statements should be on separate lines",
      "key": "S122"
    },
    {
      "implementations": [
        {
          "tags": [
            "localisation",
            "pitfall"
          ],
          "severity": "Minor",
          "description": "<p>When a <code>System.Globalization.CultureInfo</code> or <code>IFormatProvider</code> object is not supplied, the default value that is supplied by\nthe overloaded member might not have the effect that you want in all locales.</p>\n<p>You should supply culture-specific information according to the following guidelines:</p>\n<ul>\n  <li> If the value will be displayed to the user, use the current culture. See <code>CultureInfo.CurrentCulture</code>. </li>\n  <li> If the value will be stored and accessed by software (persisted to a file or database), use the invariant culture. See\n  <code>CultureInfo.InvariantCulture</code>. </li>\n  <li> If you do not know the destination of the value, have the data consumer or provider specify the culture. </li>\n</ul>\n<p>This rule raises an issue when a method or constructor calls one or more members that have overloads that accept a\n<code>System.IFormatProvider</code> parameter, and the method or constructor does not call the overload that takes the <code>IFormatProvider</code>\nparameter. This rule ignores calls to .NET Framework methods that are documented as ignoring the <code>IFormatProvider</code> parameter as well as the\nfollowing methods:</p>\n<ul>\n  <li> <code>Activator.CreateInstance</code> </li>\n  <li> <code>ResourceManager.GetObject</code> </li>\n  <li> <code>ResourceManager.GetString</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(String string1)\n        {\n            if(string.Compare(string1, string2, false) == 0) // Noncompliant\n            {\n                Console.WriteLine(string3.ToLower()); // Noncompliant\n            }\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Globalization;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(String string1, String string2, String string3)\n        {\n            if(string.Compare(string1, string2, false,\n                              CultureInfo.InvariantCulture) == 0)\n            {\n                Console.WriteLine(string3.ToLower(CultureInfo.CurrentCulture));\n            }\n        }\n    }\n}\n</pre>\n\n",
          "title": "Overloads with a \"CultureInfo\" or an \"IFormatProvider\" parameter should be used",
          "language": "C#",
          "key": "S4056"
        }
      ],
      "tags": [
        "localisation",
        "pitfall"
      ],
      "title": "Overloads with a \"CultureInfo\" or an \"IFormatProvider\" parameter should be used",
      "key": "S4056"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>Many string operations, the <code>Compare</code> and <code>Equals</code> methods in particular, provide an overload that accepts a\n<code>StringComparison</code> enumeration value as a parameter. Calling these overloads and explicitly providing this parameter makes your code\nclearer and easier to maintain.</p>\n<p>This rule raises an issue when a string comparison operation doesn't use the overload that takes a <code>StringComparison</code> parameter.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public bool HaveSameNames(string name1, string name2)\n    {\n      return string.Compare(name1, name2) == 0; // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public bool HaveSameNames(string name1, string name2)\n    {\n      return string.Compare(name1, name2, StringComparison.OrdinalIgnoreCase) == 0;\n    }\n  }\n}\n</pre>\n\n",
          "title": "Overloads with a \"StringComparison\" parameter should be used",
          "language": "C#",
          "key": "S4058"
        }
      ],
      "tags": [],
      "title": "Overloads with a \"StringComparison\" parameter should be used",
      "key": "S4058"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>A static field in a generic type is not shared among instances of different closed constructed types, thus\n<code>LengthLimitedSingletonCollection&lt;int&gt;.instances</code> and <code>LengthLimitedSingletonCollection&lt;string&gt;.instances</code> will\npoint to different objects, even though <code>instances</code> is seemingly shared among all <code>LengthLimitedSingletonCollection&lt;&gt;</code>\ngeneric classes.</p>\n<p>If you need to have a static field shared among instances with different generic arguments, define a non-generic base class to store your static\nmembers, then set your generic type to inherit from the base class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class LengthLimitedSingletonCollection&lt;T&gt; where T : new()\n{\n  protected const int MaxAllowedLength = 5;\n  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;(); // Noncompliant\n\n  public static T GetInstance()\n  {\n    object instance;\n\n    if (!instances.TryGetValue(typeof(T), out instance))\n    {\n      if (instances.Count &gt;= MaxAllowedLength)\n      {\n        throw new Exception();\n      }\n      instance = new T();\n      instances.Add(typeof(T), instance);\n    }\n    return (T)instance;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class SingletonCollectionBase\n{\n  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;();\n}\n\npublic class LengthLimitedSingletonCollection&lt;T&gt; : SingletonCollectionBase where T : new()\n{\n  protected const int MaxAllowedLength = 5;\n\n  public static T GetInstance()\n  {\n    object instance;\n\n    if (!instances.TryGetValue(typeof(T), out instance))\n    {\n      if (instances.Count &gt;= MaxAllowedLength)\n      {\n        throw new Exception();\n      }\n      instance = new T();\n      instances.Add(typeof(T), instance);\n    }\n    return (T)instance;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the static field or property uses a type parameter, then the developer is assumed to understand that the static member is not shared among the\nclosed constructed types.</p>\n<pre>\npublic class Cache&lt;T&gt;\n{\n   private static Dictionary&lt;string, T&gt; CacheDictionary { get; set; } // Compliant\n}\n</pre>\n\r\n",
          "title": "Static fields should not be used in generic types",
          "language": "C#",
          "key": "S2743"
        }
      ],
      "tags": [],
      "title": "Static fields should not be used in generic types",
      "key": "S2743"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Static field initializers are executed in the order in which they appear in the class from top to bottom. Thus, placing a static field in a class\nabove the field or fields required for its initialization will yield unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  public static int X = Y; // Noncompliant; Y at this time is still assigned default(int), i.e. 0\n  public static int Y = 42;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  public static int Y = 42;\n  public static int X = Y;\n}\n</pre>\n<p>or</p>\n<pre>\nclass MyClass\n{\n  public static int X;\n  public static int Y = 42;\n\n  static MyClass()\n  {\n    X = Y;\n  }\n}\n</pre>\n\r\n",
          "title": "Static fields should appear in the order they must be initialized ",
          "language": "C#",
          "key": "S3263"
        }
      ],
      "tags": [],
      "title": "Static fields should appear in the order they must be initialized ",
      "key": "S3263"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>A <code>static</code> field that is neither constant nor read-only is not thread-safe. Correctly accessing these fields from different threads\nneeds synchronization with <code>lock</code>s. Improper synchronization may lead to unexpected results, thus publicly visible static fields are best\nsuited for storing non-changing data shared by many consumers. To enforce this intent, these fields should be marked <code>readonly</code> or\nconverted to constants.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Math\n{\n  public static double Pi = 3.14;  // Noncompliant\n}\n</pre>\n<p>or</p>\n<pre>\npublic class Shape\n{\n  public static Shape Empty = new EmptyShape();  // Noncompliant\n\n  private class EmptyShape : Shape\n  {\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Math\n{\n  public const double Pi = 3.14;\n}\n</pre>\n<p>or</p>\n<pre>\npublic class Shape\n{\n  public static readonly Shape Empty = new EmptyShape();\n\n  private class EmptyShape : Shape\n  {\n  }\n}\n</pre>\n\r\n",
          "title": "Non-constant static fields should not be visible",
          "language": "C#",
          "key": "S2223"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Non-constant static fields should not be visible",
      "key": "S2223"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.</p>\n<p>Instead remove the field's <code>static</code> modifier, or initialize it statically.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person\n{\n  private static DateTime dateOfBirth;\n  private static int expectedFingers;\n\n  public Person(DateTime birthday)\n  {\n    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers = 10;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person\n{\n  private DateTime dateOfBirth;\n  private static int expectedFingers = 10;\n\n  public Person(DateTime birthday)\n  {\n    this.dateOfBirth = birthday;\n  }\n}\n</pre>\n\r\n",
          "title": "Static fields should not be updated in constructors",
          "language": "C#",
          "key": "S3010"
        }
      ],
      "tags": [],
      "title": "Static fields should not be updated in constructors",
      "key": "S3010"
    },
    {
      "implementations": [
        {
          "tags": [
            "multi-threading"
          ],
          "severity": "Critical",
          "description": "<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. </p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method or property.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  private static int count = 0;\n\n  public void DoSomething()\n  {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>\n\r\n",
          "title": "Instance members should not write to \"static\" fields",
          "language": "C#",
          "key": "S2696"
        }
      ],
      "tags": [
        "multi-threading"
      ],
      "title": "Instance members should not write to \"static\" fields",
      "key": "S2696"
    },
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Minor",
          "description": "<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>sealed</code> class cannot have children, marking its members\n<code>protected</code> is confusingly pointless.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic sealed class MySealedClass\n{\n    protected string name = \"Fred\";  // Noncompliant\n    protected void SetName(string name) // Noncompliant\n    {\n        // ...\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic sealed class MySealedClass\n{\n    private string name = \"Fred\";\n    public void SetName(string name)\n    {\n        // ...\n    }\n}\n</pre>\n\r\n",
          "title": "\"sealed\" classes should not have \"protected\" members",
          "language": "C#",
          "key": "S2156"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "\"sealed\" classes should not have \"protected\" members",
      "key": "S2156"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert"
          ],
          "severity": "Minor",
          "description": "<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method with the number of bytes requested.\nInstead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce a bug that is both\nharmful and difficult to reproduce.</p>\n<p>This rule raises an issue when a <code>Stream.Read</code> or a <code>Stream.ReadAsync</code> method is called, but the return value is not\nchecked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void DoSomething(string fileName)\n{\n  using (var stream = File.Open(fileName, FileMode.Open))\n  {\n    var result = new byte[stream.Length];\n    stream.Read(result, 0, (int)stream.Length); // Noncompliant\n    // ... do something with result\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void DoSomething(string fileName)\n{\n  using (var stream = File.Open(fileName, FileMode.Open))\n  {\n    var buffer = new byte[1024];\n    using (var ms = new MemoryStream())\n    {\n        int read;\n        while ((read = stream.Read(buffer, 0, buffer.Length)) &gt; 0)\n        {\n            ms.Write(buffer, 0, read);\n        }\n        // ... do something with ms\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/XACSAQ\">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an\n  array </li>\n</ul>\n\r\n",
          "title": "The length returned from a stream read should be checked",
          "language": "C#",
          "key": "S2674"
        }
      ],
      "tags": [
        "cert"
      ],
      "title": "The length returned from a stream read should be checked",
      "key": "S2674"
    },
    {
      "implementations": [
        {
          "tags": [
            "performance"
          ],
          "severity": "Minor",
          "description": "<p><code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.Length ; ++i)\n{\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\nfor (int i = 0; i &lt; arrayOfStrings.Length; ++i)\n{\n  bld.Append(arrayOfStrings[i]);\n}\nstring str = bld.ToString();\n</pre>\n\r\n",
          "title": "Strings should not be concatenated using '+' in a loop",
          "language": "C#",
          "key": "S1643"
        },
        {
          "tags": [
            "performance"
          ],
          "severity": "Minor",
          "description": "<p><code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo = \"\"\n        foo &amp;= \"Result: \"       ' Compliant - outside of loop\n\n        For i = 1 To 9\n            foo &amp;= i            ' Noncompliant\n        Next\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo = New System.Text.StringBuilder\n        foo.Append(\"Result: \")  ' Compliant\n\n        For i = 1 To 9\n            foo.Append(i)       ' Compliant\n        Next\n    End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "Strings should not be concatenated using \"+\" or \"&\" in a loop",
          "language": "VB.NET",
          "key": "S1643"
        }
      ],
      "tags": [
        "performance"
      ],
      "title": "Strings should not be concatenated using '+' in a loop",
      "key": "S1643"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "pitfall"
          ],
          "severity": "Blocker",
          "description": "<p>Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected\nbehaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of\n<code>String.Format</code>, <code>StringBuilder.AppendFormat</code>, <code>Console.Write</code>, <code>Console.WriteLine</code>,\n<code>TextWriter.Write</code>, <code>TextWriter.WriteLine</code>, <code>Debug.WriteLine(String, Object[])</code>,\n<code>Trace.TraceError(String, Object[])</code>, <code>Trace.TraceInformation(String, Object[])</code>,\n<code>Trace.TraceWarning(String, Object[])</code> and <code>TraceSource.TraceInformation(String, Object[])</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ns = string.Format(\"[0}\", arg0);\ns = string.Format(\"{{0}\", arg0);\ns = string.Format(\"{0}}\", arg0);\ns = string.Format(\"{-1}\", arg0);\ns = string.Format(\"{0} {1}\", arg0);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ns = string.Format(\"{0}\", 42); // Compliant\ns = string.Format(\"{0,10}\", 42); // Compliant\ns = string.Format(\"{0,-10}\", 42); // Compliant\ns = string.Format(\"{0:0000}\", 42); // Compliant\ns = string.Format(\"{2}-{0}-{1}\", 1, 2, 3); // Compliant\ns = string.Format(\"no format\"); // Compliant\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> No issue is raised if the format string is not a <code>const</code>. </li>\n</ul>\n<pre>\nvar pattern = \"{0} {1} {2}\";\nvar res = string.Format(pattern, 1, 2); // Compliant, not const string are not recognized\n</pre>\n<ul>\n  <li> No issue is raised if the argument is not an inline creation array. </li>\n</ul>\n<pre>\nvar array = new int[] {};\nvar res = string.Format(\"{0} {1}\", array); // Compliant we don't know the size of the array\n</pre>\n<ul>\n  <li> This rule doesn't check whether the format specifier (defined after the <code>:</code>) is actually valid. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/e4EyAQ\">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>\n\r\n",
          "title": "Composite format strings should not lead to unexpected behavior at runtime",
          "language": "C#",
          "key": "S2275"
        }
      ],
      "tags": [
        "cert",
        "pitfall"
      ],
      "title": "Composite format strings should not lead to unexpected behavior at runtime",
      "key": "S2275"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "confusing"
          ],
          "severity": "Major",
          "description": "<p>Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected\nbehaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of\n<code>String.Format</code>, <code>StringBuilder.AppendFormat</code>, <code>Console.Write</code>, <code>Console.WriteLine</code>,\n<code>TextWriter.Write</code>, <code>TextWriter.WriteLine</code>, <code>Debug.WriteLine(String, Object[])</code>,\n<code>Trace.TraceError(String, Object[])</code>, <code>Trace.TraceInformation(String, Object[])</code>,\n<code>Trace.TraceWarning(String, Object[])</code> and <code>TraceSource.TraceInformation(String, Object[])</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ns = string.Format(\"{0}\", arg0, arg1); // Noncompliant, arg1 is declared but not used.\ns = string.Format(\"{0} {2}\", arg0, arg1, arg2); // Noncompliant, the format item with index 1 is missing so arg1 will not be used.\ns = string.Format(\"foo\"); // Noncompliant, there is no need to use string.Format here.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ns = string.Format(\"{0}\", arg0);\ns = string.Format(\"{0} {1}\", arg0, arg2);\ns = \"foo\";\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> No issue is raised if the format string is not a <code>const</code>. </li>\n</ul>\n<pre>\nvar pattern = \"{0} {1} {2}\";\nvar res = string.Format(pattern, 1, 2); // Compliant, not const string are not recognized\n</pre>\n<ul>\n  <li> No issue is raised if the argument is not an inline creation array. </li>\n</ul>\n<pre>\nvar array = new int[] {};\nvar res = string.Format(\"{0} {1}\", array); // Compliant we don't know the size of the array\n</pre>\n<ul>\n  <li> This rule doesn't check whether the format specifier (defined after the <code>:</code>) is actually valid. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/e4EyAQ\">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>\n\r\n",
          "title": "Composite format strings should be used correctly",
          "language": "C#",
          "key": "S3457"
        }
      ],
      "tags": [
        "cert",
        "confusing"
      ],
      "title": "Composite format strings should be used correctly",
      "key": "S3457"
    },
    {
      "implementations": [
        {
          "tags": [
            "unpredictable",
            "cert"
          ],
          "severity": "Minor",
          "description": "<p><code>string.ToLower()</code>, <code>ToUpper</code>, <code>IndexOf</code>, <code>LastIndexOf</code>, and <code>Compare</code> are all\nculture-dependent, as are some (floating point number and <code>DateTime</code>-related) calls to <code>ToString</code>. Fortunately, all have\nvariants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the system default\nculture, possibly creating problems with international characters.</p>\n<p><code>string.CompareTo()</code> is also culture specific, but has no overload that takes a culture information, so instead it's better to use\n<code>CompareOrdinal</code>, or <code>Compare</code> with culture.</p>\n<p>Calls without a culture may work fine in the system's \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar lowered = someString.ToLower(); //Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar lowered = someString.ToLower(CultureInfo.InvariantCulture);\n</pre>\n<p>or</p>\n<pre>\nvar lowered = someString.ToLowerInvariant();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwAiAg\">CERT, STR02-J.</a> - Specify an appropriate locale when comparing\n  locale-dependent data </li>\n</ul>\n\r\n",
          "title": "Culture should be specified for \"string\" operations",
          "language": "C#",
          "key": "S1449"
        }
      ],
      "tags": [
        "unpredictable",
        "cert"
      ],
      "title": "Culture should be specified for \"string\" operations",
      "key": "S1449"
    },
    {
      "implementations": [
        {
          "tags": [
            "design"
          ],
          "severity": "Minor",
          "description": "<p>Strings and integral types are typically used as indexers. When some other type is required, it typically indicates design problems, and\npotentially a situation where a method should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int this[MyCustomClass index]  // Noncompliant\n{\n    // get and set accessors\n}\n</pre>\n\r\n",
          "title": "Strings or integral types should be used for indexers",
          "language": "C#",
          "key": "S3876"
        }
      ],
      "tags": [
        "design"
      ],
      "title": "Strings or integral types should be used for indexers",
      "key": "S3876"
    },
    {
      "implementations": [
        {
          "tags": [
            "unused",
            "confusing"
          ],
          "severity": "Minor",
          "description": "<p><code>GC.SuppressFinalize</code> asks the Common Language Runtime not to call the finalizer of an object. This is useful when implementing the\ndispose pattern where object finalization is already handled in <code>IDisposable.Dispose</code>. However, it has no effect if there is no finalizer\ndefined in the object's type, so using it in such cases is just confusing.</p>\n<p>This rule raises an issue when <code>GC.SuppressFinalize</code> is called for objects of <code>sealed</code> types without a finalizer.</p>\n<p><strong></strong>Note:** <a class=\"rule-link\" href=\"#version=6.2.0.0&ruleId=S3971\">Rule S3971</a> is a stricter version of this rule. Typically it makes sense to activate only one of these 2\nrules.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsealed class MyClass\n{\n  public void Method()\n  {\n    ...\n    GC.SuppressFinalize(this); //Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsealed class MyClass\n{\n  public void Method()\n  {\n    ...\n  }\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove useless 'SuppressFinalize' call</li></ul>",
          "title": "\"GC.SuppressFinalize\" should not be invoked for types without destructors",
          "language": "C#",
          "key": "S3234"
        }
      ],
      "tags": [
        "unused",
        "confusing"
      ],
      "title": "\"GC.SuppressFinalize\" should not be invoked for types without destructors",
      "key": "S3234"
    },
    {
      "implementations": [
        {
          "tags": [
            "finding",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Empty <code>case</code> clauses that fall through to the default are useless. Whether or not such a <code>case</code> is present, the\n<code>default</code> clause will be invoked. Such <code>case</code>s simply clutter the code, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch(ch)\n{\n  case 'a' :\n    HandleA();\n    break;\n  case 'b' :\n    HandleB();\n    break;\n  case 'c' :  // Noncompliant\n  default:\n    HandleTheRest();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch(ch)\n{\n  case 'a' :\n    HandleA();\n    break;\n  case 'b' :\n    HandleB();\n    break;\n  default:\n    HandleTheRest();\n    break;\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove useless 'case'</li></ul>",
          "title": "Empty \"case\" clauses that fall through to the \"default\" should be omitted",
          "language": "C#",
          "key": "S3458"
        }
      ],
      "tags": [
        "finding",
        "clumsy"
      ],
      "title": "Empty \"case\" clauses that fall through to the \"default\" should be omitted",
      "key": "S3458"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "bad-practice"
          ],
          "severity": "Minor",
          "description": "<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable)\n{\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0)\n{\n  doSomething();\n}\nelse\n{\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>\n\r\n",
          "title": "\"switch\" statements should have at least 3 \"case\" clauses",
          "language": "C#",
          "key": "S1301"
        }
      ],
      "tags": [
        "misra",
        "bad-practice"
      ],
      "title": "\"switch\" statements should have at least 3 \"case\" clauses",
      "key": "S1301"
    },
    {
      "implementations": [
        {
          "tags": [
            "unused",
            "finding",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>The <code>default</code> clause should take appropriate action. Having an empty <code>default</code> is a waste of keystrokes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nenum Fruit\n{\n  Apple,\n  Orange,\n  Banana\n}\n\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine(\"apple\");\n      break;\n    default:  //Noncompliant\n      break;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nenum Fruit\n{\n  Apple,\n  Orange,\n  Banana\n}\n\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine(\"apple\");\n      break;\n    default:\n      throw new NotSupportedException();\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine(\"apple\");\n      break;\n  }\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove empty 'default' clause</li></ul>",
          "title": "Empty \"default\" clauses should be removed",
          "language": "C#",
          "key": "S3532"
        }
      ],
      "tags": [
        "unused",
        "finding",
        "clumsy"
      ],
      "title": "Empty \"default\" clauses should be removed",
      "key": "S3532"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "misra",
            "cert"
          ],
          "severity": "Critical",
          "description": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a\n<code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint foo = 42;\nswitch (foo) // Noncompliant\n{\n  case 0:\n    Console.WriteLine(\"foo = 0\");\n    break;\n  case 42:\n    Console.WriteLine(\"foo = 42\");\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint foo = 42;\nswitch (foo) // Compliant\n{\n  case 0:\n    Console.WriteLine(\"foo = 0\");\n    break;\n  case 42:\n    Console.WriteLine(\"foo = 42\");\n    break;\n  default:\n    throw new InvalidOperationException(\"Unexpected value foo = \" + foo);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n</ul>\n\r\n",
          "title": "\"switch/Select\" statements should end with \"default/Case Else\" clauses",
          "language": "C#",
          "key": "S131"
        },
        {
          "tags": [
            "cwe",
            "misra",
            "cert"
          ],
          "severity": "Critical",
          "description": "<p>The requirement for a final <code>Case Else</code> clause is defensive programming.</p>\n<p>This clause should either take appropriate action or contain a suitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSelect Case param ' Noncompliant - Case Else clause is missing\n  Case 0\n    DoSomething()\n  Case 1\n    DoSomethingElse()\nEnd Select\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSelect Case param\n  Case 0\n    DoSomething()\n  Case 1\n    DoSomethingElse()\n  Case Else ' Compliant\n    DoSomethingElse()\nEnd Select\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n</ul>\n\r\n",
          "title": "\"Select\" statements should end with a \"Case Else\" clause",
          "language": "VB.NET",
          "key": "S131"
        }
      ],
      "tags": [
        "cwe",
        "misra",
        "cert"
      ],
      "title": "\"switch/Select\" statements should end with \"default/Case Else\" clauses",
      "key": "S131"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>\n\r\n",
          "title": "Tabulation characters should not be used",
          "language": "C#",
          "key": "S105"
        },
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>\n\r\n",
          "title": "Tabulation characters should not be used",
          "language": "VB.NET",
          "key": "S105"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Tabulation characters should not be used",
      "key": "S105"
    },
    {
      "implementations": [
        {
          "tags": [
            "multi-threading",
            "suspicious"
          ],
          "severity": "Critical",
          "description": "<p>After an <code>await</code>ed <code>Task</code> has executed, you can continue execution in the original, calling thread or any arbitrary thread.\nUnless the rest of the code needs the context from which the <code>Task</code> was spawned, <code>Task.ConfigureAwait(false)</code> should be used to\nkeep execution in the <code>Task</code> thread to avoid the need for context switching and the possibility of deadlocks.</p>\n<p>This rule raises an issue when code in a class library <code>await</code>s a <code>Task</code> and continues execution in the original calling\nthread.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar response = await httpClient.GetAsync(url);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar response = await httpClient.GetAsync(url).ConfigureAwait(false);\n</pre>\n\r\n",
          "title": "\"ConfigureAwait(false)\" should be used",
          "language": "C#",
          "key": "S3216"
        }
      ],
      "tags": [
        "multi-threading",
        "suspicious"
      ],
      "title": "\"ConfigureAwait(false)\" should be used",
      "key": "S3216"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>When the second and third operands of a ternary operator are the same, the operator will always return the same value regardless of the condition.\nEither the operator itself is pointless, or a mistake was made in coding it. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic bool CanVote(Person person)\n{\n  return person.GetAge() &gt; 18 ? true : true; // Noncompliant; is this what was intended?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic bool CanVote(Person person)\n{\n  return person.GetAge() &gt; 18 ? true : false;\n  // or even better:\n  // return person.GetAge() &gt; 18;\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a class=\"rule-link\" href=\"#version=6.2.0.0&ruleId=S1871\">Rule S1871</a> instead.</p>\n\r\n<h2>Code Fixes</h2><ul><li>Remove the ternary operator</li></ul>",
          "title": "The ternary operator should not return the same value regardless of the condition",
          "language": "C#",
          "key": "S2758"
        }
      ],
      "tags": [],
      "title": "The ternary operator should not return the same value regardless of the condition",
      "key": "S2758"
    },
    {
      "implementations": [
        {
          "tags": [
            "unused"
          ],
          "severity": "Major",
          "description": "<p>When a non-<code>static</code> class field is annotated with <code>ThreadStatic</code>, the code seems to show that the field can have different\nvalues for different calling threads, but that's not the case, since the <code>ThreadStatic</code> attribute is simply ignored on\nnon-<code>static</code> fields. </p>\n<p>So <code>ThreadStatic</code> should either be removed or replaced with a use of the <code>ThreadLocal&lt;T&gt;</code> class, which gives a similar\nbehavior for non-<code>static</code> fields.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  [ThreadStatic]  // Noncompliant\n  private int count = 0;\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n{\n  private int count = 0;\n\n  // ...\n}\n</pre>\n<p>or</p>\n<pre>\npublic class MyClass\n{\n  private readonly ThreadLocal&lt;int&gt; count = new ThreadLocal&lt;int&gt;();\n  public int Count\n  {\n    get { return count.Value; }\n    set { count.Value = value; }\n  }\n  // ...\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove 'ThreadStatic' attribute</li></ul>",
          "title": "\"ThreadStatic\" should not be used on non-static fields",
          "language": "C#",
          "key": "S3005"
        }
      ],
      "tags": [
        "unused"
      ],
      "title": "\"ThreadStatic\" should not be used on non-static fields",
      "key": "S3005"
    },
    {
      "implementations": [
        {
          "tags": [
            "multi-threading"
          ],
          "severity": "Major",
          "description": "<p>When an object has a field annotated with <code>ThreadStatic</code>, that field is shared within a given thread, but unique across threads. Since a\nclass' static initializer is only invoked for the first thread created, it also means that only the first thread will have the expected initial\nvalues.</p>\n<p>Instead, allow such fields to be initialized to their default values or make the initialization lazy.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  [ThreadStatic]\n  public static object PerThreadObject = new object(); // Noncompliant. Will be null in all the threads except the first one.\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  [ThreadStatic]\n  public static object _perThreadObject;\n  public static object PerThreadObject\n  {\n    get\n    {\n      if (_perThreadObject == null)\n      {\n        _perThreadObject = new object();\n      }\n      return _perThreadObject;\n    }\n  }\n}\n</pre>\n\r\n",
          "title": "\"ThreadStatic\" fields should not be initialized",
          "language": "C#",
          "key": "S2996"
        }
      ],
      "tags": [
        "multi-threading"
      ],
      "title": "\"ThreadStatic\" fields should not be initialized",
      "key": "S2996"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "error-handling",
            "cert"
          ],
          "severity": "Major",
          "description": "<p>Throwing such general exceptions as <code>Exception</code>, <code>SystemException</code>, <code>ApplicationException</code>,\n<code>IndexOutOfRangeException</code>, <code>NullReferenceException</code>, <code>OutOfMemoryException</code> and\n<code>ExecutionEngineException</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated\nerrors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void DoSomething(object obj)\n{\n  if (obj == null)\n  {\n    throw new NullReferenceException(\"obj\");  // Noncompliant\n  }\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void DoSomething(object obj)\n{\n  if (obj == null)\n  {\n    throw new ArgumentNullException(\"obj\");\n  }\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>\n\r\n",
          "title": "General exceptions should never be thrown",
          "language": "C#",
          "key": "S112"
        },
        {
          "tags": [
            "cwe",
            "error-handling",
            "cert"
          ],
          "severity": "Major",
          "description": "<p>Throwing such general exceptions as <code>Exception</code>, <code>SystemException</code>, <code>ApplicationException</code>,\n<code>IndexOutOfRangeException</code>, <code>NullReferenceException</code>, <code>OutOfMemoryException</code> and\n<code>ExecutionEngineException</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated\nerrors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPublic Sub DoSomething(obj As Object)\n  If obj Is Nothing Then\n    ' Noncompliant\n    Throw New NullReferenceException(\"obj\")\n  End If\n  ' ...\nEnd Sub\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Sub DoSomething(obj As Object)\n  If obj Is Nothing Then\n    Throw New ArgumentNullException(\"obj\")\n  End If\n  ' ...\nEnd Sub\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>\n\r\n",
          "title": "General exceptions should never be thrown",
          "language": "VB.NET",
          "key": "S112"
        }
      ],
      "tags": [
        "cwe",
        "error-handling",
        "cert"
      ],
      "title": "General exceptions should never be thrown",
      "key": "S112"
    },
    {
      "implementations": [
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Major",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">max</dt><dd><span class=\"param-description\">Maximum authorized number of generic parameters.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">2</span></dd></dl><p>A method or class with too many type parameters has likely aggregated too many responsibilities and should be split.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default parameter value of 2:</p>\n<pre>\n&lt;S, T, U, V&gt; void foo() {} // Noncompliant; not really readable\n&lt;String, Integer, Object, String&gt;foo(); // especially on invocations\n</pre>\n\r\n",
          "title": "Classes and methods should not have too many generic parameters",
          "language": "C#",
          "key": "S2436"
        }
      ],
      "tags": [
        "brain-overload"
      ],
      "title": "Classes and methods should not have too many generic parameters",
      "key": "S2436"
    },
    {
      "implementations": [
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Major",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">maximum</dt><dd><span class=\"param-description\">Maximum number of case</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">30</span></dd></dl><p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>\n\r\n",
          "title": "\"switch\" statements should not have too many \"case\" clauses",
          "language": "C#",
          "key": "S1479"
        }
      ],
      "tags": [
        "brain-overload"
      ],
      "title": "\"switch\" statements should not have too many \"case\" clauses",
      "key": "S1479"
    },
    {
      "implementations": [
        {
          "tags": [
            "brain-overload"
          ],
          "severity": "Major",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">max</dt><dd><span class=\"param-description\">Maximum authorized number of parameters</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">7</span></dd></dl><p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, string param4, long param5)\n{\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, string param4)\n{\n...\n}\n</pre>\n\r\n",
          "title": "Methods should not have too many parameters",
          "language": "C#",
          "key": "S107"
        }
      ],
      "tags": [
        "brain-overload"
      ],
      "title": "Methods should not have too many parameters",
      "key": "S107"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe"
          ],
          "severity": "Major",
          "description": "<p>Calling <code>ToString()</code> on an object should always return a string. Returning <code>null</code> instead contravenes the method's implicit\ncontract.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override string ToString ()\n{\n  if (this.collection.Count == 0)\n  {\n    return null; // Noncompliant\n  }\n  else\n  {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic override string ToString ()\n{\n  if (this.collection.Count == 0)\n  {\n    return string.Empty;\n  }\n  else\n  {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n</ul>\n\r\n",
          "title": "\"ToString()\" method should not return null",
          "language": "C#",
          "key": "S2225"
        }
      ],
      "tags": [
        "cwe"
      ],
      "title": "\"ToString()\" method should not return null",
      "key": "S2225"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Blocker",
          "description": "<p>If you call <code>GetType()</code> on a <code>Type</code> variable, the return value will always be <code>typeof(System.Type)</code>. So there's no\nreal point in making that call. The same applies to passing a type argument to <code>IsInstanceOfType</code>. In both cases the results are entirely\npredictable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar type = typeof(int);\nvar ttype = type.GetType(); //Noncompliant, always typeof(System.Type)\n\nvar s = \"abc\";\n\nif (s.GetType().IsInstanceOfType(typeof(string))) //Noncompliant; false\n{ /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar s = \"abc\";\n\nif (s.GetType().IsInstanceOfType(\"ssss\"))\n{ /* ... */ }\n</pre>\n\r\n",
          "title": "Type should not be examined on \"System.Type\" instances",
          "language": "C#",
          "key": "S3443"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "Type should not be examined on \"System.Type\" instances",
      "key": "S3443"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>When a type name matches the name of a publicly defined namespace, for instance one in the .NET framework class library, it leads to confusion and\nmakes the library that much harder to use.</p>\n<p>This rule raises an issue when a name of a public type matches the name of a .NET Framework namespace, or a namespace of the project assembly, in a\ncase-insensitive comparison.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Text  {  // Noncompliant: Collides with System.Text\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyText  {\n  }\n}\n</pre>\n\n",
          "title": "Type names should not match namespaces",
          "language": "C#",
          "key": "S4041"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Type names should not match namespaces",
      "key": "S4041"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>With the advent of .NET framework version 2, certain practices have become obsolete.</p>\n<p>In particular, exceptions should now extend <code>System.Exception</code> instead of <code>System.ApplicationException</code>. Similarly, generic\ncollections should be used instead of the older, non-generic, ones. Finally when creating an XML view, you should not extend\n<code>System.Xml.XmlDocument</code>.</p>\n<p>This rule raises an issue when an externally visible type extends one of these types:</p>\n<ul>\n  <li> <code>System.ApplicationException</code> </li>\n  <li> <code>System.Xml.XmlDocument</code> </li>\n  <li> <code>System.Collections.CollectionBase</code> </li>\n  <li> <code>System.Collections.DictionaryBase</code> </li>\n  <li> <code>System.Collections.Queue</code> </li>\n  <li> <code>System.Collections.ReadOnlyCollectionBase</code> </li>\n  <li> <code>System.Collections.SortedList</code> </li>\n  <li> <code>System.Collections.Stack</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class MyCollection : CollectionBase  // Noncompliant\n  {\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class MyCollection : Collection&lt;T&gt;\n  {\n  }\n}\n</pre>\n\n",
          "title": "Types should not extend outdated base types",
          "language": "C#",
          "key": "S4052"
        }
      ],
      "tags": [],
      "title": "Types should not extend outdated base types",
      "key": "S4052"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Calling the <code>!</code> or <code>~</code> prefix operator twice does nothing: the second invocation undoes the first. Such mistakes are\ntypically caused by accidentally double-tapping the key in question without noticing.</p>\n<p>Either this is a bug, if the operator was actually meant to be called once, or misleading if done on purpose.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint v1 = 0;\nbool v2 = false;\n\nvar v3 = !!v1; // Noncompliant\nvar v4 = ~~v2; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint v1 = 0;\nbool v2 = false;\n\nvar v3 = !v1;\nvar v4 = ~v2;\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove repeated prefix operator(s)</li></ul>",
          "title": "Doubled prefix operators \"!!\" and \"~~\" should not be used",
          "language": "C#",
          "key": "S2761"
        }
      ],
      "tags": [],
      "title": "Doubled prefix operators \"!!\" and \"~~\" should not be used",
      "key": "S2761"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "cert",
            "unused"
          ],
          "severity": "Major",
          "description": "<p>Having an unconditional <code>break</code>, <code>return</code>, <code>(@)throw</code> or <code>goto</code> in a loop renders it useless; the loop\nwill only execute once and the loop structure itself is simply wasted keystrokes.</p>\n<p>Having an unconditional <code>continue</code> in a loop can render the loop meaningless, or is itself wasted keystrokes, depending on where in the\nloop it occurs.</p>\n<p>Having an unconditional <code>return</code> anywhere other than at the end of a function or method simply renders all the rest of the code in the\nmethod useless.</p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i &lt; 10; i++)\n{\n    Console.WriteLine(i);\n    break;  // loop only executes once\n}\n\nfor (var i = 0; i &lt; 10; i++)\n{\n    continue;\n    Console.WriteLine(i); // this is never executed\n}\n\nfor (var i = 0; i &lt; 10; i++)\n{\n    Console.WriteLine(i);\n    continue;  // this is meaningless; the loop would continue anyway\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 0; i &lt; 10; i++)\n{\n    Console.WriteLine(i);\n}\n\nfor (var i = 0; i &lt; 10; i++)\n{\n    Console.WriteLine(i);\n    if (ErrorOccurred())\n    {\n        break;\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n",
          "title": "Jump statements should not be used unconditionally",
          "language": "C#",
          "key": "S1751"
        }
      ],
      "tags": [
        "misra",
        "cert",
        "unused"
      ],
      "title": "Jump statements should not be used unconditionally",
      "key": "S1751"
    },
    {
      "implementations": [
        {
          "tags": [
            "unused"
          ],
          "severity": "Major",
          "description": "<p>Events that are not invoked anywhere are dead code, and there's no good reason to keep them in the source.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass UninvokedEventSample\n{\n    private event Action&lt;object, EventArgs&gt; Happened; //Noncompliant\n\n    public void RegisterEventHandler(Action&lt;object, EventArgs&gt; handler)\n    {\n        Happened += handler; //we register some event handlers\n    }\n\n    public void RaiseEvent()\n    {\n        if (Happened != null)\n        {\n            // Happened(this, null); // the event is never triggered, because this line is commented out.\n        }\n    }\n}\n</pre>\n\r\n",
          "title": "Events should be invoked",
          "language": "C#",
          "key": "S3264"
        }
      ],
      "tags": [
        "unused"
      ],
      "title": "Events should be invoked",
      "key": "S3264"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "unused"
          ],
          "severity": "Major",
          "description": "<p><code>private</code> or <code>internal</code> types or <code>private</code> members that are never executed or referenced are dead code:\nunnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to\nunderstand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  private void UnusedPrivateMethod() {...} // Noncompliant\n\n  private class UnusedClass {...} // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  private Foo()\n  {\n    UsedPrivateMethod();\n  }\n\n  private void UsedPrivateMethod()\n  {\n    var c = new UsedClass();\n  }\n\n  private class UsedClass {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on:</p>\n<ul>\n  <li> Empty constructors </li>\n  <li> Attributed members </li>\n  <li> Empty serialization constructor on type with <code>System.SerializableAttribute</code> attribute. </li>\n  <li> Internals in assemblies that have a <code>System.Runtime.CompilerServices.InternalsVisibleToAttribute</code> attribute. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>\n\r\n<h2>Code Fixes</h2><ul><li>Remove unused member</li></ul>",
          "title": "Unused private types or members should be removed",
          "language": "C#",
          "key": "S1144"
        }
      ],
      "tags": [
        "cert",
        "unused"
      ],
      "title": "Unused private types or members should be removed",
      "key": "S1144"
    },
    {
      "implementations": [
        {
          "tags": [
            "design",
            "cert",
            "unused"
          ],
          "severity": "Minor",
          "description": "<p>Private methods are clearly intended for use only within their own scope. When such methods return values that are never used by any of their\ncallers, then clearly there is no need to actually make the return, and it should be removed in the interests of efficiency and clarity. </p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n",
          "title": "Methods should not return values that are never used",
          "language": "C#",
          "key": "S3241"
        }
      ],
      "tags": [
        "design",
        "cert",
        "unused"
      ],
      "title": "Methods should not return values that are never used",
      "key": "S3241"
    },
    {
      "implementations": [
        {
          "tags": [
            "performance"
          ],
          "severity": "Minor",
          "description": "<p>The value of a <code>static readonly</code> field is computed at runtime while the value of a <code>const</code> field is calculated at compile\ntime, which improves performance.</p>\n<p>This rule raises an issue when a <code>static readonly</code> field is initialized with a value that is computable at compile time.</p>\n<p>As specified by Microsoft, the list of types that can have a constant value are:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>C# type</th>\n      <th>.Net Fwk type</th>\n    </tr>\n    <tr>\n      <td>bool</td>\n      <td>System.Boolean</td>\n    </tr>\n    <tr>\n      <td>byte</td>\n      <td>System.Byte</td>\n    </tr>\n    <tr>\n      <td>sbyte</td>\n      <td>System.SByte</td>\n    </tr>\n    <tr>\n      <td>char</td>\n      <td>System.Char</td>\n    </tr>\n    <tr>\n      <td>decimal</td>\n      <td>System.Decimal</td>\n    </tr>\n    <tr>\n      <td>double</td>\n      <td>System.Double</td>\n    </tr>\n    <tr>\n      <td>float</td>\n      <td>System.Single</td>\n    </tr>\n    <tr>\n      <td>int</td>\n      <td>System.Int32</td>\n    </tr>\n    <tr>\n      <td>uint</td>\n      <td>System.UInt32</td>\n    </tr>\n    <tr>\n      <td>long</td>\n      <td>System.Int64</td>\n    </tr>\n    <tr>\n      <td>ulong</td>\n      <td>System.UInt64</td>\n    </tr>\n    <tr>\n      <td>short</td>\n      <td>System.Int16</td>\n    </tr>\n    <tr>\n      <td>ushort</td>\n      <td>System.UInt16</td>\n    </tr>\n    <tr>\n      <td>string</td>\n      <td>System.String</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnamespace myLib\n{\n  public class Foo\n  {\n    static readonly int x = 1;  // Noncompliant\n    static readonly int y = x + 4; // Noncompliant\n    static readonly string s = \"Bar\";  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace myLib\n{\n  public class Foo\n  {\n    const int x = 1;\n    const int y = x + 4;\n    const string s = \"Bar\";\n  }\n}\n</pre>\n\r\n",
          "title": "\"static readonly\" constants should be \"const\" instead",
          "language": "C#",
          "key": "S3962"
        }
      ],
      "tags": [
        "performance"
      ],
      "title": "\"static readonly\" constants should be \"const\" instead",
      "key": "S3962"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "cert",
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// the two statements seems to be attached to the if statement, but that is only true for the first one:\nif (condition)\n  ExecuteSomething();\n  CheckSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n{\n  ExecuteSomething();\n  CheckSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>\n\r\n",
          "title": "Control structures should use curly braces",
          "language": "C#",
          "key": "S121"
        }
      ],
      "tags": [
        "misra",
        "cert",
        "pitfall"
      ],
      "title": "Control structures should use curly braces",
      "key": "S121"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Since .Net Framework version 2.0 it is not necessary to declare a delegate that specifies a class derived from <code>System.EventArgs</code>. The\n<code>System.EventHandler&lt;TEventArgs&gt;</code> delegate mechanism should be used instead as it allows any class derived from\n<code>EventArgs</code> to be used with that handler.</p>\n<p>This rule raises an issue when an old style delegate is used as an event handler.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyEventArgs : EventArgs\n{\n}\n\npublic delegate void MyEventHandler(object sender, MyEventArgs e); // Noncompliant\n\npublic class EventProducer\n{\n  public event MyEventHandler MyEvent;\n\n  protected virtual void OnMyEvent(MyEventArgs e)\n  {\n    if (MyEvent != null)\n    {\n      MyEvent(e);\n    }\n  }\n}\n\npublic class EventConsumer\n{\n  public EventConsumer(EventProducer producer)\n  {\n      producer.MyEvent += HandleEvent;\n  }\n\n  private void HandleEvent(object sender, MyEventArgs e)\n  {\n    // Do something...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyEventArgs : EventArgs\n{\n}\n\npublic class EventProducer\n{\n  public event EventHandler&lt;MyEventArgs&gt; MyEvent;\n\n  protected virtual void OnMyEvent(MyEventArgs e)\n  {\n    if (MyEvent != null)\n    {\n      MyEvent(e);\n    }\n  }\n}\n\npublic class EventConsumer\n{\n  public EventConsumer(EventProducer producer)\n  {\n      producer.MyEvent += HandleEvent;\n  }\n\n  private void HandleEvent(object sender, MyEventArgs e)\n  {\n    // Do something...\n  }\n}\n</pre>\n\n",
          "title": "Generic event handlers should be used",
          "language": "C#",
          "key": "S3908"
        }
      ],
      "tags": [],
      "title": "Generic event handlers should be used",
      "key": "S3908"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>When a reference parameter (keyword <code>ref</code>) is used, the passed argument type must exactly match the reference parameter type. This means\nthat to be able to pass a derived type, it must be cast and assigned to a variable of the proper type. Use of generic methods eliminates that\ncumbersome down casting and should therefore be preferred.</p>\n<p>This rule raises an issue when a method contains a <code>ref</code> parameter of type <code>System.Object</code>.</p>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void Bar&lt;T&gt;(ref T ref1, ref T ref2)\n    {\n    }\n  }\n}\n</pre>\n\n",
          "title": "Generics should be used when appropriate",
          "language": "C#",
          "key": "S4047"
        }
      ],
      "tags": [],
      "title": "Generics should be used when appropriate",
      "key": "S4047"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>A method using the <code>VarArgs</code> calling convention is not Common Language Specification (CLS) compliant and might not be accessible across\nprogramming languages, while the <code>params</code> keyword works the same way and is CLS compliant.</p>\n<p>This rule raises an issue when a <code>public</code> or <code>protected</code> type contains a <code>public</code> or <code>protected</code> method\nthat uses the <code>VarArgs</code> calling convention.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(__arglist) // Noncompliant\n        {\n            ArgIterator argumentIterator = new ArgIterator(__arglist);\n            for(int i = 0; i &lt; argumentIterator.GetRemainingCount(); i++)\n            {\n                Console.WriteLine(\n                    __refvalue(argumentIterator.GetNextArg(), string));\n            }\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\n[assembly: CLSCompliant(true)]\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(params string[] wordList)\n        {\n            for(int i = 0; i &lt; wordList.Length; i++)\n            {\n                Console.WriteLine(wordList[i]);\n            }\n        }\n    }\n}\n</pre>\n\n",
          "title": "\"params\" should be use instead of \"varargs\"",
          "language": "C#",
          "key": "S4061"
        }
      ],
      "tags": [],
      "title": "\"params\" should be use instead of \"varargs\"",
      "key": "S4061"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert"
          ],
          "severity": "Blocker",
          "description": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (GetTrue() | GetFalse()) // Noncompliant; both sides evaluated\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (GetTrue() || GetFalse()) // true short-circuit logic\n{\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>\n\r\n",
          "title": "Short-circuit logic should be used in boolean contexts",
          "language": "C#",
          "key": "S2178"
        },
        {
          "tags": [
            "cert"
          ],
          "severity": "Blocker",
          "description": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIf GetTrue() Or GetFalse() Then ' Noncompliant; both sides evaluated\nEnd If\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIf GetTrue() OrElse GetFalse() Then ' true short-circuit logic\nEnd If\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>\n\r\n",
          "title": "Short-circuit logic should be used in boolean contexts",
          "language": "VB.NET",
          "key": "S2178"
        }
      ],
      "tags": [
        "cert"
      ],
      "title": "Short-circuit logic should be used in boolean contexts",
      "key": "S2178"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Using <code>string.Equals</code> to determine if a string is empty is significantly slower than using <code>string.IsNullOrEmpty()</code> or\nchecking for <code>string.Length == 0</code>. <code>string.IsNullOrEmpty()</code> is both clear and concise, and therefore preferred to laborious,\nerror-prone, manual null- and emptiness-checking.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\"\".Equals(name); // Noncompliant\n!name.Equals(\"\"); // Noncompliant\nname.Equals(string.Empty); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nname != null &amp;&amp; name.Length &gt; 0 // Compliant but more error prone\n!string.IsNullOrEmpty(name)\nstring.IsNullOrEmpty(name)\n</pre>\n\r\n",
          "title": "\"string.IsNullOrEmpty\" should be used",
          "language": "C#",
          "key": "S3256"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "\"string.IsNullOrEmpty\" should be used",
      "key": "S3256"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>\nclass is a safe alternative and should be preferred. At minimum, an overload of the method taking a <code>System.Uri</code> as a parameter should be\nprovided in each class that contains a method with an apparent Uri passed as a <code>string</code>.</p>\n<p>This rule raises issues when a method has a string parameter with a name containing \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\" or \"Url\", and the type\ndoesn't declare a corresponding overload taking an <code>System.Uri</code> parameter instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n\n      public void FetchResource(string uriString) { } // Noncompliant\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n\n      public void FetchResource(string uriString)\n      {\n          FetchResource(new Uri(uriString));\n      }\n\n      public void FetchResource(Uri uri) { }\n   }\n}\n</pre>\n\r\n",
          "title": "URI Parameters should not be strings",
          "language": "C#",
          "key": "S3994"
        }
      ],
      "tags": [],
      "title": "URI Parameters should not be strings",
      "key": "S3994"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>\nclass is a safe alternative and should be preferred.</p>\n<p>This rule raises an issue when a method has a <code>string</code> return type and its name contains \"Uri\", \"Urn\", or \"Url\" or begins with \"uri\",\n\"urn\", or \"url\".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      public string GetParentUri() // Noncompliant\n      {\n         return \"http://www.mysite.com\";\n      }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n\n      public Uri GetParentUri()\n      {\n         return new URI(\"http://www.mysite.com\");\n      }\n   }\n}\n</pre>\n\r\n",
          "title": "URI return values should not be strings",
          "language": "C#",
          "key": "S3995"
        }
      ],
      "tags": [],
      "title": "URI return values should not be strings",
      "key": "S3995"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>\nclass is a safe alternative and should be preferred.</p>\n<p>This rule raises an issue when a property is a string type and its name contains \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\" or \"Url\".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      string myUri;\n\n      public string MyUri // Noncompliant\n      {\n         get { return myURI; }\n         set { myUri = value; }\n      }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      Uri myUri;\n\n      public Uri MyUri\n      {\n         get { return myURI; }\n         set { myUri = value; }\n      }\n   }\n}\n</pre>\n\r\n",
          "title": "URI properties should not be strings",
          "language": "C#",
          "key": "S3996"
        }
      ],
      "tags": [],
      "title": "URI properties should not be strings",
      "key": "S3996"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>\nclass is a safe alternative and should be preferred.</p>\n<p>This rule raises an issue when two overloads differ only by the string / <code>Uri</code> parameter and the string overload doesn't call the\n<code>Uri</code> overload. It is assumed that the string parameter represents a URI because of the exact match besides that parameter type. It stands\nto reason that the safer overload should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      public void FetchResource(string uriString) // Noncompliant\n      {\n         // No calls to FetResource(Uri)\n      }\n\n      public void FetchResource(Uri uri) { }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      public void FetchResource(string uriString)\n      {\n          FetchResource(new Uri(uriString));\n      }\n\n      public void FetchResource(Uri uri) { }\n   }\n}\n</pre>\n\n",
          "title": "String URI overloads should call \"System.Uri\" overloads",
          "language": "C#",
          "key": "S3997"
        }
      ],
      "tags": [],
      "title": "String URI overloads should call \"System.Uri\" overloads",
      "key": "S3997"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>\nclass is a safe alternative and should be preferred.</p>\n<p>This rule raises an issue when a called method has a string parameter with a name containing \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\" or \"Url\" and the\ndeclaring type contains a corresponding overload that takes a <code>System.Uri</code> as a parameter.</p>\n<p>When there is a choice between two overloads that differ only regarding the representation of a URI, the user should choose the overload that takes\na <code>System.Uri</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class Foo\n   {\n      public void FetchResource(string uriString) { }\n      public void FetchResource(Uri uri) { }\n\n      public string ReadResource(string uriString, string name, bool isLocal) { }\n      public string ReadResource(Uri uri, string name, bool isLocal) { }\n\n      public void Main() {\n        FetchResource(\"http://www.mysite.com\"); // Noncompliant\n        ReadResource(\"http://www.mysite.com\", \"foo-resource\", true); // Noncompliant\n      }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class Foo\n   {\n      public void FetchResource(string uriString) { }\n      public void FetchResource(Uri uri) { }\n\n      public string ReadResource(string uriString, string name, bool isLocal) { }\n      public string ReadResource(Uri uri, string name, bool isLocal) { }\n\n      public void Main() {\n        FetchResource(new Uri(\"http://www.mysite.com\"));\n        ReadResource(new Uri(\"http://www.mysite.com\"), \"foo-resource\", true);\n      }\n   }\n}\n</pre>\n\n",
          "title": "\"System.Uri\" arguments should be used instead of strings",
          "language": "C#",
          "key": "S4005"
        }
      ],
      "tags": [],
      "title": "\"System.Uri\" arguments should be used instead of strings",
      "key": "S4005"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Blocker",
          "description": "<p>In property and indexer <code>set</code> methods, and in event <code>add</code> and <code>remove</code> methods, the implicit <code>value</code>\nparameter holds the value the accessor was called with. Not using the <code>value</code> means that the accessor ignores the caller's intent which\ncould cause unexpected results at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate int count;\npublic int Count\n{\n  get { return count; }\n  set { count = 42; } // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate int count;\npublic int Count\n{\n  get { return count; }\n  set { count = value; }\n}\n</pre>\n<p>or</p>\n<pre>\npublic int Count\n{\n  get { return count; }\n  set { throw new InvalidOperationException(); }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the setter is empty and part of the implementation of an <code>interface</code> . The assumption is that this\npart of the interface is not meaningful to that particular implementation. A good example of that would be a \"sink\" logger that discards any logs.</p>\n\r\n",
          "title": "\"value\" parameters should be used",
          "language": "C#",
          "key": "S3237"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "\"value\" parameters should be used",
      "key": "S3237"
    },
    {
      "implementations": [
        {
          "tags": [
            "unused"
          ],
          "severity": "Major",
          "description": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int PickNumber()\n{\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int PickNumber()\n{\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n</pre>\n\r\n",
          "title": "Values should not be uselessly incremented",
          "language": "C#",
          "key": "S2123"
        }
      ],
      "tags": [
        "unused"
      ],
      "title": "Values should not be uselessly incremented",
      "key": "S2123"
    },
    {
      "implementations": [
        {
          "tags": [
            "performance"
          ],
          "severity": "Major",
          "description": "<p>If you're using a <code>struct</code>, it is likely because you're interested in performance. But by failing to implement\n<code>IEquatable&lt;T&gt;</code> you're loosing performance when comparisons are made because without <code>IEquatable&lt;T&gt;</code>, boxing and\nreflection are used to make comparisons. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstruct MyStruct  // Noncompliant\n{\n  private int i;\n  public int I\n  {\n    //...\n  }\n}\n</pre>\n\r\n",
          "title": "Value types should implement \"IEquatable<T>\"",
          "language": "C#",
          "key": "S3898"
        }
      ],
      "tags": [
        "performance"
      ],
      "title": "Value types should implement \"IEquatable<T>\"",
      "key": "S3898"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo\n{\n  public int myField;\n\n  public void DoSomething()\n  {\n    int myField = 0;  // Noncompliant\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>\n\r\n",
          "title": "Local variables should not shadow class fields",
          "language": "C#",
          "key": "S1117"
        }
      ],
      "tags": [
        "cert",
        "pitfall"
      ],
      "title": "Local variables should not shadow class fields",
      "key": "S1117"
    },
    {
      "implementations": [
        {
          "tags": [
            "unused"
          ],
          "severity": "Minor",
          "description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int NumberOfMinutes(int hours)\n{\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int NumberOfMinutes(int hours)\n{\n  return hours * 60;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Unused locally created resources in a <code>using</code> statement are not reported.</p>\n<pre>\nusing(var t = new TestTimer()) // t never used, but compliant.\n{\n  //...\n}\n</pre>\n\r\n",
          "title": "Unused local variables should be removed",
          "language": "C#",
          "key": "S1481"
        }
      ],
      "tags": [
        "unused"
      ],
      "title": "Unused local variables should be removed",
      "key": "S1481"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Critical",
          "description": "<p>Field-like events are events that do not have explicit <code>add</code> and <code>remove</code> methods. The compiler generates a\n<code>private</code> <code>delegate</code> field to back the event, as well as generating the implicit <code>add</code> and <code>remove</code>\nmethods.</p>\n<p>When a <code>virtual</code> field-like <code>event</code> is overridden by another field-like <code>event</code>, the behavior of the C# compiler\nis to generate a new <code>private</code> <code>delegate</code> field in the derived class, separate from the parent's field. This results in multiple\nand separate events being created, which is rarely what's actually intended.</p>\n<p>To prevent this, remove the <code>virtual</code> designation from the parent class event.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nabstract class Car\n{\n  public virtual event EventHandler OnRefueled; // Noncompliant\n\n  public void Refuel()\n  {\n    // This OnRefueld will always be null\n     if (OnRefueled != null)\n     {\n       OnRefueled(this, null);\n     }\n  }\n}\n\nclass R2 : Car\n{\n  public override event EventHandler OnRefueled;\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var r2 = new R2();\n    r2.OnRefueled += new EventHandler((o, a) =&gt;\n    {\n      Console.WriteLine(\"This event will never be called\");\n    });\n    r2.Refuel();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nabstract class Car\n{\n  public event EventHandler OnRefueled; // Compliant\n\n  public void Refuel()\n  {\n    if (OnRefueled != null)\n    {\n      OnRefueled(this, null);\n    }\n  }\n}\n\nclass R2 : Car {}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var r2 = new R2();\n    r2.OnRefueled += new EventHandler((o, a) =&gt;\n    {\n      Console.WriteLine(\"This event will be called\");\n    });\n    r2.Refuel();\n  }\n}\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Remove 'virtual' keyword</li></ul>",
          "title": "Field-like events should not be virtual",
          "language": "C#",
          "key": "S2290"
        }
      ],
      "tags": [],
      "title": "Field-like events should not be virtual",
      "key": "S2290"
    },
    {
      "implementations": [
        {
          "tags": [
            "api-design"
          ],
          "severity": "Major",
          "description": "<p>The <code>ServiceContract</code> attribute specifies that a class or interface defines the communication contract of a Windows Communication\nFoundation (WCF) service. The service operations of this class or interface are defined by <code>OperationContract</code> attributes added to methods.\nIt doesn't make sense to define a contract without any service operations; thus, in a <code>ServiceContract</code> class or interface at least one\nmethod should be annotated with <code>OperationContract</code>. Similarly, WCF only serves <code>OperationContract</code> methods that are defined\ninside <code>ServiceContract</code> classes or interfaces; thus, this rule also checks that <code>ServiceContract</code> is added to the containing\ntype of <code>OperationContract</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[ServiceContract]\ninterface IMyService // Noncompliant\n{\n  int MyServiceMethod();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[ServiceContract]\ninterface IMyService\n{\n  [OperationContract]\n  int MyServiceMethod();\n}\n</pre>\n\r\n",
          "title": "\"ServiceContract\" and \"OperationContract\" attributes should be used together",
          "language": "C#",
          "key": "S3597"
        }
      ],
      "tags": [
        "api-design"
      ],
      "title": "\"ServiceContract\" and \"OperationContract\" attributes should be used together",
      "key": "S3597"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>When declaring a Windows Communication Foundation (WCF) <code>OperationContract</code> method one-way, that service method won't return any result,\nnot even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Specifying a return\ntype therefore does not make sense.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[ServiceContract]\ninterface IMyService\n{\n  [OperationContract(IsOneWay = true)]\n  int SomethingHappened(int parameter); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[ServiceContract]\ninterface IMyService\n{\n  [OperationContract(IsOneWay = true)]\n  void SomethingHappened(int parameter);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule doesn't report if <code>OperationContractAttribute.AsyncPattern</code> is set to <code>true</code>.</p>\n\r\n",
          "title": "One-way \"OperationContract\" methods should have \"void\" return type",
          "language": "C#",
          "key": "S3598"
        }
      ],
      "tags": [],
      "title": "One-way \"OperationContract\" methods should have \"void\" return type",
      "key": "S3598"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Array literals are more compact than array creation expressions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo = New String() {\"a\", \"b\", \"c\"} ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo = {\"a\", \"b\", \"c\"}              ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Use an array literal</li></ul>",
          "title": "Array literals should be used instead of array creation expressions",
          "language": "VB.NET",
          "key": "S2355"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "Array literals should be used instead of array creation expressions",
      "key": "S2355"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo() As String ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo As String() ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Move the array designator to the type</li></ul>",
          "title": "Array designators \"()\" should be on the type, not the variable",
          "language": "VB.NET",
          "key": "S1197"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Array designators \"()\" should be on the type, not the variable",
      "key": "S1197"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>The <code>... = {</code>} syntax is more compact, more readable and less error-prone.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n  Sub Main()\n    Dim foo(1) As String   ' Noncompliant\n    foo(0) = \"foo\"\n    foo(1) = \"bar\"\n  End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n  Sub Main()\n    Dim foo = {\"foo\", \"bar\"}  ' Compliant\n  End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "Arrays should be initialized using the \"... = {}\" syntax",
          "language": "VB.NET",
          "key": "S2429"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "Arrays should be initialized using the \"... = {}\" syntax",
      "key": "S2429"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">legalCommentPattern</dt><dd><span class=\"param-description\">Pattern for text of trailing comments that are allowed.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^'\\s*\\S+\\s*$</span></dd></dl><p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default comment pattern <code>^'\\s*\\S+\\s*$</code>, which ignores single word comments:</p>\n<pre>\nModule Module1\n  Sub Main()\n    Console.WriteLine(\"Hello, world!\") ' Noncompliant - My first program!\n    Console.WriteLine(\"Hello, world!\") ' CompliantOneWord\n  End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n  Sub Main()\n    ' Compliant - My first program!\n    Console.WriteLine(\"Hello, world!\")\n    Console.WriteLine(\"Hello, world!\") ' CompliantOneWord\n  End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "Comments should not be located at the end of lines of code",
          "language": "VB.NET",
          "key": "S139"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Comments should not be located at the end of lines of code",
      "key": "S139"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "cert",
            "suspicious"
          ],
          "severity": "Blocker",
          "description": "<p><code>End</code> statements exit the control flow of the program in an unstructured way. This statement stops code execution immediately without\nexecuting <code>Dispose</code> or <code>Finalize</code> methods, or executing <code>Finally</code> blocks. Therefore, it should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Print(ByVal str As String)\n       Try\n            ...\n            End       ' Noncompliant\n        Finally\n            ' do something important here\n            ...\n        End Try\n    End Sub\nEnd Module\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/382\">MITRE, CWE-382</a> - J2EE Bad Practices: Use of System.exit() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PoYbAQ\">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>\n</ul>\n\r\n",
          "title": "\"End\" statements should not be used",
          "language": "VB.NET",
          "key": "S1147"
        }
      ],
      "tags": [
        "cwe",
        "cert",
        "suspicious"
      ],
      "title": "\"End\" statements should not be used",
      "key": "S1147"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>\"After\" and \"Before\" prefixes or suffixes should not be used to indicate pre and post events. The concepts of before and after should be given to\nevents using the present and past tense.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nClass Foo\n    Event BeforeClose() ' Noncompliant\n    Event AfterClose()  ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Event Closing()     ' Compliant\n    Event Closed()      ' Compliant\nEnd Class\n</pre>\n\r\n",
          "title": "Event names should not have \"Before\" or \"After\" as a prefix or suffix",
          "language": "VB.NET",
          "key": "S2349"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Event names should not have \"Before\" or \"After\" as a prefix or suffix",
      "key": "S2349"
    },
    {
      "implementations": [
        {
          "tags": [
            "brain-overload",
            "bad-practice"
          ],
          "severity": "Major",
          "description": "<p>Other than <code>Exit Select</code>, using an <code>Exit</code> statement is never a good idea.</p>\n<p><code>Exit Do</code>, <code>Exit For</code>, <code>Exit Try</code>, and <code>Exit While</code> will all result in unstructured control flow, i.e.\nspaghetti code.</p>\n<p><code>Exit Function</code>, <code>Exit Property</code>, and <code>Exit Sub</code> are all poor, less-readable substitutes for a simple\n<code>return</code>, and if used with code that should return a value (<code>Exit Function</code> and in some cases <code>Exit Property</code>) they\ncould result in a <code>NullReferenceException</code>.</p>\n<p>This rule raises an issue for all uses of <code>Exit</code> except <code>Exit Select</code> and <code>Exit Do</code> statements in loops without\ncondition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPublic Class Sample\n  Dim condition As Boolean\n\n  Public Sub MySub()\n    If condition Then\n      Exit Sub                  ' Noncompliant\n    End If\n\n    For index = 1 To 10\n      If index = 5 Then\n          Exit For               ' Noncompliant\n      End If\n      ' ...\n    Next\n  End Sub\n  Function MyFunction() As Object\n    ' ...\n    MyFunction = 42\n    Exit Function              ' Noncompliant\n  End Function\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Class Sample\n  Dim condition As Boolean\n\n  Public Sub MySub()\n    If condition Then\n        Return\n    End If\n\n    For index = 1 To 4\n        ' ...\n    Next\n  End Sub\n  Function MyFunction() As Object\n    ' ...\n    Return 42\n  End Function\nEnd Class\n</pre>\n\r\n",
          "title": "\"Exit\" statements should not be used",
          "language": "VB.NET",
          "key": "S3385"
        }
      ],
      "tags": [
        "brain-overload",
        "bad-practice"
      ],
      "title": "\"Exit\" statements should not be used",
      "key": "S3385"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Major",
          "description": "<p>Indexed properties are meant to represent access to a logical collection. When multiple parameters are required, this design guideline may be\nviolated, and refactoring the property into a method is preferable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    ReadOnly Property Sum(ByVal a As Integer, ByVal b As Integer) ' Noncompliant\n        Get\n            Return a + b\n        End Get\n    End Property\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Function Sum(ByVal a As Integer, ByVal b As Integer)          ' Compliant\n        Return a + b\n    End Function\nEnd Module\n</pre>\n\r\n",
          "title": "Indexed properties with more than one parameter should not be used",
          "language": "VB.NET",
          "key": "S2352"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "Indexed properties with more than one parameter should not be used",
      "key": "S2352"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<p>To improve the code readability, the explicit line continuation character, <code>_</code>, should not be used. Instead, it is better to break lines\nafter an operator.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        ' Noncompliant\n        Console.WriteLine(\"Hello\" _\n                          &amp; \"world\")\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n\n        Console.WriteLine(\"Hello\" &amp;\n                          \"world\")\n    End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "Line continuations should not be used",
          "language": "VB.NET",
          "key": "S2354"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Line continuations should not be used",
      "key": "S2354"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Major",
          "description": "<p>The <code>... IsNot ...</code> syntax is more compact and more readable than the <code>Not ... Is ...</code> syntax.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim a = Not \"a\" Is Nothing ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim a = \"a\" IsNot Nothing  ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Replace 'Not...Is...' with 'IsNot'.</li></ul>",
          "title": "\"IsNot\" should be used instead of \"Not ... Is ...\"",
          "language": "VB.NET",
          "key": "S2358"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "\"IsNot\" should be used instead of \"Not ... Is ...\"",
      "key": "S2358"
    },
    {
      "implementations": [
        {
          "tags": [
            "bad-practice"
          ],
          "severity": "Major",
          "description": "<p>Prefer the use of <code>Try ... Catch</code> blocks instead of <code>On Error</code> statements.</p>\n<p>Visual Basic .NET and Visual Basic 2005 offer structured exception handling that provides a powerful, more readable alternative to the <code>On\nError Goto</code> error handling from previous versions of Microsoft Visual Basic. Structured exception handling is more powerful because it allows\nyou to nest error handlers inside other error handlers within the same procedure. Furthermore, structured exception handling uses a block syntax\nsimilar to the <code>If...Else...End If</code> statement. This makes Visual Basic .NET and Visual Basic 2005 code more readable and easier to\nmaintain.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSub DivideByZero()\n  On Error GoTo nextstep\n  Dim result As Integer\n  Dim num As Integer\n  num = 100\n  result = num / 0\nnextstep:\n  System.Console.WriteLine(\"Error\")\nEnd Sub\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSub DivideByZero()\n  Try\n    Dim result As Integer\n    Dim num As Integer\n    num = 100\n    result = num / 0\n  Catch\n    System.Console.WriteLine(\"Error\")\n  End Try\nEnd Sub\n</pre>\n\r\n",
          "title": "\"On Error\" statements should not be used",
          "language": "VB.NET",
          "key": "S2359"
        }
      ],
      "tags": [
        "bad-practice"
      ],
      "title": "\"On Error\" statements should not be used",
      "key": "S2359"
    },
    {
      "implementations": [
        {
          "tags": [
            "unused",
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<p>Visual Basic .NET, unlike many other programming languages, has no \"fall-through\" for its <code>Select</code> cases. Each case already has an\nimplicit <code>Exit Select</code> as its last instruction. It therefore is redundant to explicitly add one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n  Sub Main()\n    Dim x = 0\n    Select Case x\n      Case 0\n        Console.WriteLine(\"0\")\n        Exit Select                ' Noncompliant\n      Case Else\n        Console.WriteLine(\"Not 0\")\n        Exit Select                ' Noncompliant\n    End Select\n  End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n  Sub Main()\n    Dim x = 0\n    Select Case x\n      Case 0                         ' Compliant\n        Console.WriteLine(\"0\")\n      Case Else                      ' Compliant\n        Console.WriteLine(\"Not 0\")\n    End Select\n  End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "VB.Net: \"Exit Select\" statements should not be used redundantly",
          "language": "VB.NET",
          "key": "S2951"
        }
      ],
      "tags": [
        "unused",
        "clumsy"
      ],
      "title": "VB.Net: \"Exit Select\" statements should not be used redundantly",
      "key": "S2951"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>A <code>Do ... Loop</code> without a <code>While</code> or <code>Until</code> condition must be terminated by an unstructured <code>Exit Do</code>\nstatement. It is safer and more readable to use structured loops instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim i = 1\n\n        Do                        ' Non-Compliant\n            If i = 10 Then\n                Exit Do\n            End If\n\n            Console.WriteLine(i)\n\n            i = i + 1\n        Loop\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        For i = 1 To 9            ' Compliant\n            Console.WriteLine(i)\n        Next\n    End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "\"Do\" loops should not be used without a \"While\" or \"Until\" condition",
          "language": "VB.NET",
          "key": "S2340"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "\"Do\" loops should not be used without a \"While\" or \"Until\" condition",
      "key": "S2340"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Critical",
          "description": "<p>Consistently using the <code>&amp;</code> operator for string concatenation make the developer intentions clear.</p>\n<p><code>&amp;</code>, unlike <code>+</code>, will convert its operands to strings and perform an actual concatenation.</p>\n<p><code>+</code> on the other hand can be an addition, or a concatenation, depending on the operand types.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"1\" + 2) ' Noncompliant - will display \"3\"\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Console.WriteLine(1 &amp; 2)   ' Compliant - will display \"12\"\n        Console.WriteLine(1 + 2)   ' Compliant - but will display \"3\"\n        Console.WriteLine(\"1\" &amp; 2) ' Compliant - will display \"12\"\n    End Sub\nEnd Module\n</pre>\n\r\n<h2>Code Fixes</h2><ul><li>Change to '&'</li></ul>",
          "title": "The \"&\" operator should be used to concatenate strings",
          "language": "VB.NET",
          "key": "S1645"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "The \"&\" operator should be used to concatenate strings",
      "key": "S1645"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Critical",
          "description": "<p>Unsigned integers have different arithmetic operators than signed ones - operators that few developers understand. Therefore, signed types should\nbe preferred where possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo1 As UShort   ' Noncompliant\n        Dim foo2 As UInteger ' Noncompliant\n        Dim foo3 As ULong    ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo1 As Short\n        Dim foo2 As Integer\n        Dim foo3 As Long\n    End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "Signed types should be preferred to unsigned ones",
          "language": "VB.NET",
          "key": "S2374"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Signed types should be preferred to unsigned ones",
      "key": "S2374"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">minimumSeriesLength</dt><dd><span class=\"param-description\">Minimum length a series must have to trigger an issue.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">6</span></dd></dl><p>Using the <code>With</code> statement for a series of calls to the same object makes the code more readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value of 6:</p>\n<pre>\nModule Module1\n    Dim product = New With {.Name = \"paperclips\", .RetailPrice = 1.2, .WholesalePrice = 0.6, .A = 0, .B = 0, .C = 0}\n\n    Sub Main()\n        product.Name = \"\"           ' Noncompliant\n        product.RetailPrice = 0\n        product.WholesalePrice = 0\n        product.A = 0\n        product.B = 0\n        product.C = 0\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Dim product = New With {.Name = \"paperclips\", .RetailPrice = 1.2, .WholesalePrice = 0.6, .A = 0, .B = 0, .C = 0}\n\n    Sub Main()\n        With product\n            .Name = \"\"\n            .RetailPrice = 0\n            .WholesalePrice = 0\n            .A = 0\n            .B = 0\n            .C = 0\n        End With\n    End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "\"With\" statements should be used for a series of calls to the same object",
          "language": "VB.NET",
          "key": "S2375"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "\"With\" statements should be used for a series of calls to the same object",
      "key": "S2375"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the enumeration value names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all enumeration value names match a provided regular\nexpression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nEnum Foo\n    fooValue   ' Noncompliant\nEnd Enum\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEnum Foo\n    FooValue   ' Compliant\nEnd Enum\n</pre>\n\r\n",
          "title": "Enumeration values should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2343"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Enumeration values should comply with a naming convention",
      "key": "S2343"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the even handler names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^(([a-z][a-z0-9]*)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?_)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all even handler names match a provided regular\nexpression.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Either in Pascal case, i.e. starting with an upper case letter, e.g. OnMyButtonClicked </li>\n  <li> Or, a subject, in Pascal or camel case, followed by an underscore followed by an event name, in Pascal case, e.g. btn1_Clicked </li>\n</ul>\n<p>Event handlers with a <code>handles</code> clause and two-parameter methods with <code>EventArgs</code> second parameter are covered by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^(([a-z][a-z0-9]*)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?_)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nModule Module1\n    Sub subject__SomeEvent() Handles X.SomeEvent   ' Noncompliant - two underscores\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub subject_SomeEvent() Handles X.SomeEvent    ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "Event handlers should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2347"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Event handlers should comply with a naming convention",
      "key": "S2347"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the event names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all even names match a provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nClass Foo\n    Event fooEvent() ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Event FooEvent() ' Compliant\nEnd Class\n</pre>\n\r\n",
          "title": "Events should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2348"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Events should comply with a naming convention",
      "key": "S2348"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Major",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the function names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all subroutine and function names match a provided regular\nexpression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n  <li> Event handlers with a handles clause and two-parameter methods with <code>EventArgs</code> second parameter are not covered by this rule. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>\n<pre>\nModule Module1\n  Sub bad_subroutine()                      ' Noncompliant\n  End Sub\n\n  Public Function Bad_Function() As Integer ' Noncompliant\n    Return 42\n  End Function\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n  Sub GoodSubroutine()                      ' Compliant\n  End Sub\n\n  Public Function GoodFunction() As Integer ' Compliant\n    Return 42\n  End Function\nEnd Module\n</pre>\n\r\n",
          "title": "Functions and procedures should comply with a naming convention",
          "language": "VB.NET",
          "key": "S1542"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Functions and procedures should comply with a naming convention",
      "key": "S1542"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>In most cases, indexed properties should be named Item for consistency. Exceptions are when there exists a name which is obviously better, for\nexample <code>System.String.Chars(System.Int32)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Dim array = {\"apple\", \"banana\", \"orange\", \"strawberry\"}\n\n    ReadOnly Property Foo(ByVal index As Integer)  ' Noncompliant\n        Get\n            Return array(index)\n        End Get\n    End Property\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Dim array = {\"apple\", \"banana\", \"orange\", \"strawberry\"}\n\n    ReadOnly Property Item(ByVal index As Integer)\n        Get\n            Return array(index)\n        End Get\n    End Property\nEnd Module\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>\n\r\n",
          "title": "Indexed properties should be named \"Item\"",
          "language": "VB.NET",
          "key": "S2353"
        }
      ],
      "tags": [],
      "title": "Indexed properties should be named \"Item\"",
      "key": "S2353"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the interface names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^I([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</p>\n<p>This rule allows to check that all interface names match a provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Must start with an upper case 'I' character, e.g. IFoo </li>\n  <li> Followed by Pascal casing, starting with an upper case character, e.g. IEnumerable </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. IFooID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. IFooHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^I([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nInterface Foo  ' Noncompliant\nEnd Interface\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInterface IFoo ' Compliant\nEnd Interface\n</pre>\n\r\n",
          "title": "Interface names should comply with a naming convention",
          "language": "VB.NET",
          "key": "S114"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Interface names should comply with a naming convention",
      "key": "S114"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the local variable names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.This rule checks that all local variables\nfollow a naming convention.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Camel casing, starting with a lower case character, e.g. backColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. id, productID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. html </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nModule Module1\n    Sub Main()\n        Dim Foo = 0 ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo = 0 ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "Local variable names should comply with a naming convention",
          "language": "VB.NET",
          "key": "S117"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Local variable names should comply with a naming convention",
      "key": "S117"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the namespace names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?(\\.([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)*$</span></dd></dl><p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all namespace names match a provided regular\nexpression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. Microsoft, System </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. System.IO </li>\n  <li> Longer abbreviations need to be lower cased </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?(\\.([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2}))*$</code></p>\n<pre>\nNamespace foo  ' Noncompliant\nEnd Namespace\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nNamespace Foo  ' Compliant\nEnd Namespace\n</pre>\n\r\n",
          "title": "Namespace names should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2304"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Namespace names should comply with a naming convention",
      "key": "S2304"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Major",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the parameter names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</p>\n<p>This rule allows to check that all parameter names match a provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Camel casing, starting with a lower case character, e.g. backColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. id, productID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. html </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>\n<pre>\nModule Module1\n    Sub GetSomething(ByVal ID As Integer) ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub GetSomething(ByVal id As Integer) ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n",
          "title": "Method parameters should follow a naming convention",
          "language": "VB.NET",
          "key": "S1654"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Method parameters should follow a naming convention",
      "key": "S1654"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the private constant names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all <code>Private Const</code> field names comply with the\nprovided regular expression.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Optionally, can start with an underscore character or \"s_\", e.g. <em>foo, s</em>foo </li>\n  <li> Camel casing, starting with a lower case character, e.g. backColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. \"id\" in productID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. html </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nModule Module1\n    Private Const Foo = 0  ' Noncompliant\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Private Const foo = 0  ' Compliant\nEnd Module\n</pre>\n\r\n",
          "title": "Private constants should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2362"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Private constants should comply with a naming convention",
      "key": "S2362"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the private field names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all <code>Private</code> field names match the provided\nregular expression.</p>\n<p>Note that this rule does not apply to <code>Private Shared ReadOnly</code> fields, which are checked by another rule.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Optionally, can start with an underscore character or \"s_\", e.g. <em>foo, s</em>foo </li>\n  <li> Camel casing, starting with a lower case character, e.g. backColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. \"id\" in productID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. html </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nClass Foo\n    Private Foo As Integer  ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Private foo As Integer  ' Compliant\nEnd Class\n</pre>\n\r\n",
          "title": "\"Private\" fields should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2364"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "\"Private\" fields should comply with a naming convention",
      "key": "S2364"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the 'Private Shared ReadOnly' field names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all <code>Private Shared ReadOnly</code> field names comply\nwith the provided regular expression.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Optionally, can start with an underscore character or \"s_\", e.g. <em>foo, s</em>foo </li>\n  <li> Camel casing, starting with a lower case character, e.g. backColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. \"id\" in productID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. html </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nClass Foo\n    Private Shared ReadOnly Foo As Integer  ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Private Shared ReadOnly foo As Integer  ' Compliant\nEnd Class\n</pre>\n\r\n",
          "title": "\"Private Shared ReadOnly\" fields should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2363"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "\"Private Shared ReadOnly\" fields should comply with a naming convention",
      "key": "S2363"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the property names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that property names match a provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nModule Module1\n    Public Property foo As Integer   ' Noncompliant\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Public Property Foo As Integer   ' Compliant\nEnd Module\n</pre>\n\r\n",
          "title": "Properties should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2366"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Properties should comply with a naming convention",
      "key": "S2366"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the non-private constant names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private <code>Const</code> field names comply with\nthe provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nModule Module1\n    Public Const foo = 0  ' Noncompliant\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Public Const Foo = 0  ' Compliant\nEnd Module\n</pre>\n\r\n",
          "title": "Non-private constants should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2367"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Non-private constants should comply with a naming convention",
      "key": "S2367"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the non-private field names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private fields names match a provided regular\nexpression. </p>\n<p>Note that this rule does not apply to non-private <code>Shared ReadOnly</code> fields, for which there is another rule.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nClass Foo\n    Public foo As Integer  ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Public Foo As Integer  ' Compliant\nEnd Class\n</pre>\n\r\n",
          "title": "Non-private fields should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2369"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Non-private fields should comply with a naming convention",
      "key": "S2369"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the non-private 'Shared ReadOnly' field names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</span></dd></dl><p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all non-private <code>Shared ReadOnly</code> fields names\nmatch a provided regular expression.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nClass Foo\n    Public Shared ReadOnly foo As Integer  ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Public Shared ReadOnly Foo As Integer  ' Compliant\nEnd Class\n</pre>\n\r\n",
          "title": "Non-private \"Shared ReadOnly\" fields should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2370"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Non-private \"Shared ReadOnly\" fields should comply with a naming convention",
      "key": "S2370"
    },
    {
      "implementations": [
        {
          "tags": [
            "convention"
          ],
          "severity": "Minor",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the generic type parameter names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^T(([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)?</span></dd></dl><p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all generic type parameter names match a provided regular\nexpression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Must start with an upper case 'T' character, e.g. T </li>\n  <li> Followed by Pascal casing, starting with an upper case character, e.g. TKey </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. TFooID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. TFooHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default parameter value <code>^T(([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)?$</code>:</p>\n<pre>\nPublic Class Foo(Of t) ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Class Foo(Of T) ' Compliant\nEnd Class\n</pre>\n\r\n",
          "title": "Generic type parameter names should comply with a naming convention",
          "language": "VB.NET",
          "key": "S2373"
        }
      ],
      "tags": [
        "convention"
      ],
      "title": "Generic type parameter names should comply with a naming convention",
      "key": "S2373"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>The bitwise operators <code>&amp;</code>, <code>|</code> can be mistaken for the boolean operators <code>&amp;&amp;</code> and <code>||</code>.\n</p>\n<p>This rule raises an issue when <code>&amp;</code> or <code>|</code> is used in a boolean context.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (a &amp; b) { ... } // Noncompliant; &amp; used in error\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a &amp;&amp; b) { ... }\n</pre>\n<h2>Exceptions</h2>\n<p>When a file contains other bitwise operations, (<code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code>, <code>&gt;&gt;</code>,\n<code>~</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code> and\n<code>&amp;</code> or <code>|</code> used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that\nbitwise operations are truly intended in the file.</p>",
          "title": "Bitwise operators should not be used in boolean contexts",
          "language": "JavaScript",
          "key": "javascript:BitwiseOperators"
        }
      ],
      "tags": [],
      "title": "Bitwise operators should not be used in boolean contexts",
      "key": "BitwiseOperators"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p><code>eval</code> is used to evaluate a string as JavaScript code, and <code>arguments</code> is used to access function arguments through indexed\nproperties. As a consequence, <code>eval</code> and <code>arguments</code> should not be bound or assigned, because doing so would overwrite the\noriginal definitions of those two reserved words. </p>\n<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\neval = 17; // Noncompliant\narguments++; // Noncompliant\n++eval; // Noncompliant\nvar obj = { set p(arguments) { } }; // Noncompliant\nvar eval; // Noncompliant\ntry { } catch (arguments) { } // Noncompliant\nfunction x(eval) { } // Noncompliant\nfunction arguments() { } // Noncompliant\nvar y = function eval() { }; // Noncompliant\nvar f = new Function(\"arguments\", \"return 17;\"); // Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { // Compliant\n    // do something\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { }\nvar y = function fun() { };\nvar f = new Function(\"args\", \"return 17;\");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    // do something\n  }\n}\n</pre>",
          "title": "\"eval\" and \"arguments\" should not be bound or assigned",
          "language": "JavaScript",
          "key": "javascript:BoundOrAssignedEvalOrArguments"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "\"eval\" and \"arguments\" should not be bound or assigned",
      "key": "BoundOrAssignedEvalOrArguments"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "user-experience"
          ],
          "severity": "Minor",
          "description": "<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint\nin the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to\nattacks in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n  // Wait for user to resume.\n  debugger;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n</ul>",
          "title": "Debugger statements should not be used",
          "language": "JavaScript",
          "key": "javascript:DebuggerStatement"
        }
      ],
      "tags": [
        "cwe",
        "user-experience"
      ],
      "title": "Debugger statements should not be used",
      "key": "DebuggerStatement"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so they're not completely\ninaccessible).</p>\n<p>This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. Furthermore, in strict mode, declaring\narguments with the same name produces an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction compute(a, a, c) { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction compute(a, b, c) { // Compliant\n}\n</pre>",
          "title": "Function argument names should be unique",
          "language": "JavaScript",
          "key": "javascript:DuplicateFunctionArgument"
        }
      ],
      "tags": [],
      "title": "Function argument names should be unique",
      "key": "DuplicateFunctionArgument"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Major",
          "description": "<p>JavaScript allows duplicate property names in classes and object literals, but only the last instance of a duplicated name determines the actual\nvalue that will be used for it. Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause\nmisunderstandings and bugs.</p>\n<p>Defining a <code>class</code> with a duplicated <code>constructor</code> will generate an error.</p>\n<p>Before ECMAScript 2015, using duplicate names will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key\": \"value\", // Noncompliant - duplicate of \"key\"\n  'key': \"value\", // Noncompliant - duplicate of \"key\"\n  key: \"value\", // Noncompliant - duplicate of \"key\"\n  \\u006bey: \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\u006bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\x6bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  1: \"value\" // Noncompliant - duplicate of \"1\"\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key2\": \"value\",\n  'key3': \"value\",\n  key4: \"value\",\n  \\u006bey5: \"value\",\n  \"\\u006bey6\": \"value\",\n  \"\\x6bey7\": \"value\",\n  1b: \"value\"\n}\n</pre>",
          "title": "Property names should not be duplicated within a class or object literal",
          "language": "JavaScript",
          "key": "javascript:DuplicatePropertyName"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Property names should not be duplicated within a class or object literal",
      "key": "DuplicatePropertyName"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Major",
          "description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i &lt; length; i++) {}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch</code> blocks are ignored.</p>",
          "title": "Nested blocks of code should not be left empty",
          "language": "JavaScript",
          "key": "javascript:EmptyBlock"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "Nested blocks of code should not be left empty",
      "key": "EmptyBlock"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "owasp-a3"
          ],
          "severity": "Critical",
          "description": "<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Dynamically evaluating code is slow and a potential security issue when\nthe arguments haven't been properly validated.</p>\n<p>In general it is better to avoid it altogether, particularly when there are safer alternatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar value = eval('obj.' + propName); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar value = obj[propName];\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when the argument of the <code>eval</code> call is a literal string as it is reasonably safe.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/95.html\">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically\n  Evaluated Code ('Eval Injection') </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting\n  (XSS) </li>\n</ul>",
          "title": "Code should not be dynamically injected and executed",
          "language": "JavaScript",
          "key": "javascript:Eval"
        }
      ],
      "tags": [
        "cwe",
        "owasp-a3"
      ],
      "title": "Code should not be dynamically injected and executed",
      "key": "Eval"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Major",
          "description": "<p>Defining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer\nscopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar funs = [];\nfor (var i = 0; i &lt; 13; i++) {\n  funs[i] = function() { // Non-Compliant\n    return i;\n  };\n}\nconsole.log(funs[0]()); // 13 instead of 0\nconsole.log(funs[1]()); // 13 instead of 1\nconsole.log(funs[2]()); // 13 instead of 2\nconsole.log(funs[3]()); // 13 instead of 3\n...\n</pre>",
          "title": "Functions should not be defined inside loops",
          "language": "JavaScript",
          "key": "javascript:FunctionDefinitionInsideLoop"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "Functions should not be defined inside loops",
      "key": "FunctionDefinitionInsideLoop"
    },
    {
      "implementations": [
        {
          "tags": [
            "bad-practice"
          ],
          "severity": "Minor",
          "description": "<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the\nbeginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message ' +\n    'actually that just keeps going and going -- an error ' +\n    'message to make the Energizer bunny blush (right through ' +\n    'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n    'you\\'ve got an error and all the extraneous whitespace is ' +\n    'just gravy.  Have a nice day.';\n</pre>",
          "title": "Multiline string literals should not be used",
          "language": "JavaScript",
          "key": "javascript:MultilineStringLiterals"
        }
      ],
      "tags": [
        "bad-practice"
      ],
      "title": "Multiline string literals should not be used",
      "key": "MultilineStringLiterals"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "cwe",
            "misra",
            "suspicious"
          ],
          "severity": "Blocker",
          "description": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                               // Ends with comment when fall-through is intentional\n    console.log(\"this case falls through\")\n    // fall through\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZoFLAQ\">CERT, MSC18-CPP.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ewHAAQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>",
          "title": "Switch cases should end with an unconditional \"break\" statement",
          "language": "JavaScript",
          "key": "javascript:NonEmptyCaseWithoutBreak"
        }
      ],
      "tags": [
        "cwe",
        "misra",
        "cert",
        "suspicious"
      ],
      "title": "Switch cases should end with an unconditional \"break\" statement",
      "key": "NonEmptyCaseWithoutBreak"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "misra",
            "pitfall"
          ],
          "severity": "Blocker",
          "description": "<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myNumber = 8;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>\n  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used </li>\n  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_QC7AQ\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a\n  decimal value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>",
          "title": "Octal values should not be used",
          "language": "JavaScript",
          "key": "javascript:OctalNumber"
        }
      ],
      "tags": [
        "misra",
        "cert",
        "pitfall"
      ],
      "title": "Octal values should not be used",
      "key": "OctalNumber"
    },
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Major",
          "description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet x = (y / 2 + 1);   //Compliant even if those parenthesis are useless for the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>",
          "title": "Redundant pairs of parentheses should be removed",
          "language": "JavaScript",
          "key": "javascript:Parentheses"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "Redundant pairs of parentheses should be removed",
      "key": "Parentheses"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Minor",
          "description": "<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,\njust remove the <code>new</code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a\nprimitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet x = new Number(\"0\");\nif (x) {\n  alert('hi');  // Shows 'hi'.\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = Number(\"0\");\nif (x) {\n  alert('hi');\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Cases when argument of primitive type constructor is a literal of the same type are ignored, except <code>new Boolean(false)</code>.</p>\n<pre>\nlet booleanObject = new Boolean(true);\nlet numberObject = new Number(0);\nlet stringObject = new String('');\n</pre>",
          "title": "Wrapper objects should not be used for primitive types",
          "language": "JavaScript",
          "key": "javascript:PrimitiveWrappers"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Wrapper objects should not be used for primitive types",
      "key": "PrimitiveWrappers"
    },
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Major",
          "description": "<p>Labels are not commonly used, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to follow,\nwhich reduces the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyLabel: {\n  let x = doSomething();\n  if (x &gt; 0) {\n    break myLabel;\n  }\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = doSomething();\nif (x &lt;= 0) {\n  doSomethingElse();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Labeled loops are ignored.</p>",
          "title": "Labels should not be used",
          "language": "JavaScript",
          "key": "javascript:S1119"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "Labels should not be used",
      "key": "S1119"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "cwe",
            "error-handling"
          ],
          "severity": "Major",
          "description": "<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar\nstatements from the suspended <code>try</code> and <code>catch</code> blocks.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force\ncontrol flow to leave a <code>finally</code> block. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; // We expect 1 to be returned\n    } catch(err) {\n        return 2; // Or 2 in cases of error\n    } finally {\n        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; // We expect 1 to be returned\n    } catch(err) {\n        return 2; // Or 2 in cases of error\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/584.html\">MITRE, CWE-584</a> - Return Inside Finally Block </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/mIEbAQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>",
          "title": "Jump statements should not occur in \"finally\" blocks",
          "language": "JavaScript",
          "key": "javascript:S1143"
        }
      ],
      "tags": [
        "cwe",
        "error-handling",
        "cert"
      ],
      "title": "Jump statements should not occur in \"finally\" blocks",
      "key": "S1143"
    },
    {
      "implementations": [
        {
          "tags": [
            "misra",
            "suspicious"
          ],
          "severity": "Blocker",
          "description": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Examples</h2>\n<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // instead of \"case WEDNESDAY\"\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i = 0 ; i &lt; X ; i++) {\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Case 1</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>",
          "title": "\"switch\" statements should not contain non-case labels",
          "language": "JavaScript",
          "key": "javascript:S1219"
        }
      ],
      "tags": [
        "misra",
        "suspicious"
      ],
      "title": "\"switch\" statements should not contain non-case labels",
      "key": "S1219"
    },
    {
      "implementations": [
        {
          "tags": [
            "cwe",
            "user-experience"
          ],
          "severity": "Minor",
          "description": "<p><code>alert(...)</code> can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive\ninformation to attackers, and should never be displayed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(unexpectedCondition)\n{\n  alert(\"Unexpected Condition\");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n</ul>",
          "title": "\"alert(...)\" should not be used",
          "language": "JavaScript",
          "key": "javascript:S1442"
        }
      ],
      "tags": [
        "cwe",
        "user-experience"
      ],
      "title": "\"alert(...)\" should not be used",
      "key": "S1442"
    },
    {
      "implementations": [
        {
          "tags": [
            "suspicious"
          ],
          "severity": "Minor",
          "description": "<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could\nlead to errors and most likely <em>will</em> lead to questions for maintainers.</p>\n<p>What was the initial intent of the developer?</p>\n<ol>\n  <li> Define a function and then execute some unrelated code inside a closure ? </li>\n  <li> Pass the second function as a parameter to the first one ? </li>\n</ol>\n<p>The first option will be the one chosen by the JavaScript interpreter.</p>\n<p>By extension, and to improve readability, any kind of function call argument should not start on new line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar fn = function () {\n  //...\n}\n\n(function () { // Noncompliant\n  //...\n})();\n</pre>\n<h2>Compliant Solution</h2>\n<p>Either</p>\n<pre>\n// define a function\nvar fn = function () {\n  //...\n}; // &lt;-- semicolon added\n\n// then execute some code inside a closure\n(function () {\n  //...\n})();\n</pre>\n<p>Or </p>\n<pre>\nvar fn = function () {\n  //...\n}(function () { // &lt;-- start function call arguments on same line\n  //...\n})();\n</pre>",
          "title": "Function call arguments should not start on new lines",
          "language": "JavaScript",
          "key": "javascript:S1472"
        }
      ],
      "tags": [
        "suspicious"
      ],
      "title": "Function call arguments should not start on new lines",
      "key": "S1472"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert"
          ],
          "severity": "Major",
          "description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction setName(name) {\n    name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction setName(name) {\n    this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>",
          "title": "Variables should not be self-assigned",
          "language": "JavaScript",
          "key": "javascript:S1656"
        }
      ],
      "tags": [
        "cert"
      ],
      "title": "Variables should not be self-assigned",
      "key": "S1656"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "misra",
            "unused"
          ],
          "severity": "Major",
          "description": "<p>Having an unconditional <code>break</code>, <code>return</code> or <code>throw</code> in a loop renders it useless; the loop will only execute once\nand the loop structure itself is simply wasted keystrokes.</p>\n<p>Having an unconditional <code>continue</code> in a loop is itself wasted keystrokes.</p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  break;  // loop only executes once\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  continue;  // this is meaningless; the loop would continue anyway\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  return;  // loop only executes once\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>",
          "title": "Jump statements should not be used unconditionally",
          "language": "JavaScript",
          "key": "javascript:S1751"
        }
      ],
      "tags": [
        "misra",
        "cert",
        "unused"
      ],
      "title": "Jump statements should not be used unconditionally",
      "key": "S1751"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert"
          ],
          "severity": "Major",
          "description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nvar j = 5 / 5; //always 1\nvar k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </p>\n<p>Moreover comma operator <code>,</code> and <code>instanceof</code> operator are ignored as there are use-cases when there usage is valid.</p>\n<pre>\nif(f !== f) { // test for NaN value\n  console.log(\"f is NaN\");\n}\n\nvar i = 1 &lt;&lt; 1; // Compliant\nvar j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:javascript:S1656} - Implements a check on <code>=</code>. </li>\n</ul>",
          "title": "Identical expressions should not be used on both sides of a binary operator",
          "language": "JavaScript",
          "key": "javascript:S1764"
        }
      ],
      "tags": [
        "cert"
      ],
      "title": "Identical expressions should not be used on both sides of a binary operator",
      "key": "S1764"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "cwe",
            "unused"
          ],
          "severity": "Major",
          "description": "<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction or when an object property is\nassigned a value that is not subsequently used. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious\nerror in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1; i &lt; b; i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1; i &lt; b; i++) {\n    x = x * a;\n  }\n  return x;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code>, <code>\"\"</code>, <code>[]</code> and\n<code>{}</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/S4IyAQ\">CERT, MSC13-CPP.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>",
          "title": "Dead stores should be removed",
          "language": "JavaScript",
          "key": "javascript:S1854"
        }
      ],
      "tags": [
        "cwe",
        "cert",
        "unused"
      ],
      "title": "Dead stores should be removed",
      "key": "S1854"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "pitfall",
            "unused"
          ],
          "severity": "Major",
          "description": "<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse\nthere is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>\n<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice\nthat.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  case 1:  // Noncompliant\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>",
          "title": "Related \"if/else if\" statements and \"cases\" in a \"switch\" should not have the same condition",
          "language": "JavaScript",
          "key": "javascript:S1862"
        }
      ],
      "tags": [
        "cert",
        "unused",
        "pitfall"
      ],
      "title": "Related \"if/else if\" statements and \"cases\" in a \"switch\" should not have the same condition",
      "key": "S1862"
    },
    {
      "implementations": [
        {
          "tags": [
            "design",
            "suspicious"
          ],
          "severity": "Major",
          "description": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<p>or </p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>",
          "title": "Two branches in a conditional structure should not have exactly the same implementation",
          "language": "JavaScript",
          "key": "javascript:S1871"
        }
      ],
      "tags": [
        "design",
        "suspicious"
      ],
      "title": "Two branches in a conditional structure should not have exactly the same implementation",
      "key": "S1871"
    },
    {
      "implementations": [
        {
          "tags": [
            "unused"
          ],
          "severity": "Major",
          "description": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar i = 0;\ni = i++; // Noncompliant; i is still zero\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar i = 0;\ni++;\n</pre>",
          "title": "Values should not be uselessly incremented",
          "language": "JavaScript",
          "key": "javascript:S2123"
        }
      ],
      "tags": [
        "unused"
      ],
      "title": "Values should not be uselessly incremented",
      "key": "S2123"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert"
          ],
          "severity": "Blocker",
          "description": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nvar j = 0;\nwhile (true) { // Noncompliant; constant end condition\n  j++;\n}\n\nvar k;\nvar b = true;\nwhile (b) { // Noncompliant; constant end condition\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\nwhile (true) { // break will potentially allow leaving the loop\n  if (someCondition) {\n    break;\n  }\n}\n\nvar k;\nvar b = true;\nwhile (b) {\n  k++;\n  b = k &lt; 10;\n}\n\nouter:\nwhile(true) {\n  while(true) {\n    break outer;\n  }\n}\n\n</pre>\n\n<h2>Known Limitations</h2>\n<ul>\n    <li>False positives: when <code>yield</code> is used - <a\n            href=\"https://jira.sonarsource.com/browse/SONARJS-877\">SONARJS-877</a>.</li>\n    <li>False positives: when an exception is raised by a function invoked within the loop.</li>\n    <li>False negatives: when a loop condition is based on an element of an array or object.</li>\n</ul>\n\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PYHfAw\">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>",
          "title": "Loops should not be infinite",
          "language": "JavaScript",
          "key": "javascript:S2189"
        }
      ],
      "tags": [
        "cert"
      ],
      "title": "Loops should not be infinite",
      "key": "S2189"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "misra"
          ],
          "severity": "Major",
          "description": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n'hello'.lastIndexOf('e'); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet char = 'hello'.lastIndexOf('e');\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>",
          "title": "Return values should not be ignored when function calls don't have any side effects",
          "language": "JavaScript",
          "key": "javascript:S2201"
        }
      ],
      "tags": [
        "misra",
        "cert"
      ],
      "title": "Return values should not be ignored when function calls don't have any side effects",
      "key": "S2201"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert"
          ],
          "severity": "Major",
          "description": "<p>A <code>for</code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run\ninfinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while</code> loops. More\ntypically, an infinite <code>for</code> loop is a bug. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i &lt; strings.length; i--) { // Noncompliant;\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 0; i &lt; strings.length; i++) {\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zYEzAg\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>",
          "title": "A \"for\" loop update clause should move the counter in the right direction",
          "language": "JavaScript",
          "key": "javascript:S2251"
        }
      ],
      "tags": [
        "cert"
      ],
      "title": "A \"for\" loop update clause should move the counter in the right direction",
      "key": "S2251"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "cwe"
          ],
          "severity": "Major",
          "description": "<p>When a variable is assigned an <code>undefined</code> or <code>null</code> value, it has no properties. Trying to access properties of such a\nvariable anyway results in a <code>TypeError</code>, causing abrupt termination of the script if the error is not caught in a <code>catch</code>\nblock. But instead of <code>catch</code>-ing this condition, it is best to avoid it altogether.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x === undefined) {\n  console.log(x.length); // Noncompliant; TypeError will be thrown\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PAw\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>",
          "title": "Properties of variables with \"null\" or \"undefined\" values should not be accessed",
          "language": "JavaScript",
          "key": "javascript:S2259"
        }
      ],
      "tags": [
        "cwe",
        "cert"
      ],
      "title": "Properties of variables with \"null\" or \"undefined\" values should not be accessed",
      "key": "S2259"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Functions declared with the <code>set</code> keyword will automatically return the values they were passed. Thus any value explicitly returned from\na setter will be ignored, and explicitly returning a value is an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n    return 42;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n  }\n}\n</pre>",
          "title": "Setters should not return values",
          "language": "JavaScript",
          "key": "javascript:S2432"
        }
      ],
      "tags": [],
      "title": "Setters should not return values",
      "key": "S2432"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "cwe",
            "misra",
            "pitfall",
            "unused"
          ],
          "severity": "Major",
          "description": "<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>",
          "title": "Conditionally executed blocks should be reachable",
          "language": "JavaScript",
          "key": "javascript:S2583"
        }
      ],
      "tags": [
        "cwe",
        "misra",
        "cert",
        "unused",
        "pitfall"
      ],
      "title": "Conditionally executed blocks should be reachable",
      "key": "S2583"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "cwe"
          ],
          "severity": "Major",
          "description": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>",
          "title": "Multiline blocks should be enclosed in curly braces",
          "language": "JavaScript",
          "key": "javascript:S2681"
        }
      ],
      "tags": [
        "cwe",
        "cert"
      ],
      "title": "Multiline blocks should be enclosed in curly braces",
      "key": "S2681"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert"
          ],
          "severity": "Major",
          "description": "<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,\nbut probably not the ones you want. </p>\n<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps\ncounter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = NaN;\n\nif (a === NaN) {  // Noncompliant; always false\n  console.log(\"a is not a number\");  // this is dead code\n}\nif (a !== NaN) { // Noncompliant; always true\n  console.log(\"a is not NaN\"); // this statement is not necessarily true\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (Number.isNaN(a)) {\n  console.log(\"a is not a number\");\n}\nif (!Number.isNaN(a)) {\n  console.log(\"a is not NaN\");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7AEqAQ\">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>\n</ul>",
          "title": "\"NaN\" should not be used in comparisons",
          "language": "JavaScript",
          "key": "javascript:S2688"
        }
      ],
      "tags": [
        "cert"
      ],
      "title": "\"NaN\" should not be used in comparisons",
      "key": "S2688"
    },
    {
      "implementations": [
        {
          "tags": [
            "pitfall"
          ],
          "severity": "Blocker",
          "description": "<p>JavaScript variable scope can be particularly difficult to understand and get right. The situation gets even worse when you consider the\n<em>accidental</em> creation of global variables, which is what happens when you declare a variable inside a function or the <code>for</code> clause\nof a for-loop without using the <code>let</code>, <code>const</code> or <code>var</code> keywords. </p>\n<p><code>let</code> and <code>const</code> were introduced in ECMAScript 2015, and are now the preferred keywords for variable declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction f(){\n  i = 1;         // Noncompliant; i is global\n\n  for (j = 0; j &lt; array.length; j++) {  // Noncompliant; j is global now too\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction f(){\n  var i = 1;\n\n  for (let j = 0; j &lt; array.length; j++) {\n    // ...\n  }\n}\n</pre>",
          "title": "Variables should be declared explicitly",
          "language": "JavaScript",
          "key": "javascript:S2703"
        }
      ],
      "tags": [
        "pitfall"
      ],
      "title": "Variables should be declared explicitly",
      "key": "S2703"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>The use of operators pairs (<code>=+</code> or <code>=-</code>) where the reversed, single operator was meant (<code>+=</code> or <code>-=</code>)\nwill compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code> and <code>=-</code> are used without any space between the two operators and when there is at least\none whitespace after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar target =-5;\nvar num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar target = -5;\nvar num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>",
          "title": "\"=+\" should not be used instead of \"+=\"",
          "language": "JavaScript",
          "key": "javascript:S2757"
        }
      ],
      "tags": [],
      "title": "\"=+\" should not be used instead of \"+=\"",
      "key": "S2757"
    },
    {
      "implementations": [
        {
          "tags": [
            "confusing"
          ],
          "severity": "Major",
          "description": "<p>This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as\neither a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with\nthe developer not realizing that the value of the variable is overwritten by the new assignment.</p>\n<p>This rule also applies to function parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = 'foo';\nfunction a() {}   // Noncompliant\nconsole.log(a);   // prints \"foo\"\n\nfunction myFunc(arg) {\n  var arg = \"event\"; // Noncompliant, argument value is lost\n}\n\nfun(); // prints \"bar\"\n\nfunction fun() {\n  console.log(\"foo\");\n}\n\nfun(); // prints \"bar\"\n\nfunction fun() {  // Noncompliant\n  console.log(\"bar\");\n}\n\nfun(); // prints \"bar\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar a = 'foo';\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  var newName = \"event\";\n}\n\nfun(); // prints \"foo\"\n\nfunction fun() {\n  print(\"foo\");\n}\n\nfun(); // prints \"foo\"\n\nfunction printBar() {\n  print(\"bar\");\n}\n\nprintBar(); // prints \"bar\"\n</pre>",
          "title": "Variables and functions should not be redeclared",
          "language": "JavaScript",
          "key": "javascript:S2814"
        }
      ],
      "tags": [
        "confusing"
      ],
      "title": "Variables and functions should not be redeclared",
      "key": "S2814"
    },
    {
      "implementations": [
        {
          "tags": [
            "html5",
            "owasp-a3"
          ],
          "severity": "Critical",
          "description": "<p>HTML5 adds the ability to send messages to documents served from other domains. According to the specification:</p>\n<blockquote>\n  Authors should not use the wildcard keyword (\n  <code>*</code>) in the\n  <code>targetOrigin</code> argument in messages that contain any confidential information, as otherwise there is no way to guarantee that the message\n  is only delivered to the recipient to which it was intended.\n</blockquote>\n<p>To mitigate the risk of sending sensitive information to a document served from a hostile or unknown domain, this rule raises an issue each time\n<code>Window.postMessage</code> is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myWindow = document.getElementById('myIFrame').contentWindow;\nmyWindow.postMessage(message, \"*\"); // Noncompliant; how do you know what you loaded in 'myIFrame' is still there?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting\n  (XSS) </li>\n</ul>",
          "title": "Cross-document messaging domains should be carefully restricted",
          "language": "JavaScript",
          "key": "javascript:S2819"
        }
      ],
      "tags": [
        "html5",
        "owasp-a3"
      ],
      "title": "Cross-document messaging domains should be carefully restricted",
      "key": "S2819"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be\nused here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion. </p>\n<p>The proper method for removing an element at a certain index would be:</p>\n<ul>\n  <li> <code>Array.prototype.splice</code> - add/remove elements from the the array </li>\n  <li> <code>Array.prototype.pop</code> - add/remove elements from the end of the array </li>\n  <li> <code>Array.prototype.shift</code> - add/remove elements from the beginning of the array </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\ndelete myArray[2];  // Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']\nconsole.log(myArray[2]); // expected value was 'd' but output is undefined\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\n// removes 1 element from index 2\nremoved = myArray.splice(2, 1);  // myArray =&gt; ['a', 'b', 'd']\nconsole.log(myArray[2]); // outputs 'd'\n</pre>",
          "title": "\"delete\" should not be used on arrays",
          "language": "JavaScript",
          "key": "javascript:S2870"
        }
      ],
      "tags": [],
      "title": "\"delete\" should not be used on arrays",
      "key": "S2870"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>The fact that JavaScript is not a strongly typed language allows developers a lot of freedom, but that freedom can be dangerous if you go too far\nwith it. </p>\n<p>Specifically, it is syntactically acceptable to invoke any expression as though its value were a function. But a <code>TypeError</code> may be\nraised if you do.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfoo = 1;\nfoo();   // Noncompliant; TypeError\n\nfoo = undefined;\nfoo();  // Noncompliant; TypeError\n</pre>",
          "title": "Calls should not be made to non-callable values",
          "language": "JavaScript",
          "key": "javascript:S2873"
        }
      ],
      "tags": [],
      "title": "Calls should not be made to non-callable values",
      "key": "S2873"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>The <code>new</code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a\n<code>TypeError</code> because there won't be a constructor function for the <code>new</code> keyword to invoke.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = 1;\n\nvar obj1 = new someClass;    // Noncompliant;\nvar obj2 = new MyClass();    // Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * @constructor\n */\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = function(){\n  this.prop = 1;\n}\n\nvar obj1 = new someClass;  // Compliant\nvar obj2 = new MyClass();  // Compliant regardless of considerJSDoc value\n</pre>",
          "title": "\"new\" operators should be used with functions",
          "language": "JavaScript",
          "key": "javascript:S2999"
        }
      ],
      "tags": [],
      "title": "\"new\" operators should be used with functions",
      "key": "S2999"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>The semantics of the <code>delete</code> operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass\nanything else to it, and you may or may not get the desired result.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x  = 1;\ndelete x;       // Noncompliant\n\nfunction foo(){\n..\n}\n\ndelete foo;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = {\n  x:1,\n  foo: function(){\n  ...\n  }\n};\ndelete obj.x;\ndelete obj.foo;\n\n</pre>",
          "title": "\"delete\" should be used only with object properties",
          "language": "JavaScript",
          "key": "javascript:S3001"
        }
      ],
      "tags": [],
      "title": "\"delete\" should be used only with object properties",
      "key": "S3001"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Comparing dissimilar types using the strict equality operators <code>===</code> and <code>!==</code> will always return the same value,\nrespectively <code>false</code> and <code>true</code>, because no type conversion is done before the comparison. Thus, such comparisons can only be\nbugs.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a === b) {  // Noncompliant; always false\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a == b) {\n  // ...\n}\n</pre>\n<p>or</p>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a === Number(b)) {\n  // ...\n}\n</pre>",
          "title": "Strict equality operators should not be used with dissimilar types",
          "language": "JavaScript",
          "key": "javascript:S3403"
        }
      ],
      "tags": [],
      "title": "Strict equality operators should not be used with dissimilar types",
      "key": "S3403"
    },
    {
      "implementations": [
        {
          "tags": [
            "es2015"
          ],
          "severity": "Major",
          "description": "<p>Variables declared with <code>const</code> cannot be modified. Unfortunately, attempts to do so don't always raise an error; in a non-ES2015\nenvironment, such an attempt might simply be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst pi = \"yes, please\";\npi = 3.14;  // Noncompliant\n</pre>",
          "title": "Attempts should not be made to update \"const\" variables",
          "language": "JavaScript",
          "key": "javascript:S3500"
        }
      ],
      "tags": [
        "es2015"
      ],
      "title": "Attempts should not be made to update \"const\" variables",
      "key": "S3500"
    },
    {
      "implementations": [
        {
          "tags": [
            "clumsy"
          ],
          "severity": "Critical",
          "description": "<p>In addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructor's string\narguments similar to the way <code>eval</code> works, which could expose your program to random, unintended code which can be both slow and a security\nrisk.</p>\n<p>In general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5's built-in JSON functions or\na dedicated library.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar obj =  new Function(\"return \" + data)();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = JSON.parse(data);\n</pre>\n<h2>Exceptions</h2>\n<p>Function calls where the argument is a string literal (e.g. <code>(Function('return this'))()</code>) are ignored. </p>",
          "title": "Function constructors should not be used",
          "language": "JavaScript",
          "key": "javascript:S3523"
        }
      ],
      "tags": [
        "clumsy"
      ],
      "title": "Function constructors should not be used",
      "key": "S3523"
    },
    {
      "implementations": [
        {
          "tags": [
            "api-design",
            "es2015"
          ],
          "severity": "Major",
          "description": "<p>A generator without a <code>yield</code> statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code\nwill always be empty. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction* myGen(a, b) {  // Noncompliant\n  let answer = 0;\n  answer += a * b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction* myGen(a, b) {\n  let answer = 0;\n  while (answer &lt; 42) {\n    answer += a * b;\n    yield answer;\n  }\n}\n</pre>",
          "title": "Generators should \"yield\" something",
          "language": "JavaScript",
          "key": "javascript:S3531"
        }
      ],
      "tags": [
        "api-design",
        "es2015"
      ],
      "title": "Generators should \"yield\" something",
      "key": "S3531"
    },
    {
      "implementations": [
        {
          "tags": [
            "bad-practice"
          ],
          "severity": "Major",
          "description": "<p>JavaScript is flexible enough to allow you to store values in an array with either numeric or named indexes. That is, it supports associative\narrays. But creating and populating an object in JavaScript is just as easy as an array, and more reliable if you need named members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet arr = [];\narr[0] = 'a';\narr['name'] = 'bob';  // Noncompliant\narr[1] = 'foo';\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet obj = {\n  name: 'bob',\n  arr: ['a', 'foo']\n};\n</pre>",
          "title": "Array indexes should be numeric",
          "language": "JavaScript",
          "key": "javascript:S3579"
        }
      ],
      "tags": [
        "bad-practice"
      ],
      "title": "Array indexes should be numeric",
      "key": "S3579"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>The comma operator (<code>,</code>) evaluates its operands, from left to right, and returns the second one. That's useful in some situations, but\njust wrong in a <code>switch</code> <code>case</code>. You may think you're compactly handling multiple values in the case, but only the last one in\nthe comma-list will ever be handled. The rest will fall through to the default.</p>\n<p>Similarly the logical OR operator (<code>||</code>) will not work in a <code>switch</code> <code>case</code>, only the first argument will be\nconsidered at execution time.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch a {\n  case 1,2:  // Noncompliant; only 2 is ever handled by this case\n    doTheThing(a);\n  case 3 || 4: // Noncompliant; only '3' is handled\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\"Neener, neener!\");  // this happens when a==1 or a == 4\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch a {\n  case 1:\n  case 2:\n    doTheThing(a);\n  case 3:\n  case 4:\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\"Neener, neener!\");\n}\n</pre>",
          "title": "Comma and logical OR operators should not be used in switch cases",
          "language": "JavaScript",
          "key": "javascript:S3616"
        }
      ],
      "tags": [],
      "title": "Comma and logical OR operators should not be used in switch cases",
      "key": "S3616"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Constructor functions, which create new object instances, must only be called with <code>new</code>. Non-constructor functions must not. Mixing\nthese two usages could lead to unexpected results at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction getNum() {\n  return 5;\n}\n\nfunction Num(numeric, alphabetic) {\n  this.numeric = numeric;\n  this.alphabetic = alphabetic;\n}\n\nvar myFirstNum = getNum();\nvar my2ndNum = new getNum();  // Noncompliant. An empty object is returned, NOT 5\n\nvar myNumObj1 = new Num();\nvar myNumObj2 = Num();  // Noncompliant. undefined is returned, NOT an object\n</pre>",
          "title": "Functions should not be called both with and without \"new\"",
          "language": "JavaScript",
          "key": "javascript:S3686"
        }
      ],
      "tags": [],
      "title": "Functions should not be called both with and without \"new\"",
      "key": "S3686"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n\"result\" to a variable is probably a bug because such functions return <code>undefined</code>, which is probably not what was intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\na = foo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n}\n\nfoo();\n</pre>",
          "title": "The output of functions that don't return anything should not be used",
          "language": "JavaScript",
          "key": "javascript:S3699"
        }
      ],
      "tags": [],
      "title": "The output of functions that don't return anything should not be used",
      "key": "S3699"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>The types of the arguments to built-in functions are specified in the JavaScript language specifications. Calls to these functions should conform\nto the documented types, otherwise the result will most likely not be what was expected (e.g.: the call would always return <code>false</code>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst isTooSmall = Math.abs(x &lt; 0.0042);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst isTooSmall = Math.abs(x) &lt; 0.0042;\n</pre>",
          "title": "Arguments to built-in functions should match documented types",
          "language": "JavaScript",
          "key": "javascript:S3782"
        }
      ],
      "tags": [],
      "title": "Arguments to built-in functions should match documented types",
      "key": "S3782"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Critical",
          "description": "<p>The <code>in</code> operator tests whether the specified property is in the specified object.</p>\n<p>If the right operand is a of primitive type (i.e., not an object) the <code>in</code> operator raises a <code>TypeError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = \"Foo\";\n\"length\" in x; // Noncompliant: TypeError\n0 in x;        // Noncompliant: TypeError\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = new String(\"Foo\");\n\"length\" in x;    // true\n0 in x;           // true\n\"foobar\" in x;    // false\n</pre>",
          "title": "\"in\" should not be used with primitive types",
          "language": "JavaScript",
          "key": "javascript:S3785"
        }
      ],
      "tags": [],
      "title": "\"in\" should not be used with primitive types",
      "key": "S3785"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Blocker",
          "description": "<p>Arrays in JavaScript have several methods for filtering, mapping or folding that require a callback. Not having a return statement in such a\ncallback function is most likely a mistake.</p>\n<p>This rule applies for the following methods of an array:</p>\n<ul>\n  <li> <code>Array.from</code> </li>\n  <li> <code>Array.prototype.every</code> </li>\n  <li> <code>Array.prototype.filter</code> </li>\n  <li> <code>Array.prototype.find</code> </li>\n  <li> <code>Array.prototype.findIndex</code> </li>\n  <li> <code>Array.prototype.map</code> </li>\n  <li> <code>Array.prototype.reduce</code> </li>\n  <li> <code>Array.prototype.reduceRight</code> </li>\n  <li> <code>Array.prototype.some</code> </li>\n  <li> <code>Array.prototype.sort</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar merged = arr.reduce(function(a, b) {\n  a.concat(b);\n}); // Noncompliant: No return statement\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar merged = arr.reduce(function(a, b) {\n  return a.concat(b);\n});\n</pre>",
          "title": "Callbacks of array methods should have return statements",
          "language": "JavaScript",
          "key": "javascript:S3796"
        }
      ],
      "tags": [],
      "title": "Callbacks of array methods should have return statements",
      "key": "S3796"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible\nto create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the\nintent was to use a default value instead.</p>\n<p>This rule raises an issue when empty destructuring pattern is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar {a: {}, b} = myObj; // Noncompliant\nfunction foo({first: [], second}) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar {a = {}, b} = myObj;\nfunction foo({first = [], second}) {\n  // ...\n}\n</pre>",
          "title": "Destructuring patterns should not be empty",
          "language": "JavaScript",
          "key": "javascript:S3799"
        }
      ],
      "tags": [],
      "title": "Destructuring patterns should not be empty",
      "key": "S3799"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Critical",
          "description": "<p>Mixing up the order of operations will almost always yield unexpected results. For instance, consider the outcome of absentmindedly kissing the dog\nand patting your spouse on the head. </p>\n<p>Similarly, mis-applied negation will also yield bad results. For instance consider the difference between <code>\\!key in dict</code> and\n<code>\\!(key in dict)</code>. The first looks for a boolean value (<code>!key</code>) in <code>dict</code>, and the other looks for a string and\ninverts the result. <code>\\!obj instanceof SomeClass</code> has the same problem.</p>\n<p>This rule raises an issue when the left operand of an <code>in</code> or <code>instanceof</code> operator is negated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (!\"prop\" in myObj) {  // Noncompliant;  \"in\" operator is checking property \"false\"\n  doTheThing();  // this block will be never executed\n}\n\nif (!foo instanceof MyClass) {  // Noncompliant; \"!foo\" returns a boolean, which is not an instance of anything\n  doTheOtherThing();  // this block is never executed\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (!(\"prop\" in myObj)) {\n  doTheThing();\n}\n\nif (!(foo instanceof MyClass)) {\n  doTheOtherThing();\n}\n</pre>",
          "title": "Results of \"in\" and \"instanceof\" should be negated rather than operands",
          "language": "JavaScript",
          "key": "javascript:S3812"
        }
      ],
      "tags": [],
      "title": "Results of \"in\" and \"instanceof\" should be negated rather than operands",
      "key": "S3812"
    },
    {
      "implementations": [
        {
          "tags": [
            "es2015"
          ],
          "severity": "Blocker",
          "description": "<p>The <code>yield</code> keyword is used in a generator function to return an <code>IteratorResult</code> to the caller. It has no other purpose, and\nif found outside such a function will raise a <code>ReferenceError</code> because it is then treated as an identifier.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n  for (var i = 0; i &lt; 5; i++) {\n    yield i * 2;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction * foo() {\n  for (var i = 0; i &lt; 5; i++) {\n    yield i * 2;\n  }\n}\n</pre>",
          "title": "\"yield\" expressions should not be used outside generators",
          "language": "JavaScript",
          "key": "javascript:S3828"
        }
      ],
      "tags": [
        "es2015"
      ],
      "title": "\"yield\" expressions should not be used outside generators",
      "key": "S3828"
    },
    {
      "implementations": [
        {
          "tags": [
            "es2015"
          ],
          "severity": "Critical",
          "description": "<p><code>Symbol</code> is a primitive type introduced in ECMAScript2015. Its instances are mainly used as unique property keys.</p>\n<p>An instance can only be created by using <code>Symbol</code> as a function. Using <code>Symbol</code> with the <code>new</code> operator will raise\na <code>TypeError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst sym = new Symbol(\"foo\");   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst sym = Symbol(\"foo\");\n</pre>",
          "title": "\"Symbol\" should not be used as a constructor",
          "language": "JavaScript",
          "key": "javascript:S3834"
        }
      ],
      "tags": [
        "es2015"
      ],
      "title": "\"Symbol\" should not be used as a constructor",
      "key": "S3834"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Critical",
          "description": "<p>There are situations where <code>super()</code> must be invoked and situations where <code>super()</code> cannot be invoked.</p>\n<p>The basic rule is: a constructor in a non-derived class cannot invoke <code>super()</code>; a constructor in a derived class must invoke\n<code>super()</code>.</p>\n<p>Furthermore:</p>\n<p>- <code>super()</code> must be invoked before the <code>this</code> and <code>super</code> keywords can be used.</p>\n<p>- <code>super()</code> must be invoked with the same number of arguments as the base class' constructor.</p>\n<p>- <code>super()</code> can only be invoked in a constructor - not in any other method.</p>\n<p>- <code>super()</code> cannot be invoked multiple times in the same constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Animal {\n  constructor() {\n    super();         // Noncompliant, super() cannot be invoked in a base class\n  }\n\n  doSomething() {\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    this.name = name;\n    super.doSomething();\n    super();         // Noncompliant, super() must be invoked before \"this\" or \"super\" is used\n  }\n\n  doSomething() {\n    super();         // Noncompliant, super() cannot be invoked outside of a constructor\n  }\n}\n\nclass Labrador extends Dog {\n  constructor(name) {\n    super();         // Noncompliant, super() must be invoked with one argument\n  }\n}\n\nclass GermanShepherd extends Dog {\n  constructor(name) {\n  }                  // Noncompliant, super() must be invoked in constructor of derived class\n}\n\nclass FilaBrasileiro extends Dog {\n  constructor(name) {\n    super(name);\n    super(name);    // Noncompliant, super() can only be invoked once\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Animal {\n  constructor() {\n  }\n\n  doSomething() {\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super();\n    this.name = name;\n    super.doSomething();\n  }\n\n  doSomething() {\n  }\n}\n\nclass Labrador extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n\nclass GermanShepherd extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n\nclass FilaBrasileiro extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n</pre>\n<h2>Known Limitations</h2>\n<ul>\n  <li>False negatives: some issues are not raised if the base class is not defined in the same file as the current class.</li>\n</ul>",
          "title": "super() should be invoked appropriately",
          "language": "JavaScript",
          "key": "javascript:S3854"
        }
      ],
      "tags": [],
      "title": "super() should be invoked appropriately",
      "key": "S3854"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Major",
          "description": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nlet a = (b == 0) ? getValue() : getValue();   // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>",
          "title": "All branches in a conditional structure should not have exactly the same implementation",
          "language": "JavaScript",
          "key": "javascript:S3923"
        }
      ],
      "tags": [],
      "title": "All branches in a conditional structure should not have exactly the same implementation",
      "key": "S3923"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "cwe",
            "misra",
            "unused"
          ],
          "severity": "Major",
          "description": "<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na == 1; // Noncompliant; was assignment intended?\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/482\">MITRE, CWE-482</a> - Comparing instead of Assigning </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  </li>\n</ul>",
          "title": "Non-empty statements should change control flow or have at least one side-effect",
          "language": "JavaScript",
          "key": "javascript:S905"
        }
      ],
      "tags": [
        "cwe",
        "misra",
        "cert",
        "unused"
      ],
      "title": "Non-empty statements should change control flow or have at least one side-effect",
      "key": "S905"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "cwe",
            "misra"
          ],
          "severity": "Critical",
          "description": "<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function\nexecution.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction say(a, b) {\n  print(a + \" \" + b);\n}\n\nsay(\"hello\", \"world\", \"!\"); // Noncompliant; last argument is not used\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>\n<pre>\nfunction doSomething(a, b) {\n  compute(arguments);\n}\n\ndoSomething(1, 2, 3) // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/628.html\">MITRE, CWE-628</a> - Function Call with Incorrectly Specified Arguments </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/LoAg\">CERT, DCL07-C.</a> - Include the appropriate type information in function\n  declarators </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VQBc\">CERT, EXP37-C.</a> - Call functions with the correct number and type of arguments\n  </li>\n</ul>",
          "title": "Function calls should not pass extra arguments",
          "language": "JavaScript",
          "key": "javascript:S930"
        }
      ],
      "tags": [
        "cwe",
        "misra",
        "cert"
      ],
      "title": "Function calls should not pass extra arguments",
      "key": "S930"
    },
    {
      "implementations": [
        {
          "tags": [
            "cert",
            "cwe",
            "misra",
            "unused"
          ],
          "severity": "Major",
          "description": "<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the\ncurrent code block. Typically, any statements in a block that come after a jump or <code>throw</code> are simply wasted keystrokes lying in wait to\nconfuse the unwary. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction fun(a) {\n  var i = 10;\n  return i + a;\n  i++;             // Noncompliant; this is never executed\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun(int a) {\n  var i = 10;\n  return i + a;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores unreachable <code>break</code> statements in <code>switch</code> clauses.</p>\n<pre>\nswitch (x) {\n  case 42:\n     return 43;\n     break;   // Compliant\n  default:\n    doSomething();\n}\n</pre>\n<p>Hoisted variables declarations without initialization are always considered reachable.</p>\n<pre>\nfunction bar() {\n  return x = function() {\n    x.foo = 42;\n  }\n  var x;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/561.html\">MITRE, CWE-561</a> - Dead Code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>",
          "title": "Jump statements should not be followed by other statements",
          "language": "JavaScript",
          "key": "javascript:UnreachableCode"
        }
      ],
      "tags": [
        "cwe",
        "misra",
        "cert",
        "unused"
      ],
      "title": "Jump statements should not be followed by other statements",
      "key": "UnreachableCode"
    },
    {
      "implementations": [
        {
          "tags": [
            "unused"
          ],
          "severity": "Minor",
          "description": "<p>If a local variable or a local function is declared but not used, it is dead code and should be removed. Doing so will improve maintainability\nbecause developers will not wonder what the variable or function is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  var seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n</pre>",
          "title": "Unused local variables and functions should be removed",
          "language": "JavaScript",
          "key": "javascript:UnusedVariable"
        }
      ],
      "tags": [
        "unused"
      ],
      "title": "Unused local variables and functions should be removed",
      "key": "UnusedVariable"
    },
    {
      "implementations": [
        {
          "tags": [],
          "severity": "Minor",
          "description": "<p>The use of the <code>with</code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against\n<code>with</code>.</p>\n<p>Using <code>with</code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with</code> to access\nsome property not already set in the object, and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting\nvariables there. Since the effects of <code>with</code> are entirely dependent on the object passed to it, <code>with</code> can be dangerously\nunpredictable, and should never be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nwith (foo) {  // Noncompliant\n  y = 4;  // updates foo.x\n  x = 3;  // does NOT add a foo.x property; updates x var in outer scope\n}\nprint(foo.x + \" \" + x); // shows: undefined 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nfoo.y = 4;\nfoo.x = 3;\n\nprint(foo.x + \" \" + x); // shows: 3 a\n</pre>",
          "title": "\"with\" statements should not be used",
          "language": "JavaScript",
          "key": "javascript:WithStatement"
        }
      ],
      "tags": [],
      "title": "\"with\" statements should not be used",
      "key": "WithStatement"
    }
  ],
  "version": "6.2.0.0"
}
