{"version": "version","rules": [{"key": "AssignmentInSubExpressionCheck","title": "Assignments should not be made from within sub-expressions","tags": ["cwe","misra","cert","suspicious"],"implementations": [{"key": "squid:AssignmentInSubExpressionCheck","language": "Java","title": "Assignments should not be made from within sub-expressions","description": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)).isEmpty()) {  \/\/ Noncompliant\n  \/\/...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  \/\/...\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Assignments in <code>while<\/code> statement conditions, and assignments enclosed in relational expressions are ignored.<\/p>\n<pre>\nBufferedReader br = new BufferedReader(\/* ... *\/);\nString line;\nwhile ((line = br.readLine()) != null) {...}\n<\/pre>\n<p>Chained assignments, including compound assignments, are ignored.<\/p>\n<pre>\nint i = j = 0;\nint k = (j += 1);\nresult = (bresult = new byte[len]);\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value <\/li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions <\/li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/481.html\">MITRE, CWE-481<\/a> - Assigning instead of Comparing <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/nYFtAg\">CERT, EXP45-C.<\/a> - Do not perform assignments in selection statements <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/1gCTAw\">CERT, EXP51-J.<\/a> - Do not perform assignments in conditional expressions\n  <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/KQvhAg\">CERT, EXP19-CPP.<\/a> - Do not perform assignments in conditional expressions\n  <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/KYIyAQ\">CERT, MSC02-CPP.<\/a> - Avoid errors of omission <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","suspicious"]}]},{"key": "BackticksUsage","title": "Backticks should not be used","tags": ["python3"],"implementations": [{"key": "python:BackticksUsage","language": "Python","title": "Backticks should not be used","description": "<p>Backticks are a deprecated alias for <code>repr()<\/code>. Don't use them any more, the syntax was removed in Python 3.0.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nreturn `num`  # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nreturn repr(num)\n<\/pre>","severity": "Blocker","tags": ["python3"]}]},{"key": "BitwiseOperators","title": "Bitwise operators should not be used in boolean contexts","tags": [],"implementations": [{"key": "javascript:BitwiseOperators","language": "JavaScript","title": "Bitwise operators should not be used in boolean contexts","description": "<p>The bitwise operators <code>&amp;<\/code>, <code>|<\/code> can be mistaken for the boolean operators <code>&amp;&amp;<\/code> and <code>||<\/code>.\n<\/p>\n<p>This rule raises an issue when <code>&amp;<\/code> or <code>|<\/code> is used in a boolean context.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (a &amp; b) { ... } \/\/ Noncompliant; &amp; used in error\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (a &amp;&amp; b) { ... }\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When a file contains other bitwise operations, (<code>^<\/code>, <code>&lt;&lt;<\/code>, <code>&gt;&gt;&gt;<\/code>, <code>&gt;&gt;<\/code>,\n<code>~<\/code>, <code>&amp;=<\/code>, <code>^=<\/code>, <code>|=<\/code>, <code>&lt;&lt;=<\/code>, <code>&gt;&gt;=<\/code>, <code>&gt;&gt;&gt;=<\/code> and\n<code>&amp;<\/code> or <code>|<\/code> used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that\nbitwise operations are truly intended in the file.<\/p>","severity": "Major","tags": []}]},{"key": "BoundOrAssignedEvalOrArguments","title": "\"eval\" and \"arguments\" should not be bound or assigned","tags": ["pitfall"],"implementations": [{"key": "javascript:BoundOrAssignedEvalOrArguments","language": "JavaScript","title": "\"eval\" and \"arguments\" should not be bound or assigned","description": "<p><code>eval<\/code> is used to evaluate a string as JavaScript code, and <code>arguments<\/code> is used to access function arguments through indexed\nproperties. As a consequence, <code>eval<\/code> and <code>arguments<\/code> should not be bound or assigned, because doing so would overwrite the\noriginal definitions of those two reserved words. <\/p>\n<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\neval = 17; \/\/ Noncompliant\narguments++; \/\/ Noncompliant\n++eval; \/\/ Noncompliant\nvar obj = { set p(arguments) { } }; \/\/ Noncompliant\nvar eval; \/\/ Noncompliant\ntry { } catch (arguments) { } \/\/ Noncompliant\nfunction x(eval) { } \/\/ Noncompliant\nfunction arguments() { } \/\/ Noncompliant\nvar y = function eval() { }; \/\/ Noncompliant\nvar f = new Function(\"arguments\", \"return 17;\"); \/\/ Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { \/\/ Compliant\n    \/\/ do something\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { }\nvar y = function fun() { };\nvar f = new Function(\"args\", \"return 17;\");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    \/\/ do something\n  }\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "CallToDeprecatedMethod","title": "\"@Deprecated\" code should not be used","tags": ["cwe","obsolete","cert"],"implementations": [{"key": "squid:CallToDeprecatedMethod","language": "Java","title": "\"@Deprecated\" code should not be used","description": "<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n\/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n *\/\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  \/**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   *\/\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } \/\/ Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  \/\/ Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  \/\/ okay; the class isn't deprecated\n    foo.doTheThing();  \/\/ Noncompliant; doTheThing method is deprecated\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/477.html\">MITRE, CWE-477<\/a> - Use of Obsolete Functions <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/KgAVAg\">CERT, MET02-J.<\/a> - Do not use deprecated or obsolete classes or methods <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","cwe","obsolete"]}]},{"key": "ClassVariableVisibilityCheck","title": "Class variable fields should not have public accessibility","tags": ["cwe"],"implementations": [{"key": "squid:ClassVariableVisibilityCheck","language": "Java","title": "Class variable fields should not have public accessibility","description": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:<\/p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. <\/li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. <\/li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. <\/li>\n<\/ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     \/\/ Compliant - constants are not checked\n\n  public String firstName;                       \/\/ Noncompliant\n\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     \/\/ Compliant - constants are not checked\n\n  private String firstName;                      \/\/ Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Because they are not modifiable, this rule ignores <code>public final<\/code> fields.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/493.html\">MITRE, CWE-493<\/a> - Critical Public Variable Without Final Modifier <\/li>\n<\/ul>","severity": "Minor","tags": ["cwe"]}]},{"key": "CommentedOutCodeLine","title": "Sections of code should not be \"commented out\"","tags": ["misra","unused"],"implementations": [{"key": "squid:CommentedOutCodeLine","language": "Java","title": "Sections of code should not be \"commented out\"","description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.<\/p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". <\/li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. <\/li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. <\/li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" <\/li>\n<\/ul>","severity": "Major","tags": ["misra","unused"]}]},{"key": "DebuggerStatement","title": "Debugger statements should not be used","tags": ["cwe","user-experience"],"implementations": [{"key": "javascript:DebuggerStatement","language": "JavaScript","title": "Debugger statements should not be used","description": "<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint\nin the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to\nattacks in production.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  \/\/ Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n  \/\/ Wait for user to resume.\n  debugger;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  \/\/ Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489.html\">MITRE, CWE-489<\/a> - Leftover Debug Code <\/li>\n<\/ul>","severity": "Minor","tags": ["cwe","user-experience"]}]},{"key": "DuplicateFunctionArgument","title": "Function argument names should be unique","tags": [],"implementations": [{"key": "javascript:DuplicateFunctionArgument","language": "JavaScript","title": "Function argument names should be unique","description": "<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so they're not completely\ninaccessible).<\/p>\n<p>This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. Furthermore, in strict mode, declaring\narguments with the same name produces an error.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction compute(a, a, c) { \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction compute(a, b, c) { \/\/ Compliant\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "DuplicatePropertyName","title": "Property names should not be duplicated within a class or object literal","tags": ["pitfall"],"implementations": [{"key": "javascript:DuplicatePropertyName","language": "JavaScript","title": "Property names should not be duplicated within a class or object literal","description": "<p>JavaScript allows duplicate property names in classes and object literals, but only the last instance of a duplicated name determines the actual\nvalue that will be used for it. Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause\nmisunderstandings and bugs.<\/p>\n<p>Defining a <code>class<\/code> with a duplicated <code>constructor<\/code> will generate an error.<\/p>\n<p>Before ECMAScript 2015, using duplicate names will generate an error in JavaScript strict mode code.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key\": \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  'key': \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  key: \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  \\u006bey: \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  \"\\u006bey\": \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  \"\\x6bey\": \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  1: \"value\" \/\/ Noncompliant - duplicate of \"1\"\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key2\": \"value\",\n  'key3': \"value\",\n  key4: \"value\",\n  \\u006bey5: \"value\",\n  \"\\u006bey6\": \"value\",\n  \"\\x6bey7\": \"value\",\n  1b: \"value\"\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "EmptyBlock","title": "Nested blocks of code should not be left empty","tags": ["suspicious"],"implementations": [{"key": "javascript:EmptyBlock","language": "JavaScript","title": "Nested blocks of code should not be left empty","description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (var i = 0; i &lt; length; i++) {}  \/\/ Empty on purpose or missing piece of code ?\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch<\/code> blocks are ignored.<\/p>","severity": "Major","tags": ["suspicious"]}]},{"key": "EmptyStatementUsageCheck","title": "Empty statements should be removed","tags": ["misra","cert","unused"],"implementations": [{"key": "squid:EmptyStatementUsageCheck","language": "Java","title": "Empty statements should be removed","description": "<p>Empty statements, i.e. <code>;<\/code>, are usually introduced by mistake, for example because:<\/p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. <\/li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;<\/code>. <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvoid doSomething() {\n  ;                                                       \/\/ Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");;                     \/\/ Noncompliant - double ;\n  ...\n  for (int i = 0; i &lt; 3; System.out.println(i), i++);       \/\/ Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n  ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");\n  ...\n  for (int i = 0; i &lt; 3; i++){\n    System.out.println(i);\n  }\n  ...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. <\/li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/7gCTAw\">CERT, MSC51-J.<\/a> - Do not place a semicolon immediately following an if, for,\n  or while condition <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/i4FtAg\">CERT, EXP15-C.<\/a> - Do not place a semicolon on the same line as an if, for,\n  or while statement <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","misra","unused"]}]},{"key": "Eval","title": "Code should not be dynamically injected and executed","tags": ["cwe","owasp-a3"],"implementations": [{"key": "javascript:Eval","language": "JavaScript","title": "Code should not be dynamically injected and executed","description": "<p>The <code>eval<\/code> function is a way to run arbitrary code at run-time. Dynamically evaluating code is slow and a potential security issue when\nthe arguments haven't been properly validated.<\/p>\n<p>In general it is better to avoid it altogether, particularly when there are safer alternatives.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar value = eval('obj.' + propName); \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar value = obj[propName];\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule will not raise an issue when the argument of the <code>eval<\/code> call is a literal string as it is reasonably safe.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/95.html\">MITRE CWE-95<\/a> - CWE-95: Improper Neutralization of Directives in Dynamically\n  Evaluated Code ('Eval Injection') <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3<\/a> - Cross-Site Scripting\n  (XSS) <\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","owasp-a3"]}]},{"key": "ExecStatementUsage","title": "The \"exec\" statement should not be used","tags": ["python3","obsolete"],"implementations": [{"key": "python:ExecStatementUsage","language": "Python","title": "The \"exec\" statement should not be used","description": "<p>Use of the <code>exec<\/code> statement could be dangerous, and should be avoided. Moreover, the <code>exec<\/code> statement was removed in Python\n3.0. Instead, the built-in <code>exec()<\/code> function can be used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nexec 'print 1' # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nexec('print 1')\n<\/pre>","severity": "Blocker","tags": ["obsolete","python3"]}]},{"key": "ForLoopCounterChangedCheck","title": "\"for\" loop stop conditions should be invariant","tags": ["misra","pitfall"],"implementations": [{"key": "squid:ForLoopCounterChangedCheck","language": "Java","title": "\"for\" loop stop conditions should be invariant","description": "<p>A <code>for<\/code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. <\/p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.<\/p>\n<p>This rule tracks three types of non-invariant stop conditions:<\/p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for<\/code> loop <\/li>\n  <li> When the stop condition depend upon a method call <\/li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; \/\/ Noncompliant; counter updated in the body of the loop\n  ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {...}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for<\/em> loop for iteration counting shall not be modified in the body of the\n  loop. <\/li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter<\/em> shall not be modified within <em>condition<\/em> or <em>statement<\/em>. <\/li>\n<\/ul>","severity": "Major","tags": ["misra","pitfall"]}]},{"key": "FunctionDefinitionInsideLoop","title": "Functions should not be defined inside loops","tags": ["suspicious"],"implementations": [{"key": "javascript:FunctionDefinitionInsideLoop","language": "JavaScript","title": "Functions should not be defined inside loops","description": "<p>Defining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer\nscopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar funs = [];\nfor (var i = 0; i &lt; 13; i++) {\n  funs[i] = function() { \/\/ Non-Compliant\n    return i;\n  };\n}\nconsole.log(funs[0]()); \/\/ 13 instead of 0\nconsole.log(funs[1]()); \/\/ 13 instead of 1\nconsole.log(funs[2]()); \/\/ 13 instead of 2\nconsole.log(funs[3]()); \/\/ 13 instead of 3\n...\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "HiddenFieldCheck","title": "Local variables should not shadow class fields","tags": ["cert","pitfall"],"implementations": [{"key": "squid:HiddenFieldCheck","language": "Java","title": "Local variables should not shadow class fields","description": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/2ADEAw\">CERT, DCL51-J.<\/a> - Do not shadow or obscure identifiers in subscopes <\/li>\n<\/ul>","severity": "Major","tags": ["cert","pitfall"]}]},{"key": "InequalityUsage","title": "\"<>\" should not be used to test inequality","tags": ["obsolete"],"implementations": [{"key": "python:InequalityUsage","language": "Python","title": "\"<>\" should not be used to test inequality","description": "<p>The forms <code>&lt;&gt;<\/code> and <code>!=<\/code> are equivalent. But in Python 2.7.3 the <code>&lt;&gt;<\/code> form is considered obsolete.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nreturn a &lt;&gt; b # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nreturn a != b\n<\/pre>","severity": "Major","tags": ["obsolete"]}]},{"key": "LabelsShouldNotBeUsedCheck","title": "Labels should not be used","tags": ["confusing"],"implementations": [{"key": "squid:LabelsShouldNotBeUsedCheck","language": "Java","title": "Labels should not be used","description": "<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code's readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row &lt; matrix.length; row++) {   \/\/ Non-Compliant\n  for (int col = 0; col &lt; matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                \/\/ Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (int row = 1; row &lt; matrix.length; row++) {          \/\/ Compliant\n  for (int col = 0; col &lt; row; col++) {\n    System.out.println(matrix[row][col]);                \/\/ Also prints 4, 7 and 8\n  }\n}\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "MaximumInheritanceDepth","title": "Inheritance tree of classes should not be too deep","tags": ["design"],"implementations": [{"key": "squid:MaximumInheritanceDepth","language": "Java","title": "Inheritance tree of classes should not be too deep","description": "<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object\noriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.<\/p>\n<p>This rule raises an issue when the inheritance tree, starting from <code>Object<\/code> has a greater depth than is allowed. <\/p>","severity": "Major","tags": ["design"]}]},{"key": "MissingDeprecatedCheck","title": "Deprecated elements should have both the annotation and the Javadoc tag","tags": ["obsolete","bad-practice"],"implementations": [{"key": "squid:MissingDeprecatedCheck","language": "Java","title": "Deprecated elements should have both the annotation and the Javadoc tag","description": "<p>Deprecation should be marked with both the <code>@Deprecated<\/code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  \/**\n    * @deprecated\n    *\/\n  public void foo2() {    \/\/ Noncompliant\n  }\n\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {\n\n  \/**\n    * @deprecated (when, why, refactoring advice...)\n    *\/\n  @Deprecated\n  public void foo1() {\n  }\n\n  \/**\n    * @deprecated (when, why, refactoring advice...)\n    *\/\n  @Deprecated\n  public void foo2() {\n  }\n\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.<\/p>\n<pre>\n\/**\n * @deprecated (when, why, etc...)\n *\/\n@Deprecated\nclass Qix  {\n\n  public void foo() {} \/\/ Compliant; class is deprecated\n\n}\n\n\/**\n * @deprecated (when, why, etc...)\n *\/\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n<\/pre>","severity": "Major","tags": ["bad-practice","obsolete"]}]},{"key": "ModifiersOrderCheck","title": "Modifiers should be declared in the correct order","tags": ["convention"],"implementations": [{"key": "squid:ModifiersOrderCheck","language": "Java","title": "Modifiers should be declared in the correct order","description": "<p>The Java Language Specification recommends listing modifiers in the following order:<\/p>\n<p>1. Annotations<\/p>\n<p>2. public<\/p>\n<p>3. protected<\/p>\n<p>4. private<\/p>\n<p>5. abstract<\/p>\n<p>6. static<\/p>\n<p>7. final<\/p>\n<p>8. transient<\/p>\n<p>9. volatile<\/p>\n<p>10. synchronized<\/p>\n<p>11. native<\/p>\n<p>12. strictfp<\/p>\n<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard\norder.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nstatic public void main(String[] args) {   \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic static void main(String[] args) {   \/\/ Compliant\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "MultilineStringLiterals","title": "Multiline string literals should not be used","tags": ["bad-practice"],"implementations": [{"key": "javascript:MultilineStringLiterals","language": "JavaScript","title": "Multiline string literals should not be used","description": "<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the\nbeginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message ' +\n    'actually that just keeps going and going -- an error ' +\n    'message to make the Energizer bunny blush (right through ' +\n    'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n    'you\\'ve got an error and all the extraneous whitespace is ' +\n    'just gravy.  Have a nice day.';\n<\/pre>","severity": "Minor","tags": ["bad-practice"]}]},{"key": "NonEmptyCaseWithoutBreak","title": "Switch cases should end with an unconditional \"break\" statement","tags": ["cwe","misra","cert","suspicious"],"implementations": [{"key": "javascript:NonEmptyCaseWithoutBreak","language": "JavaScript","title": "Switch cases should end with an unconditional \"break\" statement","description": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  \/\/ Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule is relaxed in the following cases:<\/p>\n<pre>\nswitch (myVariable) {\n  case 0:                                \/\/ Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                \/\/ Use of return statement\n    return;\n  case 3:                               \/\/ Ends with comment when fall-through is intentional\n    console.log(\"this case falls through\")\n    \/\/ fall through\n  case 4:                                \/\/ Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                \/\/ Use of continue statement\n    continue;\n  default:                               \/\/ For the last case, use of break statement is optional\n    doSomethingElse();\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used. <\/li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause <\/li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. <\/li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause <\/li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed <\/li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/484.html\">MITRE, CWE-484<\/a> - Omitted Break Statement in Switch <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/YIFLAQ\">CERT, MSC17-C.<\/a> - Finish every set of statements associated with a case\n  label with a break statement <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/ZoFLAQ\">CERT, MSC18-CPP.<\/a> - Finish every set of statements associated with a case\n  label with a break statement <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/ewHAAQ\">CERT, MSC52-J.<\/a> - Finish every set of statements associated with a case\n  label with a break statement <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","cwe","misra","suspicious"]}]},{"key": "ObjectFinalizeCheck","title": "The Object.finalize() method should not be called","tags": ["cwe","cert"],"implementations": [{"key": "squid:ObjectFinalizeCheck","language": "Java","title": "The Object.finalize() method should not be called","description": "<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection\ndetermines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       \/\/ Noncompliant\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/586.html\">MITRE, CWE-586<\/a> - Explicit Call to Finalize() <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/H4cbAQ\">CERT, MET12-J.<\/a> - Do not use finalizers <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe"]}]},{"key": "ObjectFinalizeOverridenCallsSuperFinalizeCheck","title": "\"super.finalize()\" should be called at the end of \"Object.finalize()\" implementations","tags": ["cwe","cert"],"implementations": [{"key": "squid:ObjectFinalizeOverridenCallsSuperFinalizeCheck","language": "Java","title": "\"super.finalize()\" should be called at the end of \"Object.finalize()\" implementations","description": "<p>Overriding the <code>Object.finalize()<\/code> method must be done with caution to dispose some system resources.<\/p>\n<p>Calling the <code>super.finalize()<\/code> at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nprotected void finalize() {   \/\/ Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  \/\/ Noncompliant; this call should come last\n  releaseSomeResources();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/568.html\">MITRE, CWE-568<\/a> - finalize() Method Without super.finalize() <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/H4cbAQ\">CERT, MET12-J.<\/a> - Do not use finalizers <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe"]}]},{"key": "ObjectFinalizeOverridenCheck","title": "The Object.finalize() method should not be overriden","tags": ["unpredictable","cert"],"implementations": [{"key": "squid:ObjectFinalizeOverridenCheck","language": "Java","title": "The Object.finalize() method should not be overriden","description": "<p>The <code>Object.finalize()<\/code> method is called on an object by the garbage collector when it determines that there are no more references to\nthe object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be\nfew microseconds to few minutes later. So when system resources need to be disposed by an object, it's better to not rely on this asynchronous\nmechanism to dispose them.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    \/\/ Noncompliant\n  }\n  ...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/H4cbAQ\">CERT, MET12-J.<\/a> - Do not use finalizers <\/li>\n<\/ul>","severity": "Major","tags": ["cert","unpredictable"]}]},{"key": "OctalNumber","title": "Octal values should not be used","tags": ["misra","cert","pitfall"],"implementations": [{"key": "javascript:OctalNumber","language": "JavaScript","title": "Octal values should not be used","description": "<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar myNumber = 010;   \/\/ Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar myNumber = 8;\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. <\/li>\n  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used <\/li>\n  <li> MISRA C:2012, 7.1 - Octal constants shall not be used <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/_QC7AQ\">CERT, DCL18-C.<\/a> - Do not begin integer constants with 0 when specifying a\n  decimal value <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/hYClBg\">CERT, DCL50-J.<\/a> - Use visually distinct identifiers <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","misra","pitfall"]}]},{"key": "Parentheses","title": "Redundant pairs of parentheses should be removed","tags": ["confusing"],"implementations": [{"key": "javascript:Parentheses","language": "JavaScript","title": "Redundant pairs of parentheses should be removed","description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nlet x = (y \/ 2 + 1);   \/\/Compliant even if those parenthesis are useless for the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  \/\/ Noncompliant\n  \/\/...\n}\n\nreturn ((x + 1));  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nlet x = (y \/ 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  \/\/...\n}\n\nreturn (x + 1);\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "PreIncrementDecrement","title": "Increment and decrement operators should not be used","tags": [],"implementations": [{"key": "python:PreIncrementDecrement","language": "Python","title": "Increment and decrement operators should not be used","description": "<p>Python has no pre\/post increment\/decrement operator. For instance, <code>x++<\/code> and <code>x--<\/code> will fail to parse. More importantly,\n<code>++x<\/code> and <code>--x<\/code> will do nothing. To increment a number, simply write <code>x += 1<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n++x # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nx += 1\n<\/pre>","severity": "Major","tags": []}]},{"key": "PrimitiveWrappers","title": "Wrapper objects should not be used for primitive types","tags": ["pitfall"],"implementations": [{"key": "javascript:PrimitiveWrappers","language": "JavaScript","title": "Wrapper objects should not be used for primitive types","description": "<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,\njust remove the <code>new<\/code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a\nprimitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nlet x = new Number(\"0\");\nif (x) {\n  alert('hi');  \/\/ Shows 'hi'.\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nlet x = Number(\"0\");\nif (x) {\n  alert('hi');\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Cases when argument of primitive type constructor is a literal of the same type are ignored, except <code>new Boolean(false)<\/code>.<\/p>\n<pre>\nlet booleanObject = new Boolean(true);\nlet numberObject = new Number(0);\nlet stringObject = new String('');\n<\/pre>","severity": "Minor","tags": ["pitfall"]}]},{"key": "PrintStatementUsage","title": "The \"print\" statement should not be used","tags": ["python3","obsolete"],"implementations": [{"key": "python:PrintStatementUsage","language": "Python","title": "The \"print\" statement should not be used","description": "<p>The <code>print<\/code> statement was removed in Python 3.0. The built-in function should be used instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nprint '1'  # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nprint('1')\n<\/pre>","severity": "Blocker","tags": ["obsolete","python3"]}]},{"key": "RedundantThrowsDeclarationCheck","title": "\"throws\" declarations should not be superfluous","tags": ["unused","redundant","clumsy"],"implementations": [{"key": "squid:RedundantThrowsDeclarationCheck","language": "Java","title": "\"throws\" declarations should not be superfluous","description": "<p>An exception in a <code>throws<\/code> declaration in Java is superfluous if it is:<\/p>\n<ul>\n  <li> listed multiple times <\/li>\n  <li> a subclass of another listed exception <\/li>\n  <li> a <code>RuntimeException<\/code>, or one of its descendants <\/li>\n  <li> completely unnecessary because the declared exception type cannot actually be thrown <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvoid foo() throws MyException, MyException {}  \/\/ Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  \/\/ Noncompliant; Exception is a subclass of Throwable\nvoid baz() throws RuntimeException {}  \/\/ Noncompliant; RuntimeException can always be thrown\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\nvoid baz() {}\n<\/pre>","severity": "Minor","tags": ["clumsy","redundant","unused"]}]},{"key": "S00100","title": "Method names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00100","language": "Java","title": "Method names should comply with a naming convention","description": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\npublic int DoSomething(){...}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic int doSomething(){...}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Overriding methods are excluded. <\/p>\n<pre>\n@Override\npublic int Do_Something(){...}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00101","title": "Class names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00101","language": "Java","title": "Class names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\nclass my_class {...}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {...}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00107","title": "Methods should not have too many parameters","tags": ["brain-overload"],"implementations": [{"key": "squid:S00107","language": "Java","title": "Methods should not have too many parameters","description": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With a maximum number of 4 parameters:<\/p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Methods annotated with Spring's <code>@RequestMapping<\/code> may have a lot of parameters, encapsulation being possible. Such methods are therefore\nignored.<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S00108","title": "Nested blocks of code should not be left empty","tags": ["suspicious"],"implementations": [{"key": "squid:S00108","language": "Java","title": "Nested blocks of code should not be left empty","description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  \/\/ Empty on purpose or missing piece of code ?\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized<\/code> block. <code>synchronized<\/code>\nblocks are still considered empty even with comments because they can still affect program flow.<\/p>","severity": "Major","tags": ["suspicious"]}]},{"key": "S00112","title": "Generic exceptions should never be thrown","tags": ["cwe","error-handling","cert"],"implementations": [{"key": "squid:S00112","language": "Java","title": "Generic exceptions should never be thrown","description": "<p>Using such generic exceptions as <code>Error<\/code>, <code>RuntimeException<\/code>, <code>Throwable<\/code>, and <code>Exception<\/code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void foo(String bar) throws Throwable {  \/\/ Noncompliant\n  throw new RuntimeException(\"My Message\");     \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).<\/p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n<\/pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.<\/p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  \/\/ this method throws Exception\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/397.html\">MITRE, CWE-397<\/a> - Declaration of Throws for Generic Exception <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/BoB3AQ\">CERT, ERR07-J.<\/a> - Do not throw RuntimeException, Exception, or Throwable\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","error-handling"]}]},{"key": "S00114","title": "Interface names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00114","language": "Java","title": "Interface names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\npublic interface myInterface {...} \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic interface MyInterface {...}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00115","title": "Constant names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00115","language": "Java","title": "Constant names should comply with a naming convention","description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$<\/code>:<\/p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n<\/pre>","severity": "Critical","tags": ["convention"]}]},{"key": "S00116","title": "Field names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00116","language": "Java","title": "Field names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\nclass MyClass {\n   private int my_field;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {\n   private int myField;\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00117","title": "Local variable and method parameter names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00117","language": "Java","title": "Local variable and method parameter names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local\nvariable and function parameter names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\npublic void doSomething(int my_param) {\n  int LOCAL;\n  ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething(int myParam) {\n  int local;\n  ...\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Loop counters are ignored by this rule.<\/p>\n<pre>\nfor (int i = 0; i &lt; limit; i++) {  \/\/ Compliant\n  \/\/ ...\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00119","title": "Type parameter names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00119","language": "Java","title": "Type parameter names should comply with a naming convention","description": "<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type\nparameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.<\/p>\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular\nexpression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { \/\/ Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { \/\/ Noncompliant\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass&lt;T&gt; {\n  &lt;T&gt; void method(T t) {\n  }\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00120","title": "Package names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00120","language": "Java","title": "Package names should comply with a naming convention","description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default regular expression <code>^[a-z]+(\\.[a-z][a-z0-9]*)*$<\/code>:<\/p>\n<pre>\npackage org.exAmple; \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npackage org.example;\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S100","title": "Method names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "python:S100","language": "Python","title": "Method names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all method\nnames match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$<\/p>\n<pre>\nclass MyClass:\n    def MyMethod(a,b):\n        ...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass:\n    def my_method(a,b):\n        ...\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S101","title": "Class names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "php:S101","language": "PHP","title": "Class names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\nclass my_class {...}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {...}\n<\/pre>","severity": "Minor","tags": ["convention"]},{"key": "python:S101","language": "Python","title": "Class names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\nclass myClass:\n   ...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass:\n   ...\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S104","title": "Files should not have too many lines","tags": ["brain-overload"],"implementations": [{"key": "php:S104","language": "PHP","title": "Files should not have too many lines","description": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S105","title": "Tabulation characters should not be used","tags": ["convention","psr2"],"implementations": [{"key": "php:S105","language": "PHP","title": "Tabulation characters should not be used","description": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.<\/p>\n<p>So the use of tabulation character must be banned.<\/p>","severity": "Minor","tags": ["convention","psr2"]}]},{"key": "S106","title": "Standard outputs should not be used directly to log anything","tags": ["bad-practice","cert"],"implementations": [{"key": "squid:S106","language": "Java","title": "Standard outputs should not be used directly to log anything","description": "<p>When logging a message there are several important requirements which must be fulfilled:<\/p>\n<ul>\n  <li> The user must be able to easily retrieve the logs <\/li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log <\/li>\n  <li> Logged data must actually be recorded <\/li>\n  <li> Sensitive data must only be logged securely <\/li>\n<\/ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a\ndedicated logger is highly recommended.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nSystem.out.println(\"My Message\");  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nlogger.log(\"My Message\");\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/RoElAQ\">CERT, ERR02-J.<\/a> - Prevent exceptions while logging data <\/li>\n<\/ul>","severity": "Major","tags": ["bad-practice","cert"]}]},{"key": "S1065","title": "Unused labels should be removed","tags": ["misra","cert","unused"],"implementations": [{"key": "squid:S1065","language": "Java","title": "Unused labels should be removed","description": "<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.<\/p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvoid foo() {\n  outer: \/\/label is not used.\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvoid foo() {\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2012, 2.6 - A function should not contain unused label declarations <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","misra","unused"]}]},{"key": "S1066","title": "Collapsible \"if\" statements should be merged","tags": ["clumsy"],"implementations": [{"key": "squid:S1066","language": "Java","title": "Collapsible \"if\" statements should be merged","description": "<p>Merging collapsible <code>if<\/code> statements increases the code's readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    \/* ... *\/\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  \/* ... *\/\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n<\/pre>","severity": "Major","tags": ["clumsy"]},{"key": "php:S1066","language": "PHP","title": "Collapsible \"if\" statements should be merged","description": "<p>Merging collapsible <code>if<\/code> statements increases the code's readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (condition1) {\n  if (condition2) {\n    ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (condition1 &amp;&amp; condition2) {\n  ...\n}\n<\/pre>","severity": "Major","tags": ["clumsy"]},{"key": "python:S1066","language": "Python","title": "Collapsible \"if\" statements should be merged","description": "<p>Merging collapsible <code>if<\/code> statements increases the code's readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif condition1:\n    if condition2:\n        # ...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif condition1 and condition2:\n    # ...\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S1067","title": "Expressions should not be too complex","tags": ["brain-overload"],"implementations": [{"key": "php:S1067","language": "PHP","title": "Expressions should not be too complex","description": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;<\/code>, <code>||<\/code> and <code>condition ? ifTrue : ifFalse<\/code>\noperators it contains.<\/p>\n<p>A single expression's complexity should not become too high to keep the code readable.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default threshold value of 3<\/p>\n<pre>\nif ((($condition1 &amp;&amp; $condition2) || ($condition3 &amp;&amp; $condition4)) &amp;&amp; $condition5) { ... }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif ( (my_first_condition() || my_second_condition()) &amp;&amp; my_last_condition()) { ... }\n<\/pre>","severity": "Critical","tags": ["brain-overload"]}]},{"key": "S1068","title": "Unused \"private\" fields should be removed","tags": ["cert","unused"],"implementations": [{"key": "squid:S1068","language": "Java","title": "Unused \"private\" fields should be removed","description": "<p>If a <code>private<\/code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.<\/p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private<\/code> fields that are only\naccessed using the reflection API.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID<\/code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.<\/p>\n<p>A serializable class can declare its own <code>serialVersionUID<\/code> explicitly by declaring a field named <code>serialVersionUID<\/code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID<\/code> fields should not be reported by this rule:<\/p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n<\/pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","unused"]},{"key": "php:S1068","language": "PHP","title": "Unused \"private\" fields should be removed","description": "<p>If a <code>private<\/code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass {\n  private $foo = 4;                       \/\/foo is unused\n\n  public function compute($a) {\n    return $a * 4;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {\n\n  public function compute($a) {\n    return $a * 4;\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","unused"]}]},{"key": "S107","title": "Functions should not have too many parameters","tags": ["brain-overload"],"implementations": [{"key": "php:S107","language": "PHP","title": "Functions should not have too many parameters","description": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With a maximum number of 4 parameters:<\/p>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4, $param5) {\n...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4) {\n...\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]},{"key": "python:S107","language": "Python","title": "Functions, methods and lambdas should not have too many parameters","description": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With a maximum number of 4 parameters:<\/p>\n<pre>\ndef do_something(param1, param2, param3, param4, param5):\n\t...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndef do_something(param1, param2, param3, param4):\n\t...\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1075","title": "URIs should not be hardcoded","tags": ["android","cert"],"implementations": [{"key": "squid:S1075","language": "Java","title": "URIs should not be hardcoded","description": "<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.<\/p>\n<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.<\/p>\n<p>This rule raises an issue when URI's or path delimiters are hard coded.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Foo {\n  public Collection&lt;User&gt; listUsers() {\n    File userList = new File(\"\/home\/mylogin\/Dev\/users.txt\"); \/\/ Non-Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Foo {\n  \/\/ Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.\n  private Configuration config;\n  public Foo(Configuration myConfig) {\n    this.config = myConfig;\n  }\n  public Collection&lt;User&gt; listUsers() {\n    \/\/ Find here the way to get the correct folder, in this case using the Configuration object\n    String listingFolder = config.getProperty(\"myApplication.listingFolder\");\n    \/\/ and use this parameter instead of the hard coded path\n    File userList = new File(listingFolder, \"users.txt\"); \/\/ Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/qQCHAQ\">CERT, MSC03-J.<\/a> - Never hard code sensitive information <\/li>\n<\/ul>","severity": "Minor","tags": ["android","cert"]}]},{"key": "S108","title": "Nested blocks of code should not be left empty","tags": ["suspicious"],"implementations": [{"key": "php:S108","language": "PHP","title": "Nested blocks of code should not be left empty","description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor ($i = 0; $i &lt; 42; $i++){}  \/\/ Empty on purpose or missing piece of code ?\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When a block contains a comment, this block is not considered to be empty.<\/p>","severity": "Major","tags": ["suspicious"]},{"key": "python:S108","language": "Python","title": "Nested blocks of code should not be left empty","description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor i in range(3):\n    pass\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When a block contains a comment, this block is not considered to be empty.<\/p>","severity": "Major","tags": ["suspicious"]}]},{"key": "S1109","title": "A close curly brace should be located at the beginning of a line","tags": ["convention"],"implementations": [{"key": "php:S1109","language": "PHP","title": "A close curly brace should be located at the beginning of a line","description": "<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(condition) {\n  doSomething();}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. <\/p>\n<pre>\nif(condition) {doSomething();}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1110","title": "Redundant pairs of parentheses should be removed","tags": ["confusing"],"implementations": [{"key": "python:S1110","language": "Python","title": "Redundant pairs of parentheses should be removed","description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nreturn ((3))        # Noncompliant\nreturn ((x + 1))    # Noncompliant\nx = ((y \/ 2)) + 1   # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nreturn 3\nreturn (3)\nreturn x + 1\nreturn (x + 1)\nx = y \/ 2 + 1\nx = (y \/ 2) + 1\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "S1116","title": "Empty statements should be removed","tags": ["misra","cert","unused"],"implementations": [{"key": "php:S1116","language": "PHP","title": "Empty statements should be removed","description": "<p>Empty statements, i.e. <code>;<\/code>, are usually introduced by mistake, for example because:<\/p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. <\/li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;<\/code>. <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction doSomething() {\n  ;                                              \/\/ Noncompliant - was used as a kind of TODO marker\n}\n\nfunction doSomethingElse($p) {\n  echo $p;;                                      \/\/ Noncompliant - double ;\n}\n\nfor ($i = 1; $i &lt;= 10; doSomething($i), $i++);   \/\/ Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction doSomething() {}\n\nfunction doSomethingElse($p) {\n  echo $p;\n\n  for ($i = 1; $i &lt;= 10; $i++) {\n    doSomething($i);\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. <\/li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/7gCTAw\">CERT, MSC51-J.<\/a> - Do not place a semicolon immediately following an if, for,\n  or while condition <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/i4FtAg\">CERT, EXP15-C.<\/a> - Do not place a semicolon on the same line as an if, for,\n  or while statement <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","misra","unused"]}]},{"key": "S1117","title": "Local variables should not have the same name as class fields","tags": ["cert","pitfall"],"implementations": [{"key": "php:S1117","language": "PHP","title": "Local variables should not have the same name as class fields","description": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo {\n  public $myField;\n\n  public function doSomething() {\n    $myField = 0;\n    ...\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/2ADEAw\">CERT, DCL51-J.<\/a> - Do not shadow or obscure identifiers in subscopes <\/li>\n<\/ul>","severity": "Major","tags": ["cert","pitfall"]}]},{"key": "S1118","title": "Utility classes should not have public constructors","tags": ["design"],"implementations": [{"key": "squid:S1118","language": "Java","title": "Utility classes should not have public constructors","description": "<p>Utility classes, which are collections of <code>static<\/code> members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.<\/p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass StringUtils { \/\/ Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass StringUtils { \/\/ Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When class contains <code>public static void main(String[] args)<\/code> method it is not considered as utility class and will be ignored by this\nrule.<\/p>","severity": "Major","tags": ["design"]}]},{"key": "S1119","title": "Labels should not be used","tags": ["confusing"],"implementations": [{"key": "javascript:S1119","language": "JavaScript","title": "Labels should not be used","description": "<p>Labels are not commonly used, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to follow,\nwhich reduces the code's readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nmyLabel: {\n  let x = doSomething();\n  if (x &gt; 0) {\n    break myLabel;\n  }\n  doSomethingElse();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nlet x = doSomething();\nif (x &lt;= 0) {\n  doSomethingElse();\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Labeled loops are ignored.<\/p>","severity": "Major","tags": ["confusing"]}]},{"key": "S112","title": "Generic exceptions ErrorException, RuntimeException and Exception should not be thrown","tags": ["cwe","error-handling","cert"],"implementations": [{"key": "php:S112","language": "PHP","title": "Generic exceptions ErrorException, RuntimeException and Exception should not be thrown","description": "<p>If you throw a general exception type, such as ErrorException, RuntimeException, or Exception in a library or framework, it forces consumers to\ncatch all exceptions, including unknown exceptions that they do not know how to handle.<\/p>\n<p>Instead, either throw a subtype that already exists in the Standard PHP Library, or create your own type that derives from Exception.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nthrow new Exception();  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nthrow new InvalidArgumentException();\n\/\/ or\nthrow new UnexpectedValueException();\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/397.html\">MITRE, CWE-397<\/a> - Declaration of Throws for Generic Exception <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/BoB3AQ\">CERT, ERR07-J.<\/a> - Do not throw RuntimeException, Exception, or Throwable\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","error-handling"]}]},{"key": "S1125","title": "Boolean literals should not be redundant","tags": ["clumsy"],"implementations": [{"key": "squid:S1125","language": "Java","title": "Boolean literals should not be redundant","description": "<p>Redundant Boolean literals should be removed from expressions to improve readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (booleanMethod() == true) { \/* ... *\/ }\nif (booleanMethod() == false) { \/* ... *\/ }\nif (booleanMethod() || false) { \/* ... *\/ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (booleanMethod()) { \/* ... *\/ }\nif (!booleanMethod()) { \/* ... *\/ }\nif (booleanMethod()) { \/* ... *\/ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n<\/pre>","severity": "Minor","tags": ["clumsy"]},{"key": "php:S1125","language": "PHP","title": "Boolean literals should not be redundant","description": "<p>Redundant Boolean literals should be removed from expressions to improve readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ($booleanVariable == true) { \/* ... *\/ }\nif ($booleanVariable != true) { \/* ... *\/ }\nif ($booleanVariable || false) { \/* ... *\/ }\ndoSomething(!false);\n\n$booleanVariable = condition ? true : exp;\n$booleanVariable = condition ? false : exp;\n$booleanVariable = condition ?  exp : true;\n$booleanVariable = condition ?  exp : false;\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif ($booleanVariable) { \/* ... *\/ }\nif (!$booleanVariable) { \/* ... *\/ }\nif ($booleanVariable) { \/* ... *\/ }\ndoSomething(true);\n\n$booleanVariable = condition || exp;\n$booleanVariable = !condition &amp;&amp; exp;\n$booleanVariable = !condition ||  exp;\n$booleanVariable = condition &amp;&amp; exp;\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>The use of literal booleans in comparisons which use identity operators (<code>===<\/code> and <code>!==<\/code>) are ignored.<\/p>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1126","title": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","tags": ["clumsy"],"implementations": [{"key": "squid:S1126","language": "Java","title": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","description": "<p>Return of boolean literal statements wrapped into <code>if-then-else<\/code> ones should be simplified.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nreturn expression;\n<\/pre>","severity": "Minor","tags": ["clumsy"]},{"key": "php:S1126","language": "PHP","title": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","description": "<p>Return of boolean literal statements wrapped into <code>if-then-else<\/code> ones should be simplified.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nreturn expression;\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1133","title": "Deprecated code should be removed","tags": ["obsolete"],"implementations": [{"key": "squid:S1133","language": "Java","title": "Deprecated code should be removed","description": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo {\n  \/**\n   * @deprecated\n   *\/\n  public void foo() {    \/\/ Noncompliant\n  }\n\n  @Deprecated            \/\/ Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    \/\/ Compliant\n  }\n}\n<\/pre>","severity": "Info","tags": ["obsolete"]}]},{"key": "S1134","title": "Track uses of \"FIXME\" tags","tags": ["cwe"],"implementations": [{"key": "squid:S1134","language": "Java","title": "Track uses of \"FIXME\" tags","description": "<p><code>FIXME<\/code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.<\/p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.<\/p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator \/ denominator;              \/\/ FIXME denominator value might be  0\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/546.html\">MITRE, CWE-546<\/a> - Suspicious Comment <\/li>\n<\/ul>","severity": "Major","tags": ["cwe"]},{"key": "php:S1134","language": "PHP","title": "Track uses of \"FIXME\" tags","description": "<p><code>FIXME<\/code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.<\/p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.<\/p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction divide($numerator, $denominator) {\n  return $numerator \/ $denominator;              \/\/ FIXME denominator value might be  0\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/546.html\">MITRE, CWE-546<\/a> - Suspicious Comment <\/li>\n<\/ul>","severity": "Major","tags": ["cwe"]},{"key": "python:S1134","language": "Python","title": "Track uses of \"FIXME\" tags","description": "<p><code>FIXME<\/code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.<\/p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.<\/p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ndef divide(numerator, denominator):\n  return numerator \/ denominator              # FIXME denominator value might be 0\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/546.html\">MITRE, CWE-546<\/a> - Suspicious Comment <\/li>\n<\/ul>","severity": "Major","tags": ["cwe"]}]},{"key": "S1135","title": "Track uses of \"TODO\" tags","tags": ["cwe"],"implementations": [{"key": "squid:S1135","language": "Java","title": "Track uses of \"TODO\" tags","description": "<p><code>TODO<\/code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.<\/p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.<\/p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvoid doSomething() {\n  \/\/ TODO\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/546.html\">MITRE, CWE-546<\/a> - Suspicious Comment <\/li>\n<\/ul>","severity": "Info","tags": ["cwe"]},{"key": "php:S1135","language": "PHP","title": "Track uses of \"TODO\" tags","description": "<p><code>TODO<\/code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.<\/p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.<\/p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction doSomething() {\n  \/\/ TODO\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/546.html\">MITRE, CWE-546<\/a> - Suspicious Comment <\/li>\n<\/ul>","severity": "Info","tags": ["cwe"]}]},{"key": "S114","title": "Interface names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "php:S114","language": "PHP","title": "Interface names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\ninterface myInterface {...} \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ninterface MyInterface {...}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1141","title": "Try-catch blocks should not be nested","tags": ["confusing"],"implementations": [{"key": "squid:S1141","language": "Java","title": "Try-catch blocks should not be nested","description": "<p>Nesting <code>try<\/code>\/<code>catch<\/code> blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.<\/p>","severity": "Major","tags": ["confusing"]}]},{"key": "S1142","title": "Functions should not contain too many return statements","tags": ["brain-overload"],"implementations": [{"key": "php:S1142","language": "PHP","title": "Functions should not contain too many return statements","description": "<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default threshold of 3:<\/p>\n<pre>\nfunction myFunction(){ \/\/ Noncompliant as there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1143","title": "Jump statements should not occur in \"finally\" blocks","tags": ["cwe","error-handling","cert"],"implementations": [{"key": "squid:S1143","language": "Java","title": "Jump statements should not occur in \"finally\" blocks","description": "<p>Using <code>return<\/code>, <code>break<\/code>, <code>throw<\/code>, and so on from a <code>finally<\/code> block suppresses the propagation of any\nunhandled <code>Throwable<\/code> which was thrown in the <code>try<\/code> or <code>catch<\/code> block.<\/p>\n<p>This rule raises an issue when a jump statement (<code>break<\/code>, <code>continue<\/code>, <code>return<\/code>, <code>throw<\/code>, and\n<code>goto<\/code>) would force control flow to leave a <code>finally<\/code> block. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   \/\/ incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  \/\/ this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      \/\/...\n      if (q == i) {\n        break; \/\/ ignored\n      }\n    }\n\n    \/* ... *\/\n    return;      \/\/ Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  \/\/ \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      \/\/...\n      if (q == i) {\n        break; \/\/ ignored\n      }\n    }\n\n    \/* ... *\/\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/584.html\">MITRE, CWE-584<\/a> - Return Inside Finally Block <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/mIEbAQ\">CERT, ERR04-J.<\/a> - Do not complete abruptly from a finally block <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","error-handling"]},{"key": "javascript:S1143","language": "JavaScript","title": "Jump statements should not occur in \"finally\" blocks","description": "<p>Using <code>return<\/code>, <code>break<\/code>, <code>throw<\/code>, and <code>continue<\/code> from a <code>finally<\/code> block overwrites similar\nstatements from the suspended <code>try<\/code> and <code>catch<\/code> blocks.<\/p>\n<p>This rule raises an issue when a jump statement (<code>break<\/code>, <code>continue<\/code>, <code>return<\/code> and <code>throw<\/code>) would force\ncontrol flow to leave a <code>finally<\/code> block. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; \/\/ We expect 1 to be returned\n    } catch(err) {\n        return 2; \/\/ Or 2 in cases of error\n    } finally {\n        return 3; \/\/ Noncompliant: 3 is returned before 1, or 2, which we did not expect\n    }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; \/\/ We expect 1 to be returned\n    } catch(err) {\n        return 2; \/\/ Or 2 in cases of error\n    }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/584.html\">MITRE, CWE-584<\/a> - Return Inside Finally Block <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/mIEbAQ\">CERT, ERR04-J.<\/a> - Do not complete abruptly from a finally block <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","error-handling"]}]},{"key": "S1144","title": "Unused \"private\" methods should be removed","tags": ["cert","unused"],"implementations": [{"key": "php:S1144","language": "PHP","title": "Unused \"private\" methods should be removed","description": "<p><code>private<\/code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Foo\n{\n  private function Foo() {}   \/\/ Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n    ...\n  }\n\n  private function unusedPrivateFunction() {  \/\/ Noncompliant\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Foo\n{\n  private function Foo(){}   \/\/ Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/OYIyAQ\">CERT, MSC07-CPP.<\/a> - Detect and remove dead code <\/li>\n<\/ul>","severity": "Major","tags": ["cert","unused"]}]},{"key": "S1145","title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed","tags": ["cwe","misra"],"implementations": [{"key": "php:S1145","language": "PHP","title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed","description": "<p><code>if<\/code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if<\/code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.<\/p>\n<p>There are three possible causes for the presence of such code: <\/p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. <\/li>\n  <li> Some value was left unset. <\/li>\n  <li> Some logic is not doing what the programmer thought it did. <\/li>\n<\/ul>\n<p>In any of these cases, unconditional <code>if<\/code> statements should be removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (true) {  \/\/ Noncompliant\n  doSomething();\n}\n...\nif (false) {  \/\/ Noncompliant\n  doSomethingElse();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndoSomething();\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489.html\">MITRE, CWE-489<\/a> - Leftover Debug Code <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/570.html\">MITRE, CWE-570<\/a> - Expression is Always False <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/571.html\">MITRE, CWE-571<\/a> - Expression is Always True <\/li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. <\/li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant <\/li>\n<\/ul>","severity": "Major","tags": ["cwe","misra"]}]},{"key": "S1148","title": "Throwable.printStackTrace(...) should not be called","tags": ["error-handling"],"implementations": [{"key": "squid:S1148","language": "Java","title": "Throwable.printStackTrace(...) should not be called","description": "<p><code>Throwable.printStackTrace(...)<\/code> prints a <code>Throwable<\/code> and its stack trace to some stream. By default that stream\n<code>System.Err<\/code>, which could inadvertently expose sensitive information.<\/p>\n<p>Loggers should be used instead to print <code>Throwable<\/code>s, as they have many advantages:<\/p>\n<ul>\n  <li> Users are able to easily retrieve the logs. <\/li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. <\/li>\n<\/ul>\n<p>This rule raises an issue when <code>printStackTrace<\/code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ntry {\n  \/* ... *\/\n} catch(Exception e) {\n  e.printStackTrace();        \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ntry {\n  \/* ... *\/\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n<\/pre>","severity": "Minor","tags": ["error-handling"]}]},{"key": "S1149","title": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used","tags": ["performance"],"implementations": [{"key": "squid:S1149","language": "Java","title": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used","description": "<p>Early classes of the Java API, such as <code>Vector<\/code>, <code>Hashtable<\/code> and <code>StringBuffer<\/code>, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.<\/p>\n<p>It is better to use their new unsynchronized replacements:<\/p>\n<ul>\n  <li> <code>ArrayList<\/code> or <code>LinkedList<\/code> instead of <code>Vector<\/code> <\/li>\n  <li> <code>Deque<\/code> instead of <code>Stack<\/code> <\/li>\n  <li> <code>HashMap<\/code> instead of <code>Hashtable<\/code> <\/li>\n  <li> <code>StringBuilder<\/code> instead of <code>StringBuffer<\/code> <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nVector cats = new Vector();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nArrayList cats = new ArrayList();\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Use of those synchronized classes is ignored in the signatures of overriding methods.<\/p>\n<pre>\n@Override\npublic Vector getCats() {...}\n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S115","title": "Constant names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "php:S115","language": "PHP","title": "Constant names should comply with a naming convention","description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$<\/code>:<\/p>\n<pre>\ndefine(\"const1\", true);\n\nclass Foo {\n    const const2 = \"bar\";\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndefine(\"CONST1\", true);\n\nclass Foo {\n    const CONST2 = \"bar\";\n}\n<\/pre>","severity": "Critical","tags": ["convention"]}]},{"key": "S1150","title": "Enumeration should not be implemented","tags": ["obsolete"],"implementations": [{"key": "squid:S1150","language": "Java","title": "Enumeration should not be implemented","description": "<p>From the official Oracle Javadoc:<\/p>\n<blockquote>\n  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.<\/p>\n<\/blockquote>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass implements Enumeration {  \/\/ Non-Compliant\n  \/* ... *\/\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass implements Iterator {     \/\/ Compliant\n  \/* ... *\/\n}\n<\/pre>","severity": "Major","tags": ["obsolete"]}]},{"key": "S1151","title": "\"switch case\" clauses should not have too many lines","tags": ["brain-overload"],"implementations": [{"key": "php:S1151","language": "PHP","title": "\"switch case\" clauses should not have too many lines","description": "<p>The <code>switch<\/code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case<\/code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case<\/code> clause should be extracted into a dedicated method.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With a threshold of 5:<\/p>\n<pre>\nswitch ($var) {\n  case 0:  \/\/ 6 lines till next case\n    methodCall1();\n    methodCall2();\n    methodCall3();\n    methodCall4();\n    break;\n  default:\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch ($var) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    break;\n}\n\nfunction doSomething(){\n  methodCall1(\"\");\n  methodCall2(\"\");\n  methodCall3(\"\");\n  methodCall4(\"\");\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1153","title": "String.valueOf() should not be appended to a String","tags": ["clumsy"],"implementations": [{"key": "squid:S1153","language": "Java","title": "String.valueOf() should not be appended to a String","description": "<p>Appending <code>String.valueOf()<\/code> to a <code>String<\/code> decreases the code readability.<\/p>\n<p>The argument passed to <code>String.valueOf()<\/code> should be directly appended instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + String.valueOf(i));    \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + i);                    \/\/ Compliant\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1155","title": "Collection.isEmpty() should be used to test for emptiness","tags": ["clumsy"],"implementations": [{"key": "squid:S1155","language": "Java","title": "Collection.isEmpty() should be used to test for emptiness","description": "<p>Using <code>Collection.size()<\/code> to test for emptiness works, but using <code>Collection.isEmpty()<\/code> makes the code more readable and can\nbe more performant. The time complexity of any <code>isEmpty()<\/code> method implementation should be <code>O(1)<\/code> whereas some implementations\nof <code>size()<\/code> can be <code>O(n)<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (myCollection.size() == 0) {  \/\/ Noncompliant\n  \/* ... *\/\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (myCollection.isEmpty()) {\n  \/* ... *\/\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1157","title": "Case insensitive string comparisons should be made without intermediate upper or lower casing","tags": ["clumsy"],"implementations": [{"key": "squid:S1157","language": "Java","title": "Case insensitive string comparisons should be made without intermediate upper or lower casing","description": "<p>Using <code>toLowerCase()<\/code> or <code>toUpperCase()<\/code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String<\/code> objects.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             \/\/ Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             \/\/ Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  \/\/ Compliant\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1158","title": "Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls","tags": ["clumsy"],"implementations": [{"key": "squid:S1158","language": "Java","title": "Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls","description": "<p>Creating temporary primitive wrapper objects only for <code>String<\/code> conversion or the use of the <code>compareTo<\/code> method is\ninefficient.<\/p>\n<p>Instead, the static <code>toString()<\/code> or <code>compare<\/code> method of the primitive wrapper class should be used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nnew Integer(myInteger).toString();  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nInteger.toString(myInteger);        \/\/ Compliant\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S116","title": "Field names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "python:S116","language": "Python","title": "Field names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default regular expression <code>^[_a-z][_a-z0-9]*$<\/code>:<\/p>\n<pre>\nclass MyClass:\n  myField = 1\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass:\n  my_field = 1\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1161","title": "\"@Override\" should be used on overriding and implementing methods","tags": ["bad-practice"],"implementations": [{"key": "squid:S1161","language": "Java","title": "\"@Override\" should be used on overriding and implementing methods","description": "<p>Using the <code>@Override<\/code> annotation is useful for two reasons :<\/p>\n<ul>\n  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. <\/li>\n  <li> It improves the readability of the source code by making it obvious that methods are overridden. <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  \/\/ Compliant\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule is relaxed when overriding a method from the <code>Object<\/code> class like <code>toString()<\/code>, <code>hashcode()<\/code>, ...<\/p>","severity": "Major","tags": ["bad-practice"]}]},{"key": "S1163","title": "Exceptions should not be thrown in finally blocks","tags": ["error-handling","cert","suspicious"],"implementations": [{"key": "squid:S1163","language": "Java","title": "Exceptions should not be thrown in finally blocks","description": "<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try<\/code> or <code>catch<\/code>\nblock, and the masked's exception message and stack trace will be lost.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ntry {\n  \/* some work which end up throwing an exception *\/\n  throw new IllegalArgumentException();\n} finally {\n  \/* clean up *\/\n  throw new RuntimeException();       \/\/ Noncompliant; masks the IllegalArgumentException\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ntry {\n  \/* some work which end up throwing an exception *\/\n  throw new IllegalArgumentException();\n} finally {\n  \/* clean up *\/\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/soUbAQ\">CERT, ERR05-J.<\/a> - Do not let checked exceptions escape from a finally block\n  <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","error-handling","suspicious"]}]},{"key": "S1165","title": "Exception classes should be immutable","tags": ["error-handling"],"implementations": [{"key": "squid:S1165","language": "Java","title": "Exception classes should be immutable","description": "<p>Exceptions are meant to represent the application's state at the point at which an error occurred.<\/p>\n<p>Making all fields in an <code>Exception<\/code> class <code>final<\/code> ensures that this state:<\/p>\n<ul>\n  <li> Will be fully defined at the same time the <code>Exception<\/code> is instantiated. <\/li>\n  <li> Won't be updated or corrupted by a questionable error handler. <\/li>\n<\/ul>\n<p>This will enable developers to quickly understand what went wrong.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               \/\/ Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n<\/pre>","severity": "Minor","tags": ["error-handling"]}]},{"key": "S1168","title": "Empty arrays and collections should be returned instead of null","tags": ["cert"],"implementations": [{"key": "squid:S1168","language": "Java","title": "Empty arrays and collections should be returned instead of null","description": "<p>Returning <code>null<\/code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.<\/p>\n<p>Moreover, in many cases, <code>null<\/code> is used as a synonym for empty.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             \/\/ Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             \/\/ Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n\n  if (results != null) {                   \/\/ Nullity test required to prevent NPE\n    for (Result result: results) {\n      \/* ... *\/\n    }\n  }\n}\n\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          \/\/ Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    \/* ... *\/\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/AgG7AQ\">CERT, MSC19-C.<\/a> - For functions that return an array, prefer returning an\n  empty array over a null value <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/zwHEAw\">CERT, MET55-J.<\/a> - Return an empty array or collection instead of a null\n  value for methods that return an array or collection <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S117","title": "Local variable and function parameter names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "python:S117","language": "Python","title": "Local variable and function parameter names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local\nvariable and function parameter names match a provided regular expression.<\/p>\n<h2>Exceptions<\/h2>\n<p>Loop counters are ignored by this rule.<\/p>\n<pre>\nfor i in range(limit):  # Compliant\n    print(i)\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1170","title": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"","tags": ["convention"],"implementations": [{"key": "squid:S1170","language": "Java","title": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"","description": "<p>Making a <code>public<\/code> constant just <code>final<\/code> as opposed to <code>static final<\/code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.<\/p>\n<p>Further, when a non-<code>public<\/code>, <code>final<\/code> field isn't also <code>static<\/code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final<\/code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static<\/code> or initialized in the constructor.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    \/\/ Compliant\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:<\/p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00A78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00A715.28).<\/p>\n<\/blockquote>","severity": "Minor","tags": ["convention"]}]},{"key": "S1171","title": "Only static class initializers should be used","tags": ["pitfall"],"implementations": [{"key": "squid:S1171","language": "Java","title": "Only static class initializers should be used","description": "<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When\npossible, non-static initializers should be refactored into standard constructors or field initializers.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    \/\/ Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n<\/pre>\n<p>or using Guava:<\/p>\n<pre>\nclass MyClass {\n  \/\/ Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(\"a\", \"b\");\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1172","title": "Unused method parameters should be removed","tags": ["misra","cert","unused"],"implementations": [{"key": "squid:S1172","language": "Java","title": "Unused method parameters should be removed","description": "<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvoid doSomething(int a, int b) {     \/\/ \"b\" is unused\n  compute(a);\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvoid doSomething(int a) {\n  compute(a);\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Override and implementation methods are excluded, as are parameters annotated with <code>@Observes<\/code>, and methods that are intended to be\noverridden.<\/p>\n<pre>\n@Override\nvoid doSomething(int a, int b) {     \/\/ no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  \/\/ designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  \/\/open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. <\/li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","misra","unused"]},{"key": "php:S1172","language": "PHP","title": "Unused function parameters should be removed","description": "<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction doSomething($a, $b) { \/\/ \"$a\" is unused\n  return compute($b);\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction doSomething($b) {\n  return compute($b);\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Functions in classes that override a class or implement interfaces are ignored.<\/p>\n<pre>\nclass C extends B {\n\n  function doSomething($a, $b) {     \/\/ no issue reported on $b\n    compute($a);\n  }\n\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. <\/li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","misra","unused"]}]},{"key": "S1174","title": "\"Object.finalize()\" should remain protected (versus public) when overriding","tags": ["cwe","cert"],"implementations": [{"key": "squid:S1174","language": "Java","title": "\"Object.finalize()\" should remain protected (versus public) when overriding","description": "<p>The contract of the <code>Object.finalize()<\/code> method is clear: only the Garbage Collector is supposed to call this method.<\/p>\n<p>Making this method public is misleading, because it implies that any caller can use it.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    \/\/ Noncompliant\n    \/* ... *\/\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/583.html\">MITRE, CWE-583<\/a> - finalize() Method Declared Public <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/H4cbAQ\">CERT, MET12-J.<\/a> - Do not use finalizers <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe"]}]},{"key": "S1175","title": "The signature of \"finalize()\" should match that of \"Object.finalize()\"","tags": ["pitfall"],"implementations": [{"key": "squid:S1175","language": "Java","title": "The signature of \"finalize()\" should match that of \"Object.finalize()\"","description": "<p><code>Object.finalize()<\/code> is called by the Garbage Collector at some point after the object becomes unreferenced.<\/p>\n<p>In general, overloading <code>Object.finalize()<\/code> is a bad idea because:<\/p>\n<ul>\n  <li> The overload may not be called by the Garbage Collector. <\/li>\n  <li> Users are not expected to call <code>Object.finalize()<\/code> and will get confused. <\/li>\n<\/ul>\n<p>But beyond that it's a terrible idea to name a method \"finalize\" if it doesn't actually override <code>Object.finalize()<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic int finalize(int someParameter) {        \/\/ Noncompliant\n  \/* ... *\/\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic int someBetterName(int someParameter) {  \/\/ Compliant\n  \/* ... *\/\n}\n<\/pre>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S1181","title": "Throwable and Error should not be caught","tags": ["cwe","error-handling","bad-practice","cert"],"implementations": [{"key": "squid:S1181","language": "Java","title": "Throwable and Error should not be caught","description": "<p><code>Throwable<\/code> is the superclass of all errors and exceptions in Java. <code>Error<\/code> is the superclass of all errors, which are not\nmeant to be caught by applications.<\/p>\n<p>Catching either <code>Throwable<\/code> or <code>Error<\/code> will also catch <code>OutOfMemoryError<\/code> and <code>InternalError<\/code>, from\nwhich an application should not attempt to recover.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ntry { \/* ... *\/ } catch (Throwable t) { \/* ... *\/ }\ntry { \/* ... *\/ } catch (Error e) { \/* ... *\/ }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ntry { \/* ... *\/ } catch (RuntimeException e) { \/* ... *\/ }\ntry { \/* ... *\/ } catch (MyException e) { \/* ... *\/ }\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/396.html\">MITRE, CWE-396<\/a> - Declaration of Catch for Generic Exception <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/BIB3AQ\">CERT, ERR08-J.<\/a> - Do not catch NullPointerException or any of its ancestors\n  <\/li>\n<\/ul>","severity": "Major","tags": ["bad-practice","cert","cwe","error-handling"]}]},{"key": "S1182","title": "Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"","tags": ["convention","cwe","cert"],"implementations": [{"key": "squid:S1182","language": "Java","title": "Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"","description": "<p><code>Cloneable<\/code> is the marker <code>Interface<\/code> that indicates that <code>clone()<\/code> may be called on an object. Overriding\n<code>clone()<\/code> without implementing <code>Cloneable<\/code> can be useful if you want to control how subclasses clone themselves, but otherwise,\nit's probably a mistake.<\/p>\n<p>The usual convention for <code>Object.clone()<\/code> according to Oracle's Javadoc is:<\/p>\n<ol>\n  <li> <code>x.clone() != x<\/code> <\/li>\n  <li> <code>x.clone().getClass() == x.getClass()<\/code> <\/li>\n  <li> <code>x.clone().equals\\(x\\)<\/code> <\/li>\n<\/ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()<\/code> helps to satisfy those invariants:<\/p>\n<ol>\n  <li> <code>super.clone()<\/code> returns a new object instance <\/li>\n  <li> <code>super.clone()<\/code> returns an object of the same type as the one <code>clone()<\/code> was called on <\/li>\n  <li> <code>Object.clone()<\/code> performs a shallow copy of the object's state <\/li>\n<\/ol>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass BaseClass {  \/\/ Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    \/\/ Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  \/* Does not override clone() *\/\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              \/\/ Throws a ClassCastException because invariant #2 is violated\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    \/\/ Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  \/* Does not override clone() *\/\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              \/\/ Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/580.html\">MITRE, CWE-580<\/a> - clone() Method Without super.clone() <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/CQHEAw\">CERT, MET53-J.<\/a> - Ensure that the clone() method calls super.clone() <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","convention","cwe"]}]},{"key": "S1185","title": "Overriding methods should do more than simply call the same method in the super class","tags": ["redundant","clumsy"],"implementations": [{"key": "squid:S1185","language": "Java","title": "Overriding methods should do more than simply call the same method in the super class","description": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final<\/code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals<\/code>, <code>hashCode<\/code> and <code>toString<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         \/\/ Compliant - not simply forwarding the call\n  return super.isLegal(new Action(\/* ... *\/));\n}\n\n@Id\n@Override\npublic int getId() {                            \/\/ Compliant - there is annotation different from @Override\n  return super.getId();\n}\n<\/pre>","severity": "Minor","tags": ["clumsy","redundant"]},{"key": "php:S1185","language": "PHP","title": "Overriding methods should do more than simply call the same method in the super class","description": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final<\/code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals<\/code>, <code>hashCode<\/code> and <code>toString<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Child extends Parent {\n\n  public function func($n,$m) {\n    parent::func($n$m);  \/\/ Noncompliant\n  }\n}\n\nclass Parent {\n  public function func($n, $m) {\n    \/\/ do something\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Child extends Parent {\n\n  public function func($n,$m) {\n    parent::func($n$m);\n    \/\/ do additional things...\n  }\n}\n\nclass Parent {\n  public function func($n, $m) {\n    \/\/ do something\n  }\n}\n<\/pre>\n<p>or<\/p>\n<pre>\nclass Child extends Parent {\n  \/\/ function eliminated\n}\n\nclass Parent {\n  public function func($n, $m) {\n    \/\/ do something\n  }\n}\n<\/pre>","severity": "Minor","tags": ["clumsy","redundant"]}]},{"key": "S1186","title": "Methods should not be empty","tags": ["suspicious"],"implementations": [{"key": "squid:S1186","language": "Java","title": "Methods should not be empty","description": "<p>There are several reasons for a method not to have a method body:<\/p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. <\/li>\n  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException<\/code> should be thrown. <\/li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n@Override\npublic void doSomething() {\n  \/\/ Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.<\/p>\n<pre>\npublic abstract class Animal {\n  void speak() {  \/\/ default implementation ignored\n  }\n}\n<\/pre>","severity": "Critical","tags": ["suspicious"]}]},{"key": "S1190","title": "Future keywords should not be used as names","tags": ["obsolete","pitfall"],"implementations": [{"key": "squid:S1190","language": "Java","title": "Future keywords should not be used as names","description": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. <\/p>\n<p>Following keywords are marked as invalid identifiers <\/p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword<\/th>\n      <th>Added<\/th>\n    <\/tr>\n    <tr>\n      <td><code>_<\/code><\/td>\n      <td>9<\/td>\n    <\/tr>\n    <tr>\n      <td><code>enum<\/code><\/td>\n      <td>5.0<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<p><code>assert<\/code> and <code>strictfp<\/code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            \/\/ Noncompliant\n  String _ = \"\";   \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n<\/pre>","severity": "Blocker","tags": ["obsolete","pitfall"]}]},{"key": "S1191","title": "Classes from \"sun.*\" packages should not be used","tags": ["lock-in","pitfall"],"implementations": [{"key": "squid:S1191","language": "Java","title": "Classes from \"sun.*\" packages should not be used","description": "<p>Classes in the <code>sun.*<\/code> or <code>com.sun.*<\/code> packages are considered implementation details, and are not part of the Java API.<\/p>\n<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause\nproblems when moving to a different Java vendor, such as OpenJDK.<\/p>\n<p>Such classes are almost always wrapped by Java API classes that should be used instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nimport com.sun.jna.Native;     \/\/ Noncompliant\nimport sun.misc.BASE64Encoder; \/\/ Noncompliant\n<\/pre>","severity": "Major","tags": ["lock-in","pitfall"]}]},{"key": "S1192","title": "String literals should not be duplicated","tags": ["design"],"implementations": [{"key": "squid:S1192","language": "Java","title": "String literals should not be duplicated","description": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.<\/p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default threshold of 3:<\/p>\n<pre>\npublic void run() {\n  prepare(\"action1\");                              \/\/ Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            \/\/ Compliant - annotations are excluded\nprivate void method1() { \/* ... *\/ }\n@SuppressWarning(\"all\")\nprivate void method2() { \/* ... *\/ }\n\npublic String method3(String a) {\n  System.out.println(\"'\" + a + \"'\");               \/\/ Compliant - literal \"'\" has less than 5 characters and is excluded\n  return \"\";                                       \/\/ Compliant - literal \"\" has less than 5 characters and is excluded\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nprivate static final String ACTION_1 = \"action1\";  \/\/ Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               \/\/ Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.<\/p>","severity": "Critical","tags": ["design"]},{"key": "php:S1192","language": "PHP","title": "String literals should not be duplicated","description": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.<\/p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default threshold of 3:<\/p>\n<pre>\nfunction run() {\n  prepare('action1');                              \/\/ Non-Compliant - 'action1' is duplicated 3 times\n  execute('action1');\n  release('action1');\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nACTION_1 = 'action1';\n\nfunction run() {\n  prepare(ACTION_1);\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.<\/p>","severity": "Critical","tags": ["design"]}]},{"key": "S1193","title": "Exception types should not be tested using \"instanceof\" in catch blocks","tags": ["error-handling","cert","clumsy"],"implementations": [{"key": "squid:S1193","language": "Java","title": "Exception types should not be tested using \"instanceof\" in catch blocks","description": "<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ntry {\n  \/* ... *\/\n} catch (Exception e) {\n  if(e instanceof IOException) { \/* ... *\/ }         \/\/ Noncompliant\n  if(e instanceof NullPointerException{ \/* ... *\/ }  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ntry {\n  \/* ... *\/\n} catch (IOException e) { \/* ... *\/ }                \/\/ Compliant\n} catch (NullPointerException e) { \/* ... *\/ }       \/\/ Compliant\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/5gFFB\">CERT, ERR51-J.<\/a> - Prefer user-defined exceptions over more general exception\n  types <\/li>\n<\/ul>","severity": "Major","tags": ["cert","clumsy","error-handling"]}]},{"key": "S1195","title": "Array designators \"[]\" should be located after the type in method signatures","tags": ["convention"],"implementations": [{"key": "squid:S1195","language": "Java","title": "Array designators \"[]\" should be located after the type in method signatures","description": "<p>According to the Java Language Specification: <\/p>\n<blockquote>\n  <p>For compatibility with older versions of the Java SE platform,<\/p>\n  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the\n  array type after the formal parameter list.<\/p>\n  <p>This obsolescent syntax should not be used in new code.<\/p>\n<\/blockquote>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic int getVector()[] { \/* ... *\/ }    \/\/ Noncompliant\n\npublic int[] getMatrix()[] { \/* ... *\/ }  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic int[] getVector() { \/* ... *\/ }\n\npublic int[][] getMatrix() { \/* ... *\/ }\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1197","title": "Array designators \"[]\" should be on the type, not the variable","tags": ["convention"],"implementations": [{"key": "squid:S1197","language": "Java","title": "Array designators \"[]\" should be on the type, not the variable","description": "<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nint matrix[][];   \/\/ Noncompliant\nint[] matrix[];   \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nint[][] matrix;   \/\/ Compliant\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1199","title": "Nested code blocks should not be used","tags": ["bad-practice"],"implementations": [{"key": "squid:S1199","language": "Java","title": "Nested code blocks should not be used","description": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    \/* ... *\/\n    case ADD: {                                \/\/ Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    \/* ... *\/\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    \/* ... *\/\n    case ADD:                                  \/\/ Compliant\n      evaluateAdd();\n      break;\n    \/* ... *\/\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n<\/pre>","severity": "Minor","tags": ["bad-practice"]}]},{"key": "S1201","title": "\"equals\" method overrides should accept \"Object\" parameters","tags": ["suspicious"],"implementations": [{"key": "squid:S1201","language": "Java","title": "\"equals\" method overrides should accept \"Object\" parameters","description": "<p>\"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)<\/code> to prevent any confusion.<\/p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object<\/code> as parameter, to save the class comparison check.\nHowever, this will not work as expected when that is the only override.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {  \/\/ Noncompliant; does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));  \/\/ Prints \"false\" because o2 an Object not a MyClass\n  }\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {  \/\/ Ignored; `boolean equals(Object)` also present\n    \/\/..\n  }\n\n  public boolean equals(Object o) {\n    \/\/...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  \/* ... *\/\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {\n    \/\/..\n  }\n\n  public boolean equals(Object o) {\n    \/\/...\n  }\n}\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "S1206","title": "\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs","tags": ["cwe","cert"],"implementations": [{"key": "squid:S1206","language": "Java","title": "\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs","description": "<p>According to the Java Language Specification, there is a contract between <code>equals(Object)<\/code> and <code>hashCode()<\/code>:<\/p>\n<blockquote>\n  <p>If two objects are equal according to the <code>equals(Object)<\/code> method, then calling the <code>hashCode<\/code> method on each of the two\n  objects must produce the same integer result. <\/p>\n  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)<\/code> method, then calling the\n  <code>hashCode<\/code> method on each of the two objects must produce distinct integer results.<\/p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.<\/p>\n<\/blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass {    \/\/ Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    \/* ... *\/\n  }\n\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {    \/\/ Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    \/* ... *\/\n  }\n\n  @Override\n  public int hashCode() {\n    \/* ... *\/\n  }\n\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/581.html\">MITRE, CWE-581<\/a> - Object Model Violation: Just One of Equals and Hashcode Defined\n  <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/EYYbAQ\">CERT, MET09-J.<\/a> - Classes that define an equals() method must also define a\n  hashCode() method <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","cwe"]}]},{"key": "S121","title": "Control structures should use curly braces","tags": ["misra","cert","pitfall"],"implementations": [{"key": "php:S121","language": "PHP","title": "Control structures should use curly braces","description": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n\/\/ the two statements seems to be attached to the if statement, but that is only true for the first one:\nif (condition)\n  executeSomething();\n  checkSomething();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (condition) {\n  executeSomething();\n  checkSomething();\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement <\/li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement <\/li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement <\/li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement <\/li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/1QGMAg\">CERT, EXP19-C.<\/a> - Use braces for the body of an if, for, or while statement\n  <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/3wHEAw\">CERT, EXP52-J.<\/a> - Use braces for the body of an if, for, or while statement\n  <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","misra","pitfall"]}]},{"key": "S1210","title": "\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method","tags": [],"implementations": [{"key": "squid:S1210","language": "Java","title": "\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method","description": "<p>According to the Java <code>Comparable.compareTo(T o)<\/code> documentation:<\/p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))<\/code>.<\/p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.<\/p>\n  <p>The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\" <\/p>\n<\/blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.<\/p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()<\/code> method relied on <code>compareTo()<\/code>, but since Java 6 it has relied on\n<code>equals()<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { \/* ... *\/ }      \/\/ Noncompliant as the equals(Object obj) method is not overridden\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { \/* ... *\/ }      \/\/ Compliant\n\n  @Override\n  public boolean equals(Object obj) { \/* ... *\/ }\n}\n<\/pre>","severity": "Minor","tags": []}]},{"key": "S1214","title": "Constants should not be defined in interfaces","tags": ["bad-practice"],"implementations": [{"key": "squid:S1214","language": "Java","title": "Constants should not be defined in interfaces","description": "<p>According to Joshua Bloch, author of \"Effective Java\":<\/p>\n<blockquote>\n  <p>The constant interface pattern is a poor use of interfaces. <\/p>\n  <p>That a class uses some constants internally is an implementation detail.<\/p>\n  <p>Implementing a constant interface causes this implementation detail to leak into the class's exported API. It is of no consequence to the users\n  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future\n  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.\n  If a nonfinal class implements a constant interface,<\/p>\n  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.<\/p>\n<\/blockquote>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ninterface Status {                      \/\/ Noncompliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic enum Status {                    \/\/ Compliant\n  OPEN,\n  CLOSED;\n}\n<\/pre>\n<p>or<\/p>\n<pre>\npublic final class Status {             \/\/ Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n<\/pre>","severity": "Critical","tags": ["bad-practice"]}]},{"key": "S1215","title": "Execution of the Garbage Collector should be triggered only by the JVM","tags": ["unpredictable","bad-practice"],"implementations": [{"key": "squid:S1215","language": "Java","title": "Execution of the Garbage Collector should be triggered only by the JVM","description": "<p>Calling <code>System.gc()<\/code> or <code>Runtime.getRuntime().gc()<\/code> is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:<\/p>\n<ul>\n  <li> Will the whole application be frozen during the call? <\/li>\n  <li> Is the <code>-XX:DisableExplicitGC<\/code> option activated? <\/li>\n  <li> Will the JVM simply ignore the call? <\/li>\n  <li> ... <\/li>\n<\/ul>\n<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector should\nbe left exclusively to the JVM.<\/p>","severity": "Critical","tags": ["bad-practice","unpredictable"]}]},{"key": "S1217","title": "Thread.run() should not be called directly","tags": ["cwe","multi-threading","cert"],"implementations": [{"key": "squid:S1217","language": "Java","title": "Thread.run() should not be called directly","description": "<p>The purpose of the <code>Thread.run()<\/code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make\nsense because it causes its code to be executed in the current thread. <\/p>\n<p>To get the expected behavior, call the <code>Thread.start()<\/code> method instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); \/\/ Compliant\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/572.html\">MITRE, CWE-572<\/a> - Call to Thread run() instead of start() <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/KQAiAg\">CERT THI00-J.<\/a> - Do not invoke Thread.run() <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","multi-threading"]}]},{"key": "S1219","title": "\"switch\" statements should not contain non-case labels","tags": ["misra","suspicious"],"implementations": [{"key": "squid:S1219","language": "Java","title": "\"switch\" statements should not contain non-case labels","description": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   \/\/ Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  \/\/ Noncompliant; the code is correct and behaves as expected but is barely readable\n         \/* ... *\/\n        break foo;  \/\/ this break statement doesn't relate to the nesting case TUESDAY\n         \/* ... *\/\n    }\n    break;\n    \/* ... *\/\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); \/\/ put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    \/* ... *\/\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used. <\/li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. <\/li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed <\/li>\n<\/ul>","severity": "Blocker","tags": ["misra","suspicious"]},{"key": "javascript:S1219","language": "JavaScript","title": "\"switch\" statements should not contain non-case labels","description": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.<\/p>\n<h2>Noncompliant Code Examples<\/h2>\n<p>Case 1, the code is syntactically correct but the behavior is not the expected one<\/p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   \/\/ instead of \"case WEDNESDAY\"\n    doSomething();\n    break;\n  ...\n}\n<\/pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable <\/p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i = 0 ; i &lt; X ; i++) {\n         \/* ... *\/\n        break foo;  \/\/ this break statement doesn't relate to the nesting case TUESDAY\n         \/* ... *\/\n    }\n    break;\n    \/* ... *\/\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<p>Case 1<\/p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n<\/pre>\n<p>Case 2<\/p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); \/\/ put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    \/* ... *\/\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used. <\/li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. <\/li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed <\/li>\n<\/ul>","severity": "Blocker","tags": ["misra","suspicious"]}]},{"key": "S122","title": "Statements should be on separate lines","tags": ["convention","psr2"],"implementations": [{"key": "php:S122","language": "PHP","title": "Statements should be on separate lines","description": "<p>For better readability, do not put more than one statement on a single line.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(someCondition) doSomething();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Anonymous functions containing a single statement are ignored.<\/p>\n<pre>\n$max_comparator = function ($v) { return $v &gt; 2; };           \/\/ Compliant\n$max_comparator = function ($v) { echo $v; return $v &gt; 2; };  \/\/ Noncompliant\n<\/pre>","severity": "Major","tags": ["convention","psr2"]}]},{"key": "S1220","title": "The default unnamed package should not be used","tags": ["convention"],"implementations": [{"key": "squid:S1220","language": "Java","title": "The default unnamed package should not be used","description": "<p>According to the Java Language Specification:<\/p>\n<blockquote>\n  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just\n  beginning development.<\/p>\n<\/blockquote>\n<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass { \/* ... *\/ }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npackage org.example;\n\npublic class MyClass{ \/* ... *\/ }\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1221","title": "Methods should not be named \"hashcode\" or \"equal\"","tags": ["pitfall"],"implementations": [{"key": "squid:S1221","language": "Java","title": "Methods should not be named \"hashcode\" or \"equal\"","description": "<p>Naming a method <code>hashcode()<\/code> or <code>equal<\/code> is either:<\/p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()<\/code> (note the camelCasing) or <code>Object.equals<\/code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. <\/li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  <\/li>\n<\/ul>\n<p>In both cases, the method should be renamed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic int hashcode() { \/* ... *\/ }  \/\/ Noncompliant\n\npublic boolean equal(Object obj) { \/* ... *\/ }  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n@Override\npublic int hashCode() { \/* ... *\/ }\n\npublic boolean equals(Object obj) { \/* ... *\/ }\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1223","title": "Non-constructor methods should not have the same name as the enclosing class","tags": ["pitfall"],"implementations": [{"key": "squid:S1223","language": "Java","title": "Non-constructor methods should not have the same name as the enclosing class","description": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  \/\/ Compliant\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1226","title": "Method parameters, caught exceptions and foreach variables should not be reassigned","tags": ["misra","pitfall"],"implementations": [{"key": "squid:S1226","language": "Java","title": "Method parameters, caught exceptions and foreach variables should not be reassigned","description": "<p>While it is technically correct to assign to parameters from within method bodies, it reduces code readability because developers won't be able to\ntell whether the original parameter or some temporary variable is being accessed without going through the whole method. Moreover, some developers\nmight also expect assignments of method parameters to be visible to callers, which is not the case, and this lack of visibility could confuse them.\nInstead, all parameters, caught exceptions, and foreach parameters should be treated as <code>final<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    name = name;                    \/\/ Noncompliant - useless identity assignment\n  }\n\n  public int add(int a, int b) {\n    a = a + b;                      \/\/ Noncompliant\n\n    \/* additional logic *\/\n\n    return a;                       \/\/ Seems like the parameter is returned as is, what is the point?\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);                  \/\/ Variable \"a\" will still hold 40 after this call\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    this.name = name;               \/\/ Compliant\n  }\n\n  public int add(int a, int b) {\n    return a + b;                   \/\/ Compliant\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified <\/li>\n<\/ul>","severity": "Minor","tags": ["misra","pitfall"]}]},{"key": "S125","title": "Sections of code should not be \"commented out\"","tags": ["misra","unused"],"implementations": [{"key": "php:S125","language": "PHP","title": "Sections of code should not be \"commented out\"","description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.<\/p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". <\/li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. <\/li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. <\/li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" <\/li>\n<\/ul>","severity": "Major","tags": ["misra","unused"]},{"key": "python:S125","language": "Python","title": "Sections of code should not be \"commented out\"","description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.<\/p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". <\/li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. <\/li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. <\/li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" <\/li>\n<\/ul>","severity": "Major","tags": ["misra","unused"]}]},{"key": "S1264","title": "A \"while\" loop should be used instead of a \"for\" loop","tags": ["clumsy"],"implementations": [{"key": "squid:S1264","language": "Java","title": "A \"while\" loop should be used instead of a \"for\" loop","description": "<p>When only the condition expression is defined in a <code>for<\/code> loop, and the initialization and increment expressions are missing, a\n<code>while<\/code> loop should be used instead to increase readability. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (;condition;) { \/*...*\/ }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nwhile (condition) { \/*...*\/ }\n<\/pre>","severity": "Minor","tags": ["clumsy"]},{"key": "php:S1264","language": "PHP","title": "A \"while\" loop should be used instead of a \"for\" loop","description": "<p>When only the condition expression is defined in a <code>for<\/code> loop, but the init and increment expressions are missing, a <code>while<\/code>\nloop should be used instead to increase readability. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (;condition;) { \/*...*\/ }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nwhile (condition) { \/*...*\/ }\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S127","title": "\"for\" loop stop conditions should be invariant","tags": ["misra","pitfall"],"implementations": [{"key": "php:S127","language": "PHP","title": "\"for\" loop stop conditions should be invariant","description": "<p>A <code>for<\/code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. <\/p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.<\/p>\n<p>This rule tracks three types of non-invariant stop conditions:<\/p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for<\/code> loop <\/li>\n  <li> When the stop condition depend upon a method call <\/li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++) {\n  echo $i;\n  if(condition) {\n    $i = 20;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++) {\n  echo $i;\n}\n\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for<\/em> loop for iteration counting shall not be modified in the body of the\n  loop. <\/li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter<\/em> shall not be modified within <em>condition<\/em> or <em>statement<\/em>. <\/li>\n<\/ul>","severity": "Major","tags": ["misra","pitfall"]}]},{"key": "S128","title": "Switch cases should end with an unconditional \"break\" statement","tags": ["cwe","misra","cert","suspicious"],"implementations": [{"key": "squid:S128","language": "Java","title": "Switch cases should end with an unconditional \"break\" statement","description": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  \/\/ Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule is relaxed in the following cases:<\/p>\n<pre>\nswitch (myVariable) {\n  case 0:                                \/\/ Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                \/\/ Use of return statement\n    return;\n  case 3:                                \/\/ Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                \/\/ Use of continue statement\n    continue;\n  default:                               \/\/ For the last case, use of break statement is optional\n    doSomethingElse();\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used. <\/li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause <\/li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. <\/li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause <\/li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed <\/li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/484.html\">MITRE, CWE-484<\/a> - Omitted Break Statement in Switch <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/YIFLAQ\">CERT, MSC17-C.<\/a> - Finish every set of statements associated with a case\n  label with a break statement <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/ZoFLAQ\">CERT, MSC18-CPP.<\/a> - Finish every set of statements associated with a case\n  label with a break statement <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/ewHAAQ\">CERT, MSC52-J.<\/a> - Finish every set of statements associated with a case\n  label with a break statement <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","cwe","misra","suspicious"]}]},{"key": "S1301","title": "\"switch\" statements should have at least 3 \"case\" clauses","tags": ["misra","bad-practice"],"implementations": [{"key": "squid:S1301","language": "Java","title": "\"switch\" statements should have at least 3 \"case\" clauses","description": "<p><code>switch<\/code> statements are useful when there are many different cases depending on the value of the same expression.<\/p>\n<p>For just one or two cases however, the code will be more readable with <code>if<\/code> statements.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. <\/li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. <\/li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses <\/li>\n<\/ul>","severity": "Minor","tags": ["bad-practice","misra"]},{"key": "php:S1301","language": "PHP","title": "\"switch\" statements should have at least 3 \"case\" clauses","description": "<p><code>switch<\/code> statements are useful when there are many different cases depending on the value of the same expression.<\/p>\n<p>For just one or two cases however, the code will be more readable with <code>if<\/code> statements.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch ($variable) {\n  case 0:\n    do_something();\n    break;\n  default:\n    do_something_else();\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif ($variable == 0) {\n  do_something();\n} else {\n  do_something_else();\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. <\/li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. <\/li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses <\/li>\n<\/ul>","severity": "Minor","tags": ["bad-practice","misra"]}]},{"key": "S131","title": "Statements should end with a \"case default\" clause","tags": ["cwe","misra","cert"],"implementations": [{"key": "php:S131","language": "PHP","title": "Statements should end with a \"case default\" clause","description": "<p>The requirement for a final <code>case default<\/code> clause is defensive programming. The clause should either take appropriate action, or contain\na suitable comment as to why no action is taken. Even when the <code>switch<\/code> covers all current values of an <code>enum<\/code>, a default case\nshould still be used because there is no guarantee that the <code>enum<\/code> won't be extended.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch ($param) {  \/\/missing default clause\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n}\n\nswitch ($param) {\n  default: \/\/ default clause should be the last one\n    error();\n    break;\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch ($param) {\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n  default:\n    error();\n    break;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used. <\/li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause <\/li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. <\/li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause <\/li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed <\/li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch<\/em> statement shall have a <em>default<\/em> label <\/li>\n  <li> MISRA C:2012, 16.5 - A <em>default<\/em> label shall appear as either the first or the last <em>switch label<\/em> of a <em>switch<\/em> statement\n  <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/478.html\">MITRE, CWE-478<\/a> - Missing Default Case in Switch Statement <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/YgE\">CERT, MSC01-C.<\/a> - Strive for logical completeness <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/JoIyAQ\">CERT, MSC01-CPP.<\/a> - Strive for logical completeness <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe","misra"]}]},{"key": "S1313","title": "IP addresses should not be hardcoded","tags": ["cert"],"implementations": [{"key": "squid:S1313","language": "Java","title": "IP addresses should not be hardcoded","description": "<p>Hardcoding an IP address into source code is a bad idea for several reasons:<\/p>\n<ul>\n  <li> a recompile is required if the address changes <\/li>\n  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) <\/li>\n  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer <\/li>\n  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString ip = \"127.0.0.1\";\nSocket socket = new Socket(ip, 6667);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nString ip = System.getProperty(\"myapplication.ip\");\nSocket socket = new Socket(ip, 6667);\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/qQCHAQ\">CERT, MSC03-J.<\/a> - Never hard code sensitive information <\/li>\n<\/ul>","severity": "Minor","tags": ["cert"]},{"key": "python:S1313","language": "Python","title": "IP addresses should not be hardcoded","description": "<p>Hardcoding an IP address into source code is a bad idea for several reasons:<\/p>\n<ul>\n  <li> a recompile is required if the address changes <\/li>\n  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) <\/li>\n  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer <\/li>\n  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nip = '127.0.0.1'\nsock = socket.socket()\nsock.bind((ip, 9090))\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nip = config.get(section, ipAddress)\nsock = socket.socket()\nsock.bind((ip, 9090))\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/qQCHAQ\">CERT, MSC03-J.<\/a> - Never hard code sensitive information <\/li>\n<\/ul>","severity": "Minor","tags": ["cert"]}]},{"key": "S1317","title": "\"StringBuilder\" and \"StringBuffer\" should not be instantiated with a character","tags": ["pitfall"],"implementations": [{"key": "squid:S1317","language": "Java","title": "\"StringBuilder\" and \"StringBuffer\" should not be instantiated with a character","description": "<p>Instantiating a <code>StringBuilder<\/code> or a <code>StringBuffer<\/code> with a character is misleading because most Java developers would expect\nthe character to be the initial value of the <code>StringBuffer<\/code>. <\/p>\n<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nStringBuffer foo = new StringBuffer('x');   \/\/equivalent to StringBuffer foo = new StringBuffer(120);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nStringBuffer foo = new StringBuffer(\"x\");\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1319","title": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"","tags": ["bad-practice"],"implementations": [{"key": "squid:S1319","language": "Java","title": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"","description": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.<\/p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.<\/p>\n<p>This rule raises an issue when an implementation class:<\/p>\n<ul>\n  <li> is returned from a <code>public<\/code> method. <\/li>\n  <li> is accepted as an argument to a <code>public<\/code> method. <\/li>\n  <li> is exposed as a <code>public<\/code> member. <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  \/\/ Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       \/\/ Noncompliant\n    return employees;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      \/\/ Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           \/\/ Compliant\n    return employees;\n  }\n}\n<\/pre>","severity": "Minor","tags": ["bad-practice"]}]},{"key": "S135","title": "Loops should not contain more than a single \"break\" or \"continue\" statement","tags": ["brain-overload"],"implementations": [{"key": "squid:S135","language": "Java","title": "Loops should not contain more than a single \"break\" or \"continue\" statement","description": "<p>Restricting the number of <code>break<\/code> and <code>continue<\/code> statements in a loop is done in the interest of good structured programming.\n<\/p>\n<p>One <code>break<\/code> and <code>continue<\/code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     \/\/ Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n<\/pre>","severity": "Minor","tags": ["brain-overload"]}]},{"key": "S138","title": "Functions should not have too many lines","tags": ["brain-overload"],"implementations": [{"key": "php:S138","language": "PHP","title": "Functions should not have too many lines","description": "<p>A function that grows too large tends to aggregate too many responsibilities.<\/p>\n<p>Such functions inevitably become harder to understand and therefore harder to maintain. <\/p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.<\/p>\n<p>Those smaller functions will not only be easier to understand, but also probably easier to test.<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1442","title": "\"alert(...)\" should not be used","tags": ["cwe","user-experience"],"implementations": [{"key": "javascript:S1442","language": "JavaScript","title": "\"alert(...)\" should not be used","description": "<p><code>alert(...)<\/code> can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive\ninformation to attackers, and should never be displayed. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(unexpectedCondition)\n{\n  alert(\"Unexpected Condition\");\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489.html\">MITRE, CWE-489<\/a> - Leftover Debug Code <\/li>\n<\/ul>","severity": "Minor","tags": ["cwe","user-experience"]}]},{"key": "S1444","title": "\"public static\" fields should be constant","tags": ["cwe","cert"],"implementations": [{"key": "squid:S1444","language": "Java","title": "\"public static\" fields should be constant","description": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/500.html\">MITRE, CWE-500<\/a> - Public Static Field Not Marked Final <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/QQBqAQ\">CERT OBJ10-J.<\/a> - Do not use public static nonfinal fields <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","cwe"]}]},{"key": "S1448","title": "Classes should not have too many methods","tags": ["brain-overload"],"implementations": [{"key": "php:S1448","language": "PHP","title": "Classes should not have too many methods","description": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1450","title": "Private fields only used as local variables in methods should become local variables","tags": ["pitfall"],"implementations": [{"key": "squid:S1450","language": "Java","title": "Private fields only used as local variables in methods should become local variables","description": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule doesn't raise any issue on annotated field.<\/p>","severity": "Minor","tags": ["pitfall"]}]},{"key": "S1452","title": "Generic wildcard types should not be used in return parameters","tags": ["pitfall"],"implementations": [{"key": "squid:S1452","language": "Java","title": "Generic wildcard types should not be used in return parameters","description": "<p>Using a wildcard as a return type implicitly means that the return value should be considered read-only, but without any way to enforce this\ncontract. <\/p>\n<p>Let's take the example of method returning a \"List&lt;? extends Animal&gt;\". Is it possible on this list to add a Dog, a Cat, ... we simply don't\nknow. The consumer of a method should not have to deal with such disruptive questions. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n<\/pre>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S1472","title": "Function call arguments should not start on new lines","tags": ["suspicious"],"implementations": [{"key": "javascript:S1472","language": "JavaScript","title": "Function call arguments should not start on new lines","description": "<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could\nlead to errors and most likely <em>will<\/em> lead to questions for maintainers.<\/p>\n<p>What was the initial intent of the developer?<\/p>\n<ol>\n  <li> Define a function and then execute some unrelated code inside a closure ? <\/li>\n  <li> Pass the second function as a parameter to the first one ? <\/li>\n<\/ol>\n<p>The first option will be the one chosen by the JavaScript interpreter.<\/p>\n<p>By extension, and to improve readability, any kind of function call argument should not start on new line.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar fn = function () {\n  \/\/...\n}\n\n(function () { \/\/ Noncompliant\n  \/\/...\n})();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<p>Either<\/p>\n<pre>\n\/\/ define a function\nvar fn = function () {\n  \/\/...\n}; \/\/ &lt;-- semicolon added\n\n\/\/ then execute some code inside a closure\n(function () {\n  \/\/...\n})();\n<\/pre>\n<p>Or <\/p>\n<pre>\nvar fn = function () {\n  \/\/...\n}(function () { \/\/ &lt;-- start function call arguments on same line\n  \/\/...\n})();\n<\/pre>","severity": "Minor","tags": ["suspicious"]}]},{"key": "S1479","title": "\"switch\" statements should not have too many \"case\" clauses","tags": ["brain-overload"],"implementations": [{"key": "squid:S1479","language": "Java","title": "\"switch\" statements should not have too many \"case\" clauses","description": "<p>When <code>switch<\/code> statements have large sets of <code>case<\/code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.<\/p>","severity": "Major","tags": ["brain-overload"]},{"key": "php:S1479","language": "PHP","title": "\"switch\" statements should not have too many \"case\" clauses","description": "<p>When <code>switch<\/code> statements have large sets of <code>case<\/code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1481","title": "Unused local variables should be removed","tags": ["unused"],"implementations": [{"key": "squid:S1481","language": "Java","title": "Unused local variables should be removed","description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   \/\/ seconds is never used\n  return hours * 60;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n<\/pre>","severity": "Minor","tags": ["unused"]},{"key": "php:S1481","language": "PHP","title": "Unused local variables should be removed","description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction numberOfMinutes($hours) {\n  $seconds = 0;   \/\/ seconds is never used\n  return hours * 60;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction numberOfMinutes($hours) {\n  return hours * 60;\n}\n<\/pre>","severity": "Minor","tags": ["unused"]},{"key": "python:S1481","language": "Python","title": "Unused local variables should be removed","description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ndef hello(name):\n    message = \"Hello \" + name # Noncompliant\n    print(name)\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndef hello(name):\n    message = \"Hello \" + name\n    print(message)\n<\/pre>","severity": "Minor","tags": ["unused"]}]},{"key": "S1488","title": "Local Variables should not be declared and then immediately returned or thrown","tags": ["clumsy"],"implementations": [{"key": "squid:S1488","language": "Java","title": "Local Variables should not be declared and then immediately returned or thrown","description": "<p>Declaring a variable only to immediately return or throw it is a bad practice.<\/p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]},{"key": "php:S1488","language": "PHP","title": "Local Variables should not be declared and then immediately returned or thrown","description": "<p>Declaring a variable only to immediately return or throw it is a bad practice.<\/p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction compute_duration_in_milliseconds() {\n  $duration = ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000 ;\n  return $duration;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction compute_duration_in_milliseconds() {\n  return ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000;\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1523","title": "Code should not be dynamically injected and executed","tags": ["cwe","owasp-a3"],"implementations": [{"key": "php:S1523","language": "PHP","title": "Code should not be dynamically injected and executed","description": "<p>The <code>eval<\/code> function is a way to run arbitrary code at run-time. <\/p>\n<p>According to the PHP documentation<\/p>\n<blockquote>\n  <p>The eval() language construct is very dangerous because it allows execution of arbitrary PHP code. Its use thus is discouraged. If you have\n  carefully verified that there is no other option than to use this construct, pay special attention not to pass any user provided data into it\n  without properly validating it beforehand.<\/p>\n<\/blockquote>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\neval($code_to_be_dynamically_executed)\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/95.html\">MITRE CWE-95<\/a> - CWE-95: Improper Neutralization of Directives in Dynamically\n  Evaluated Code ('Eval Injection') <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3<\/a> - Cross-Site Scripting\n  (XSS) <\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","owasp-a3"]}]},{"key": "S1536","title": "Function argument names should be unique","tags": [],"implementations": [{"key": "php:S1536","language": "PHP","title": "Function argument names should be unique","description": "<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be\nerror prone. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction compute($a, $a, $c) { \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction compute($a, $b, $c) { \/\/ Compliant\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S1542","title": "Function names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "python:S1542","language": "Python","title": "Function names should comply with a naming convention","description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$<\/p>\n<pre>\ndef MyFunction(a,b):\n    ...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndef my_function(a,b):\n    ...\n<\/pre>","severity": "Major","tags": ["convention"]}]},{"key": "S1596","title": "\"Collections.EMPTY_LIST\", \"EMPTY_MAP\", and \"EMPTY_SET\" should not be used","tags": ["obsolete","pitfall"],"implementations": [{"key": "squid:S1596","language": "Java","title": "\"Collections.EMPTY_LIST\", \"EMPTY_MAP\", and \"EMPTY_SET\" should not be used","description": "<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;<\/code> is recommended over the use of raw\nones such as <code>List<\/code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...<\/code>\nfields of the <code>Collections<\/code> class return raw types, whereas the newer <code>empty...()<\/code> methods return generic ones.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;  \/\/ Noncompliant\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  \/\/ Noncompliant\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n<\/pre>","severity": "Minor","tags": ["obsolete","pitfall"]}]},{"key": "S1598","title": "Package declaration should match source file directory","tags": ["pitfall"],"implementations": [{"key": "squid:S1598","language": "Java","title": "Package declaration should match source file directory","description": "<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java\nfile located at \"src\/org\/sonarqube\/Foo.java\" should have a package of \"org.sonarqube\". <\/p>\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the\n\"com.apple\" package, which could degrade the maintainability of both the class and its application.<\/p>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S1599","title": "Variable variables should not be used","tags": ["brain-overload"],"implementations": [{"key": "php:S1599","language": "PHP","title": "Variable variables should not be used","description": "<p>PHP's \"variable variables\" feature (dynamically-named variables) is temptingly powerful, but can lead to unmaintainable code. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$var = 'foo';\n$$var = 'bar';      \/\/Noncompliant\n$$$var = 'hello';  \/\/Noncompliant\n\necho $foo; \/\/will display 'bar'\necho $bar; \/\/will display 'hello'\n<\/pre>","severity": "Blocker","tags": ["brain-overload"]}]},{"key": "S1600","title": "Deprecated predefined variables should not be used","tags": ["pitfall"],"implementations": [{"key": "php:S1600","language": "PHP","title": "Deprecated predefined variables should not be used","description": "<p>The following predefined variables are deprecated and should be replaced by the new versions:<\/p>\n<table>\n  <tbody>\n    <tr>\n      <th>Replace<\/th>\n      <th>With<\/th>\n    <\/tr>\n    <tr>\n      <td>$HTTP_SERVER_VARS<\/td>\n      <td>$_SERVER<\/td>\n    <\/tr>\n    <tr>\n      <td>$HTTP_GET_VARS<\/td>\n      <td>$_GET<\/td>\n    <\/tr>\n    <tr>\n      <td>$HTTP_POST_VARS<\/td>\n      <td>$_POST<\/td>\n    <\/tr>\n    <tr>\n      <td>$HTTP_POST_FILES<\/td>\n      <td>$_FILES<\/td>\n    <\/tr>\n    <tr>\n      <td>$HTTP_SESSION_VARS<\/td>\n      <td>$_SESSION<\/td>\n    <\/tr>\n    <tr>\n      <td>$HTTP_ENV_VARS<\/td>\n      <td>$_ENV<\/td>\n    <\/tr>\n    <tr>\n      <td>$HTTP_COOKIE_VARS<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\necho 'Name parameter value: ' . $HTTP_GET_VARS[\"name\"];\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\necho 'Name parameter value: ' . $_GET[\"name\"];\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1602","title": "Lamdbas containing only one statement should not nest this statement in a block","tags": ["java8"],"implementations": [{"key": "squid:S1602","language": "Java","title": "Lamdbas containing only one statement should not nest this statement in a block","description": "<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.<\/p>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nx -&gt; {System.out.println(x+1);}\n(a, b) -&gt; { return a+b; }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nx -&gt; System.out.println(x+1)\n(a, b) -&gt; a+b    \/\/For return statement, the return keyword should also be dropped\n<\/pre>","severity": "Minor","tags": ["java8"]}]},{"key": "S1603","title": "PHP 4 constructor declarations should not be used","tags": ["pitfall"],"implementations": [{"key": "php:S1603","language": "PHP","title": "PHP 4 constructor declarations should not be used","description": "<p>In PHP 4, any function with the same name as the nesting class was considered a class constructor. In PHP 5, this mechanism has been deprecated and\nthe \"__construct\" method name should be used instead. If both styles are present in the same class, PHP 5 will treat the function named \"__construct\"\nas the class constructor. <\/p>\n<p>This rule rule raises an issue for each method with the same name as the enclosing class.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo {\n  function Foo(){...}\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Foo {\n  function __construct(){...}\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1604","title": "Anonymous inner classes containing only one method should become lambdas","tags": ["java8"],"implementations": [{"key": "squid:S1604","language": "Java","title": "Anonymous inner classes containing only one method should become lambdas","description": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.<\/p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.<\/p>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n<\/pre>","severity": "Major","tags": ["java8"]}]},{"key": "S1605","title": "\"__construct\" functions should not make PHP 4-style calls to parent constructors","tags": ["convention"],"implementations": [{"key": "php:S1605","language": "PHP","title": "\"__construct\" functions should not make PHP 4-style calls to parent constructors","description": "<p>In PHP 5 both the way to declare a constructor and the way to make a call to a parent constructor have evolved. When declaring constructors with\nthe PHP5 <code>__construct<\/code> name, nested calls to parent constructors should also use the new <code>__constructor<\/code> name.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo extends Bar {\n  function __construct() {\n    parent::Bar();\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Foo extends Bar {\n  function __construct() {\n    parent::__construct();\n  }\n}\n<\/pre>","severity": "Major","tags": ["convention"]}]},{"key": "S1607","title": "Tests should not be ignored","tags": ["tests","suspicious"],"implementations": [{"key": "squid:S1607","language": "Java","title": "Tests should not be ignored","description": "<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.<\/p>\n<p>This rule raises an issue for each ignored test that does not have a notation about why it is being skipped.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n@Ignore  \/\/ Noncompliant\n@Test\npublic void testDoTheThing() {\n  \/\/ ...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n@Test\npublic void testDoTheThing() {\n  \/\/ ...\n<\/pre>","severity": "Major","tags": ["suspicious","tests"]}]},{"key": "S1610","title": "Abstract classes without fields should be converted to interfaces","tags": ["java8"],"implementations": [{"key": "squid:S1610","language": "Java","title": "Abstract classes without fields should be converted to interfaces","description": "<p>With Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.<\/p>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n<\/pre>","severity": "Minor","tags": ["java8"]}]},{"key": "S1611","title": "Parentheses should be removed from a single lambda input parameter when its type is inferred","tags": ["java8"],"implementations": [{"key": "squid:S1611","language": "Java","title": "Parentheses should be removed from a single lambda input parameter when its type is inferred","description": "<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.<\/p>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n(x) -&gt; x * 2\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nx -&gt; x * 2\n<\/pre>","severity": "Minor","tags": ["java8"]}]},{"key": "S1612","title": "Lambdas should be replaced with method references","tags": ["java8"],"implementations": [{"key": "squid:S1612","language": "Java","title": "Lambdas should be replaced with method references","description": "<p>Method\/constructor references are more compact and readable than using lambdas, and are therefore preferred. Similarly, <code>null<\/code> checks\ncan be replaced with references to the <code>Objects::isNull<\/code> and <code>Objects::nonNull<\/code> methods.<\/p>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(a -&gt; a.&lt;String&gt;getObject())\n      .forEach(a -&gt; { System.out.println(a); });\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(A::&lt;String&gt;getObject)\n      .forEach(System.out::println);\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n<\/pre>","severity": "Minor","tags": ["java8"]}]},{"key": "S1640","title": "Maps with keys that are enum values should be replaced with EnumMap","tags": ["performance"],"implementations": [{"key": "squid:S1640","language": "Java","title": "Maps with keys that are enum values should be replaced with EnumMap","description": "<p>When all the keys of a Map are values from the same enum, the <code>Map<\/code> can be replaced with an <code>EnumMap<\/code>, which can be much more\nefficient than other sets because the underlying data structure is a simple array.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;COLOR, String&gt; (COLOR.class);\n  }\n}\n<\/pre>","severity": "Minor","tags": ["performance"]}]},{"key": "S1643","title": "Strings should not be concatenated using '+' in a loop","tags": ["performance"],"implementations": [{"key": "squid:S1643","language": "Java","title": "Strings should not be concatenated using '+' in a loop","description": "<p>Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n<\/pre>","severity": "Minor","tags": ["performance"]}]},{"key": "S1656","title": "Variables should not be self-assigned","tags": ["cert"],"implementations": [{"key": "squid:S1656","language": "Java","title": "Variables should not be self-assigned","description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]},{"key": "javascript:S1656","language": "JavaScript","title": "Variables should not be self-assigned","description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction setName(name) {\n    name = name;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction setName(name) {\n    this.name = name;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]},{"key": "php:S1656","language": "PHP","title": "Variables should not be self-assigned","description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic function setName($name) {\n    $name = $name;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic function setName($name) {\n    $this-&gt;name = $name;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]},{"key": "python:S1656","language": "Python","title": "Variables should not be self-assigned","description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nname = name\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nname = other.name\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S1659","title": "Multiple variables should not be declared on the same line","tags": ["convention","misra","cert"],"implementations": [{"key": "squid:S1659","language": "Java","title": "Multiple variables should not be declared on the same line","description": "<p>Declaring multiple variable on one line is difficult to read.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator\n  respectively <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/7wHEAw\">CERT, DCL52-J.<\/a> - Do not declare more than one variable per declaration\n  <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/VgU\">CERT, DCL04-C.<\/a> - Do not declare more than one variable per declaration <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/fAAhAQ\">CERT, DCL04-CPP.<\/a> - Do not declare more than one variable per declaration\n  <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","convention","misra"]}]},{"key": "S1697","title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals","tags": [],"implementations": [{"key": "php:S1697","language": "PHP","title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals","description": "<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only<\/em> if it is null, leading to a guaranteed null pointer dereference.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ($obj == null &amp;&amp; $obj-&gt;isOpen()) {\n  echo \"Object is open\";\n}\n\nif ($obj != null || $obj-&gt;isOpen()) {\n  echo \"Object is not open\";\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif ($obj == null || $obj-&gt;isOpen()) {\n  echo \"Object is open\";\n}\n\nif ($obj != null &amp;&amp; !$obj-&gt;isOpen()) {\n  echo \"Object is not open\";\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S1700","title": "A field should not duplicate the name of its containing class","tags": ["brain-overload"],"implementations": [{"key": "squid:S1700","language": "Java","title": "A field should not duplicate the name of its containing class","description": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.<\/p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() \/\/ what does this return?\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n\/\/...\n\nFoo foo = new Foo();\nfoo.getName()\n\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. <\/p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]},{"key": "python:S1700","language": "Python","title": "A field should not duplicate the name of its containing class","description": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.<\/p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo:\n  foo = ''\n\n  def getFoo(self):\n    ...\n\nfoo = Foo()\nfoo.getFoo() # what does this return?\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Foo:\n  name = ''\n\n  def getName(self):\n    ...\n\nfoo = Foo()\nfoo.getName()\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1710","title": "Annotation repetitions should not be wrapped","tags": ["java8"],"implementations": [{"key": "squid:S1710","language": "Java","title": "Annotation repetitions should not be wrapped","description": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.<\/p>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n@SomeAnnotations({  \/\/ Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n<\/pre>","severity": "Minor","tags": ["java8"]}]},{"key": "S1716","title": "\"break\" and \"continue\" should not be used outside a loop","tags": [],"implementations": [{"key": "python:S1716","language": "Python","title": "\"break\" and \"continue\" should not be used outside a loop","description": "<p><code>break<\/code> and <code>continue<\/code> are unstructured control flow statements which make code harder to read. Additionally, more recent\nversions of Python raise a SyntaxError when modules containing <code>break<\/code> or <code>continue<\/code> outside of a loop are imported.<\/p>\n<p>Therefore, these statements should not be used outside of loops. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nnarg=len(sys.argv)\nif narg == 1:\n        print('@Usage: input_filename nelements nintervals')\n        break\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif narg == 1:\n        print('@Usage: input_filename nelements nintervals')\n        sys.exit()\n<\/pre>","severity": "Critical","tags": []}]},{"key": "S1751","title": "Jump statements should not be used unconditionally","tags": ["misra","cert","unused"],"implementations": [{"key": "squid:S1751","language": "Java","title": "Jump statements should not be used unconditionally","description": "<p>Having an unconditional <code>break<\/code>, <code>return<\/code> or <code>throw<\/code> in a loop renders it useless; the loop will only execute once\nand the loop structure itself is simply wasted keystrokes.<\/p>\n<p>Having an unconditional <code>continue<\/code> in a loop is itself wasted keystrokes.<\/p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return<\/code> in a function or method.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nint i;\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println(\"i is \" + i);\n  break;  \/\/ loop only executes once\n}\n\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println(\"i is \" + i);\n  continue;  \/\/ this is meaningless; the loop would continue anyway\n}\n\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println(\"i is \" + i);\n  return;  \/\/ loop only executes once\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nint i;\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println(\"i is \" + i);\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. <\/li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project<\/em> shall not contain <em>unreachable code<\/em>. <\/li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. <\/li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","misra","unused"]},{"key": "javascript:S1751","language": "JavaScript","title": "Jump statements should not be used unconditionally","description": "<p>Having an unconditional <code>break<\/code>, <code>return<\/code> or <code>throw<\/code> in a loop renders it useless; the loop will only execute once\nand the loop structure itself is simply wasted keystrokes.<\/p>\n<p>Having an unconditional <code>continue<\/code> in a loop is itself wasted keystrokes.<\/p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return<\/code> in a function or method.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  break;  \/\/ loop only executes once\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  continue;  \/\/ this is meaningless; the loop would continue anyway\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  return;  \/\/ loop only executes once\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. <\/li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project<\/em> shall not contain <em>unreachable code<\/em>. <\/li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. <\/li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","misra","unused"]}]},{"key": "S1763","title": "Jump statements should not be followed by other statements","tags": ["cwe","misra","cert","unused"],"implementations": [{"key": "php:S1763","language": "PHP","title": "Jump statements should not be followed by other statements","description": "<p>Jump statements (<code>return<\/code>, <code>break<\/code>, <code>continue<\/code>, and <code>goto<\/code>) and <code>throw<\/code> expressions move\ncontrol flow out of the current code block. Typically, any statements in a block that come after a jump or <code>throw<\/code> are simply wasted\nkeystrokes lying in wait to confuse the unwary. <\/p>\n<p>Rarely, as illustrated below, code after a jump or <code>throw<\/code> is reachable. However, such code is difficult to understand, and should be\nrefactored. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction fun($a) {\n  $i = 10;\n  return $i + $a;\n  $i++;             \/\/ this is never executed\n}\n\nfunction foo($a) {\n  if ($a == 5) {\n    goto error;\n  } else {\n    \/\/ do the job\n  }\n  return;\n\n  error:\n    printf(\"don't use 5\"); \/\/ this is reachable but unreadable\n\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction fun($a) {\n  $i = 10;\n  return $i + $a;\n}\n\nfunction foo($a) {\n  if ($a == 5) {\n    handleError();\n  } else {\n    \/\/ do the job\n  }\n  return;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code <\/li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/561.html\">MITRE, CWE-561<\/a> - Dead Code <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/OYIyAQ\">CERT, MSC07-CPP.<\/a> - Detect and remove dead code <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","unused"]},{"key": "python:S1763","language": "Python","title": "Jump statements should not be followed by other statements","description": "<p>Jump statements (<code>return<\/code>, <code>break<\/code>, <code>continue<\/code>, and <code>raise<\/code>) move control flow out of the current code\nblock. Typically, any statements in a block that come after a jump are simply wasted keystrokes lying in wait to confuse the unwary. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a       # Noncompliant\n  i += 1             # this is never executed\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code <\/li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code <\/li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code <\/li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code <\/li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/561.html\">MITRE, CWE-561<\/a> - Dead Code <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/uQCSBg\">CERT, MSC56-J.<\/a> - Detect and remove superfluous code and values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/OYIyAQ\">CERT, MSC07-CPP.<\/a> - Detect and remove dead code <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","unused"]}]},{"key": "S1764","title": "Identical expressions should not be used on both sides of a binary operator","tags": ["cert"],"implementations": [{"key": "squid:S1764","language": "Java","title": "Identical expressions should not be used on both sides of a binary operator","description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy\/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.<\/p>\n<p>This rule ignores <code>*<\/code>, <code>+<\/code>, and <code>=<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ( a == a ) { \/\/ always true\n  doZ();\n}\nif ( a != a ) { \/\/ always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { \/\/ if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { \/\/ if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 \/ 5; \/\/always 1\nint k = 5 - 5; \/\/always 0\n\nc.equals(c); \/\/always true\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN<\/code> and is therefore ignored.<\/p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.<\/p>\n<pre>\nfloat f;\nif(f != f) { \/\/test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; \/\/ Compliant\nint j = a &lt;&lt; a; \/\/ Noncompliant\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> {rule:squid:S1656} - Implements a check on <code>=<\/code>. <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]},{"key": "javascript:S1764","language": "JavaScript","title": "Identical expressions should not be used on both sides of a binary operator","description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy\/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.<\/p>\n<p>This rule ignores <code>*<\/code>, <code>+<\/code>, and <code>=<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ( a == a ) { \/\/ always true\n  doZ();\n}\nif ( a != a ) { \/\/ always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { \/\/ if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { \/\/ if the first one is true, the second one is too\n  doW();\n}\n\nvar j = 5 \/ 5; \/\/always 1\nvar k = 5 - 5; \/\/always 0\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>The specific case of testing one variable against itself is a valid test for <code>NaN<\/code> and is therefore ignored.<\/p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. <\/p>\n<p>Moreover comma operator <code>,<\/code> and <code>instanceof<\/code> operator are ignored as there are use-cases when there usage is valid.<\/p>\n<pre>\nif(f !== f) { \/\/ test for NaN value\n  console.log(\"f is NaN\");\n}\n\nvar i = 1 &lt;&lt; 1; \/\/ Compliant\nvar j = a &lt;&lt; a; \/\/ Noncompliant\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> {rule:javascript:S1656} - Implements a check on <code>=<\/code>. <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]},{"key": "php:S1764","language": "PHP","title": "Identical expressions should not be used on both sides of a binary operator","description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy\/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.<\/p>\n<p>This rule ignores <code>*<\/code>, <code>+<\/code>, and <code>=<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ( $a == $a ) { \/\/ always true\n  doZ();\n}\nif ( $a != $a ) { \/\/ always false\n  doY();\n}\nif ( $a == $b &amp;&amp; $a == $b ) { \/\/ if the first one is true, the second one is too\n  doX();\n}\nif ( $a == $b || $a == $b ) { \/\/ if the first one is true, the second one is too\n  doW();\n}\n\n$j = 5 \/ 5; \/\/always 1\n$k = 5 - 5; \/\/always 0\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.<\/p>\n<pre>\n$i = 1 &lt;&lt; 1; \/\/ Compliant\n$j = $a &lt;&lt; $a; \/\/ Noncompliant\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> {rule:php:S1656} - Implements a check on <code>=<\/code>. <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]},{"key": "python:S1764","language": "Python","title": "Identical expressions should not be used on both sides of a binary operator","description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy\/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.<\/p>\n<p>This rule ignores <code>*<\/code>, <code>+<\/code>, and <code>=<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif a == a: # Noncompliant\n    work()\n\nif  a != a: # Noncompliant\n    work()\n\nif  a == b and a == b: # Noncompliant\n    work()\n\nif a == b or a == b: # Noncompliant\n    work()\n\nj = 5 \/ 5 # Noncompliant\nk = 5 - 5 # Noncompliant\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>The following are ignored:<\/p>\n<ul>\n  <li> The expression <code>1 &lt;&lt; 1<\/code> <\/li>\n<\/ul>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> {rule:python:S1656} - Implements a check on <code>=<\/code>. <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S1788","title": "Method arguments with default values should be last","tags": ["psr2"],"implementations": [{"key": "php:S1788","language": "PHP","title": "Method arguments with default values should be last","description": "<p>The ability to define default values for method arguments can make a method easier to use. Default argument values allow callers to specify as many\nor as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code. <\/p>\n<p>But all method arguments with default values should be declared after the method arguments without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values in order to \"get to\" the non-default arguments.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction makeyogurt($type = \"acidophilus\", $flavor){...}  \/\/ Noncompliant\n\nmakeyogurt(\"raspberry\")}}  \/\/ Runtime error: Missing argument 2 in call to makeyogurt()\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction makeyogurt($flavor, $type = \"acidophilus\", ){...}\n\nmakeyogurt(\"raspberry\")}} \/\/ Works as expected\n<\/pre>","severity": "Major","tags": ["psr2"]}]},{"key": "S1844","title": "\"Object.wait(...)\" should never be called on objects that implement \"java.util.concurrent.locks.Condition\"","tags": ["suspicious"],"implementations": [{"key": "squid:S1844","language": "Java","title": "\"Object.wait(...)\" should never be called on objects that implement \"java.util.concurrent.locks.Condition\"","description": "<p>From the Java API documentation:<\/p>\n<blockquote>\n  <p><code>Condition<\/code> factors out the <code>Object<\/code> monitor methods (<code>wait<\/code>, <code>notify<\/code> and <code>notifyAll<\/code>)\n  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.\n  Where a <code>Lock<\/code> replaces the use of <code>synchronized<\/code> methods and statements, a <code>Condition<\/code> replaces the use of the\n  <code>Object<\/code> monitor methods.<\/p>\n<\/blockquote>\n<p>The purpose of implementing the <code>Condition<\/code> interface is to gain access to its more nuanced <code>await<\/code> methods. Therefore,\ncalling the method <code>Object.wait(...)<\/code> on a class implementing the <code>Condition<\/code> interface is silly and confusing.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.wait();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.await();\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "S1845","title": "Methods and field names should not be the same or differ only by capitalization","tags": ["confusing"],"implementations": [{"key": "squid:S1845","language": "Java","title": "Methods and field names should not be the same or differ only by capitalization","description": "<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.<\/p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.<\/p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  \/\/ Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  \/\/ Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} \/\/Huh?\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  \/\/ field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n<\/pre>","severity": "Blocker","tags": ["confusing"]},{"key": "python:S1845","language": "Python","title": "Methods and field names should not differ only by capitalization","description": "<p>Looking at the set of methods and fields in a <code>class<\/code> and finding two that differ only by capitalization is confusing to users of the\nclass.<\/p>\n<p>This situation may simply indicate poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case\nwhere both a method and a field have the same name (with or without capitalization differences). However, renaming a public method could be disruptive\nto callers. Therefore renaming the member is the recommended action.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass SomeClass:\n    lookUp = false\n    def lookup():       # Non-compliant; method name differs from field name only by capitalization\n        pass\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass SomeClass:\n    lookUp = false\n    def getLookUp():\n        pass\n<\/pre>","severity": "Blocker","tags": ["confusing"]}]},{"key": "S1848","title": "Objects should not be created to be dropped immediately without being used","tags": [],"implementations": [{"key": "php:S1848","language": "PHP","title": "Objects should not be created to be dropped immediately without being used","description": "<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.<\/p>\n<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and\ncalled directly.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ($x &lt; 0) {\n  new foo;  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n$var = NULL;\nif ($x &lt; 0) {\n  $var = new foo;\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S1849","title": "\"Iterator.hasNext()\" should not call \"Iterator.next()\"","tags": [],"implementations": [{"key": "squid:S1849","language": "Java","title": "\"Iterator.hasNext()\" should not call \"Iterator.next()\"","description": "<p>Calling <code>Iterator.hasNext()<\/code> is not supposed to have any side effects, and therefore should not change the state of the iterator.\n<code>Iterator.next()<\/code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()<\/code>, breaks the\n<code>hasNext()<\/code> contract, and will lead to unexpected behavior in production.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class FibonacciIterator implements Iterator&lt;Integer&gt;{\n...\n@Override\npublic boolean hasNext() {\n  if(next() != null) {\n    return true;\n  }\n  return false;\n}\n...\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S1854","title": "Dead stores should be removed","tags": ["cwe","cert","unused"],"implementations": [{"key": "squid:S1854","language": "Java","title": "Dead stores should be removed","description": "<p>A dead store happens when a local variable is assigned a value, including <code>null<\/code>, that is not read by any subsequent instruction.\nCalculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error,\nit is at best a waste of resources. <\/p>\n<p>Even assigning <code>null<\/code> to a variable is a dead store if the variable is not subsequently used. Assigning null as a hint to the garbage\ncollector used to be common practice, but is no longer needed and such code should be eliminated.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a;  \/\/Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a;\n  }\n  return x;\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null<\/code>, empty string (<code>\"\"<\/code>), <code>true<\/code>, and <code>false<\/code>.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/563.html\">MITRE, CWE-563<\/a> - Assignment to Variable without Use ('Unused Variable') <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/QYA5\">CERT, MSC13-C.<\/a> - Detect and remove unused values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/S4IyAQ\">CERT, MSC13-CPP.<\/a> - Detect and remove unused values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/uQCSBg\">CERT, MSC56-J.<\/a> - Detect and remove superfluous code and values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","unused"]},{"key": "javascript:S1854","language": "JavaScript","title": "Dead stores should be removed","description": "<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction or when an object property is\nassigned a value that is not subsequently used. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious\nerror in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1; i &lt; b; i++) {\n    x = x * a;  \/\/Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1; i &lt; b; i++) {\n    x = x * a;\n  }\n  return x;\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null<\/code>, <code>true<\/code>, <code>false<\/code>, <code>\"\"<\/code>, <code>[]<\/code> and\n<code>{}<\/code>.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/563.html\">MITRE, CWE-563<\/a> - Assignment to Variable without Use ('Unused Variable') <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/QYA5\">CERT, MSC13-C.<\/a> - Detect and remove unused values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/S4IyAQ\">CERT, MSC13-CPP.<\/a> - Detect and remove unused values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/uQCSBg\">CERT, MSC56-J.<\/a> - Detect and remove superfluous code and values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","unused"]}]},{"key": "S1858","title": "\"toString()\" should never be called on a String object","tags": ["finding","clumsy"],"implementations": [{"key": "squid:S1858","language": "Java","title": "\"toString()\" should never be called on a String object","description": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); \/\/ Noncompliant;\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n<\/pre>","severity": "Minor","tags": ["clumsy","finding"]}]},{"key": "S1860","title": "Synchronization should not be based on Strings or boxed primitives","tags": ["multi-threading","cert"],"implementations": [{"key": "squid:S1860","language": "Java","title": "Synchronization should not be based on Strings or boxed primitives","description": "<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock\nwith unhelpful stacktraces. Specifically, <code>String<\/code> literals, and boxed primitives such as Integers should not be used as lock objects\nbecause they are pooled and reused. The story is even worse for <code>Boolean<\/code> objects, because there are only two instances of\n<code>Boolean<\/code>, <code>Boolean.TRUE<\/code> and <code>Boolean.FALSE<\/code> and every class that uses a Boolean will be referring to one of the\ntwo.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = \"LOCK\";\n\npublic void doSomething() {\n\n  synchronized(bLock) {  \/\/ Noncompliant\n    \/\/ ...\n  }\n  synchronized(iLock) {  \/\/ Noncompliant\n    \/\/ ...\n  }\n  synchronized(sLock) {  \/\/ Noncompliant\n    \/\/ ...\n  }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nprivate static final Object lock1 = new Object();\nprivate static final Object lock2 = new Object();\nprivate static final Object lock3 = new Object();\n\npublic void doSomething() {\n\n  synchronized(lock1) {\n    \/\/ ...\n  }\n  synchronized(lock2) {\n    \/\/ ...\n  }\n  synchronized(lock3) {\n    \/\/ ...\n  }\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/rQGeAQ\">CERT, LCK01-J.<\/a> - Do not synchronize on objects that may be reused <\/li>\n<\/ul>","severity": "Major","tags": ["cert","multi-threading"]}]},{"key": "S1862","title": "Related \"if\/else if\" statements should not have the same condition","tags": ["cert","unused","pitfall"],"implementations": [{"key": "squid:S1862","language": "Java","title": "Related \"if\/else if\" statements should not have the same condition","description": "<p>A chain of <code>if<\/code>\/<code>else if<\/code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true<\/code>. <\/p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy\/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  \/\/ Noncompliant\n  moveWindowToTheBackground();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","pitfall","unused"]},{"key": "javascript:S1862","language": "JavaScript","title": "Related \"if\/else if\" statements and \"cases\" in a \"switch\" should not have the same condition","description": "<p>A <code>switch<\/code> and a chain of <code>if<\/code>\/<code>else if<\/code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true<\/code>.<\/p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy\/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.<\/p>\n<p>For a <code>switch<\/code>, if the first case ends with a <code>break<\/code>, the second case will never be executed, rendering it dead code. Worse\nthere is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.<\/p>\n<p>On the other hand, if the first case does not end with a <code>break<\/code>, both cases will be executed, but future maintainers may not notice\nthat.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  \/\/ Noncompliant\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    \/\/...\n    break;\n  case 3:\n    \/\/...\n    break;\n  case 1:  \/\/ Noncompliant\n    \/\/...\n    break;\n  default:\n    \/\/ ...\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    \/\/...\n    break;\n  case 3:\n    \/\/...\n    break;\n  default:\n    \/\/ ...\n    break;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","pitfall","unused"]},{"key": "php:S1862","language": "PHP","title": "Related \"if\/else if\" statements and \"cases\" in a \"switch\" should not have the same condition","description": "<p>A <code>switch<\/code> and a chain of <code>if<\/code>\/<code>else if<\/code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true<\/code>.<\/p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy\/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.<\/p>\n<p>For a <code>switch<\/code>, if the first case ends with a <code>break<\/code>, the second case will never be executed, rendering it dead code. Worse\nthere is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.<\/p>\n<p>On the other hand, if the first case does not end with a <code>break<\/code>, both cases will be executed, but future maintainers may not notice\nthat.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ($param == 1)\n  openWindow();\nelse if ($param == 2)\n  closeWindow();\nelse if ($param == 1)  \/\/ Noncompliant\n  moveWindowToTheBackground();\n\n\nswitch($i) {\n  case 1:\n    \/\/...\n    break;\n  case 3:\n    \/\/...\n    break;\n  case 1:  \/\/ Noncompliant\n    \/\/...\n    break;\n  default:\n    \/\/ ...\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif ($param == 1)\n  openWindow();\nelse if ($param == 2)\n  closeWindow();\nelse if ($param == 3)\n  moveWindowToTheBackground();\n\nswitch($i) {\n  case 1:\n    \/\/...\n    break;\n  case 3:\n    \/\/...\n    break;\n  default:\n    \/\/ ...\n    break;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","pitfall","unused"]},{"key": "python:S1862","language": "Python","title": "Related \"if\/else if\" statements should not have the same condition","description": "<p>A chain of <code>if<\/code>\/<code>else if<\/code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true<\/code>. <\/p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy\/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 1:            # Noncompliant\n  moveWindowToTheBackground()\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 3:\n  moveWindowToTheBackground()\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","pitfall","unused"]}]},{"key": "S1871","title": "Two branches in a conditional structure should not have exactly the same implementation","tags": ["design","suspicious"],"implementations": [{"key": "squid:S1871","language": "Java","title": "Two branches in a conditional structure should not have exactly the same implementation","description": "<p>Having two <code>cases<\/code> in a <code>switch<\/code> statement or two branches in an <code>if<\/code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if<\/code> chain they should\nbe combined, or for a <code>switch<\/code>, one should fall through to the other. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  \/\/ Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  \/\/ Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n<\/pre>\n<p>or <\/p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Blocks in an <code>if<\/code> chain that contain a single line of code are ignored, as are blocks in a <code>switch<\/code> statement that contain a\nsingle line of code with or without a following <code>break<\/code>.<\/p>","severity": "Major","tags": ["design","suspicious"]},{"key": "javascript:S1871","language": "JavaScript","title": "Two branches in a conditional structure should not have exactly the same implementation","description": "<p>Having two <code>cases<\/code> in a <code>switch<\/code> statement or two branches in an <code>if<\/code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if<\/code> chain they should\nbe combined, or for a <code>switch<\/code>, one should fall through to the other. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  \/\/ Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  \/\/ Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n<\/pre>\n<p>or <\/p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Blocks in an <code>if<\/code> chain that contain a single line of code are ignored, as are blocks in a <code>switch<\/code> statement that contain a\nsingle line of code with or without a following <code>break<\/code>.<\/p>","severity": "Major","tags": ["design","suspicious"]},{"key": "php:S1871","language": "PHP","title": "Two branches in the same conditional structure should not have exactly the same implementation","description": "<p>Having two <code>cases<\/code> in the same <code>switch<\/code> statement or branches in the same <code>if<\/code> structure with the same\nimplementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an\n<code>if<\/code> structure they should be combined, or for a <code>switch<\/code>, one should fall through to the other. <\/p>\n<p>Moreover when the second and third operands of a ternary operator are the same, the operator will always return the same value regardless of the\ncondition. Either the operator itself is pointless, or a mistake was made in coding it.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch ($i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  \/\/ Noncompliant; duplicates case 1's implementation\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThing();  \/\/ Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n\nif ($b == 0) {\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing(); \/\/ Noncompliant; duplicates then-branch\n}\n\nvar b = a ? 12 &gt; 4 : 4;  \/\/ Noncompliant; always results in the same value\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch ($i) {\n  case 1:\n  case 3:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif (($a &gt;= 0 &amp;&amp; $a &lt; 10) || ($a &gt;= 20 &amp;&amp; $a &lt; 50)) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n\ndoOneMoreThing();\n\nb = 4;\n<\/pre>\n<p>or <\/p>\n<pre>\nswitch ($i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n\nif ($b == 0) {\n  doOneMoreThing();\n}\nelse {\n  doTheRest();\n}\n\nint b = a ? 12 &gt; 4 : 8;\n<\/pre>","severity": "Minor","tags": ["design","suspicious"]},{"key": "python:S1871","language": "Python","title": "Two branches in a conditional structure should not have exactly the same implementation","description": "<p>Having two branches in the same <code>if<\/code> structure with the same implementation is at best duplicate code, and at worst a coding error. If\nthe same logic is truly needed for both instances, then they should be combined.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_the_thing()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_the_thing()  # Noncompliant; duplicates first condition\nelse:\n    do_the_rest()\n\nb = 4 if a &gt; 12 else 4\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (0 &lt;= a &lt; 10) or (20 &lt;= a &lt; 50):\n    do_the_thing()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelse:\n    do_the_rest()\n\nb = 4\n<\/pre>\n<p>or <\/p>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_the_thing()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_the_third_thing()\nelse:\n    do_the_rest()\n\nb = 8 if a &gt; 12 else 4\n<\/pre>","severity": "Major","tags": ["design","suspicious"]}]},{"key": "S1872","title": "Classes should not be compared by name","tags": ["cwe","cert"],"implementations": [{"key": "squid:S1872","language": "Java","title": "Classes should not be compared by name","description": "<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access.<\/p>\n<p>Instead, the <code>instanceof<\/code> operator or the <code>Class.isAssignableFrom()<\/code> method should be used to check the object's underlying\ntype.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  \/\/ Noncompliant\n      return true;  \/\/ Results in throwing away week-old computers\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (List.class.getName().equals(valueClass.getName())) {  \/\/ Noncompliant\n      return true;\n    }\n    return false;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (valueClass.isAssignableFrom(List.class)) {\n      return true;\n    }\n    return false;\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/486.html\">MITRE, CWE-486<\/a> - Comparison of Classes by Name <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/LAFlAQ\">CERT, OBJ09-J.<\/a> - Compare classes and not class names <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe"]}]},{"key": "S1905","title": "Redundant casts should not be used","tags": ["redundant","clumsy"],"implementations": [{"key": "squid:S1905","language": "Java","title": "Redundant casts should not be used","description": "<p>Unnecessary casting expressions make the code harder to read and understand.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  \/\/ Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    \/\/...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    \/\/...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:<\/p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); \/\/call the first method so cast is not redundant.\n  }\n\n}\n<\/pre>","severity": "Minor","tags": ["clumsy","redundant"]}]},{"key": "S1940","title": "Boolean checks should not be inverted","tags": ["pitfall"],"implementations": [{"key": "squid:S1940","language": "Java","title": "Boolean checks should not be inverted","description": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ( !(a == 2)) { ...}  \/\/ Noncompliant\nboolean b = !(i &lt; 10);  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (a != 2) { ...}\nboolean b = (i &gt;= 10);\n<\/pre>","severity": "Minor","tags": ["pitfall"]}]},{"key": "S1948","title": "Fields in a \"Serializable\" class should either be transient or serializable","tags": ["cwe","serialization"],"implementations": [{"key": "squid:S1948","language": "Java","title": "Fields in a \"Serializable\" class should either be transient or serializable","description": "<p>Fields in a <code>Serializable<\/code> class must themselves be either <code>Serializable<\/code> or <code>transient<\/code> even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n<code>Serializable<\/code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a <code>Serializable<\/code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. <\/p>\n<p>This rule raises an issue on non-<code>Serializable<\/code> fields, and on collection fields when they are not <code>private<\/code> (because they\ncould be assigned non-<code>Serializable<\/code> values externally), and when they are assigned non-<code>Serializable<\/code> types within the\nclass.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Address {\n  \/\/...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  \/\/ Noncompliant; Address isn't serializable\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>The alternative to making all members <code>serializable<\/code> or <code>transient<\/code> is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:<\/p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/594.html\">MITRE, CWE-594<\/a> - Saving Unserializable Objects to Disk <\/li>\n  <li> <a href=\"http:\/\/docs.oracle.com\/javase\/6\/docs\/api\/java\/io\/Serializable.html\">Oracle Java 6, Serializable<\/a> <\/li>\n  <li> <a href=\"http:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/io\/Serializable.html\">Oracle Java 7, Serializable<\/a> <\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","serialization"]}]},{"key": "S1989","title": "Exceptions should not be thrown from servlet methods","tags": ["cwe","error-handling","cert","owasp-a6"],"implementations": [{"key": "squid:S1989","language": "Java","title": "Exceptions should not be thrown from servlet methods","description": "<p>Even though the signatures for methods in a servlet include <code>throws IOException, ServletException<\/code>, it's a bad idea to let such\nexceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service\nattacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging\ninformation back to the user. And that information could be very valuable to an attacker. <\/p>\n<p>This rule checks all exceptions in methods named \"do*\" are explicitly handled in servlet classes.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  String ip = request.getRemoteAddr();\n  InetAddress addr = InetAddress.getByName(ip); \/\/ Noncompliant; getByName(String) throws UnknownHostException\n  \/\/...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  try {\n    String ip = request.getRemoteAddr();\n    InetAddress addr = InetAddress.getByName(ip);\n    \/\/...\n  }\n  catch (UnknownHostException uhex) {\n    \/\/...\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/600.html\">MITRE, CWE-600<\/a> - Uncaught Exception in Servlet <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/s4EVAQ\">CERT, ERR01-J.<\/a> - Do not allow exceptions to expose sensitive information\n  <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten Category A6<\/a> - Sensitive Data Exposure <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","cwe","error-handling","owasp-a6"]}]},{"key": "S1994","title": "\"for\" loop increment clauses should modify the loops' counters","tags": ["confusing"],"implementations": [{"key": "squid:S1994","language": "Java","title": "\"for\" loop increment clauses should modify the loops' counters","description": "<p>It can be extremely confusing when a <code>for<\/code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) {  \/\/ Noncompliant\n  \/\/ ...\n  i++;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  \/\/ ...\n}\n<\/pre>\n<p>Or<\/p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  \/\/ ...\n  j++;\n}\n<\/pre>","severity": "Critical","tags": ["confusing"]}]},{"key": "S1998","title": "References should not be passed to function calls","tags": ["cwe","performance","obsolete","pitfall"],"implementations": [{"key": "php:S1998","language": "PHP","title": "References should not be passed to function calls","description": "<p>Passing a reference to a function parameter means that any modifications the method makes to the parameter will be made to the original value as\nwell, since references have the effect of pointing two variables at the same memory space. This feature can be difficult to use correctly,\nparticularly if the callee is not expecting a reference, and the improper use of references in function calls can make code less efficient rather than\nmore efficient. <\/p>\n<p>Further, according to the PHP manual: <\/p>\n<blockquote>\n  As of PHP 5.3.0, you will get a warning saying that \"call-time pass-by-reference\" is deprecated... And as of PHP 5.4.0, call-time pass-by-reference\n  was removed, so using it will raise a fatal error.\n<\/blockquote>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nmyfun(&amp;$name);  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nmyfun($name);\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/374\">MITRE, CWE-374<\/a> - Weakness Base Passing Mutable Objects to an Untrusted Method <\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","obsolete","performance","pitfall"]}]},{"key": "S2004","title": "Functions should not be nested too deeply","tags": ["brain-overload"],"implementations": [{"key": "php:S2004","language": "PHP","title": "Functions should not be nested too deeply","description": "<p>Nesting functions can quickly turn your code into \"spaghetti code\". Such code is hard to read, refactor and therefore to maintain.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default threshold of 3:<\/p>\n<pre>\nfunction f () {\n  function f_inner () {\n    function f_inner_inner() {\n      function f_inner_inner_inner() { \/\/ Noncompliant\n      }\n    }\n  }\n}\n<\/pre>","severity": "Critical","tags": ["brain-overload"]}]},{"key": "S2010","title": "\"&&\" and \"||\" should be used","tags": ["suspicious"],"implementations": [{"key": "php:S2010","language": "PHP","title": "\"&&\" and \"||\" should be used","description": "<p>PHP has two sets of logical operators: <code>&amp;&amp;<\/code> \/ <code>||<\/code>, and <code>and<\/code> \/ <code>or<\/code>. The difference between\nthe sets is precedence. Because <code>and<\/code> \/ <code>or<\/code> have a lower precedence than almost any other operator, using them instead of\n<code>&amp;&amp;<\/code> \/ <code>||<\/code> may not have the result you expect.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$have_time = true;\n$have_money = false;\n$take_vacation = $have_time and $have_money;  \/\/ Noncompliant. $take_vacation == true.\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n$have_time = true;\n$have_money = false;\n$take_vacation = $have_time &amp;&amp; $have_money;  \/\/ $take_vacation == false.\n<\/pre>","severity": "Minor","tags": ["suspicious"]}]},{"key": "S2014","title": "\"$this\" should not be used in a static context","tags": [],"implementations": [{"key": "php:S2014","language": "PHP","title": "\"$this\" should not be used in a static context","description": "<p><code>$this<\/code> refers to the current class instance. But static methods can be accessed without instantiating the class, and <code>$this<\/code>\nis not available to them. Using <code>$this<\/code> in a static context will result in a fatal error at runtime.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Clazz {\n  $name=NULL;  \/\/ instance variable\n\n  public static function foo(){\n    if ($this-&gt;name != NULL) {\n      \/\/ ...\n    }\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Clazz {\n  $name=NULL;  \/\/ instance variable\n\n  public static function foo($nameParam){\n    if ($nameParam != NULL) {\n      \/\/ ...\n    }\n  }\n}\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S2041","title": "Parentheses should not be used for calls to \"echo\"","tags": ["pitfall"],"implementations": [{"key": "php:S2041","language": "PHP","title": "Parentheses should not be used for calls to \"echo\"","description": "<p><code>echo<\/code> can be called with or without parentheses, but it is best practice to leave parentheses off the call because using parentheses\nwith multiple arguments will result in a parse error.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\necho(\"Hello\");  \/\/ Noncompliant, but it works\necho(\"Hello\", \"World\"); \/\/ Noncompliant. Parse error\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\necho \"Hello\";\necho \"Hello\",\"World!\";\n<\/pre>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S2055","title": "The non-serializable super class of a \"Serializable\" class should have a no-argument constructor","tags": ["serialization"],"implementations": [{"key": "squid:S2055","language": "Java","title": "The non-serializable super class of a \"Serializable\" class should have a no-argument constructor","description": "<p>When a <code>Serializable<\/code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the\nobject from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until\nthe final object has been instantiated. <\/p>\n<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a\n<code>Serializable<\/code> class must have a no-arg constructor. Otherwise the class is <code>Serializable<\/code> but not deserializable.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {  \/\/ Noncompliant; nonserializable ancestor doesn't have no-arg constructor\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit () {...};  \/\/ Compliant; no-arg constructor added to ancestor\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) {...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n<\/pre>","severity": "Minor","tags": ["serialization"]}]},{"key": "S2060","title": "\"Externalizable\" classes should have no-arguments constructors","tags": [],"implementations": [{"key": "squid:S2060","language": "Java","title": "\"Externalizable\" classes should have no-arguments constructors","description": "<p>An <code>Externalizable<\/code> class is one which handles its own <code>Serialization<\/code> and deserialization. During deserialization, the first\nstep in the process is a default instantiation using the class' no-argument constructor. Therefore an <code>Externalizable<\/code> class without a\nno-arg constructor cannot be deserialized.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Tomato implements Externalizable {  \/\/ Noncompliant; no no-arg constructor\n\n  public Tomato (String color, int weight) { ... }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Tomato implements Externalizable {\n\n  public Tomato() { ... }\n  public Tomato (String color, int weight) { ... }\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2061","title": "Custom serialization method signatures should meet requirements","tags": ["cert"],"implementations": [{"key": "squid:S2061","language": "Java","title": "Custom serialization method signatures should meet requirements","description": "<p>Writers of <code>Serializable<\/code> classes can choose to let Java's automatic mechanisms handle serialization and deserialization, or they can\nchoose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they\nwill be ignored and the default serialization mechanisms will kick back in. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Watermelon implements Serializable {\n  \/\/ ...\n  void writeObject(java.io.ObjectOutputStream out)\/\/ Noncompliant; not private\n        throws IOException\n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n  {...}\n\n  public void readObjectNoData()  \/\/ Noncompliant; not private\n  {...}\n\n  static Object readResolve() throws ObjectStreamException  \/\/ Noncompliant; this method may have any access modifier, may not be static\n\n  Watermelon writeReplace() throws ObjectStreamException \/\/ Noncompliant; this method may have any access modifier, but must return Object\n  {...}\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Watermelon implements Serializable {\n  \/\/ ...\n  private void writeObject(java.io.ObjectOutputStream out)\n        throws IOException\n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n        throws IOException, ClassNotFoundException\n  {...}\n\n  private void readObjectNoData()\n        throws ObjectStreamException\n  {...}\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  private Object writeReplace() throws ObjectStreamException\n  {...}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/4gAMAg\">CERT, SER01-J.<\/a> - Do not deviate from the proper signatures of serialization\n  methods <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S2062","title": "\"readResolve\" methods should be inheritable","tags": ["pitfall"],"implementations": [{"key": "squid:S2062","language": "Java","title": "\"readResolve\" methods should be inheritable","description": "<p>The <code>readResolve()<\/code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement\n<code>readResolve()<\/code>, should not set its visibility to <code>private<\/code> since it will then be unavailable to child classes.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private Object readResolve() throws ObjectStreamException  \/\/ Noncompliant\n  {...}\n\n  \/\/...\n}\n\npublic class Raspberry extends Fruit implements Serializable {  \/\/ No access to parent's readResolve() method\n  \/\/...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  \/\/...\n}\n\npublic class Raspberry extends Fruit implements Serializable {\n  \/\/...\n}\n<\/pre>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S2065","title": "Fields in non-serializable classes should not be \"transient\"","tags": ["serialization","unused"],"implementations": [{"key": "squid:S2065","language": "Java","title": "Fields in non-serializable classes should not be \"transient\"","description": "<p><code>transient<\/code> is used to mark fields in a <code>Serializable<\/code> class which will not be written out to file (or stream). In a class\nthat does not implement <code>Serializable<\/code>, this modifier is simply wasted keystrokes, and should be removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Vegetable {  \/\/ does not implement Serializable\n  private transient Season ripe;  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Vegetable {\n  private Season ripe;\n  \/\/ ...\n}\n<\/pre>","severity": "Minor","tags": ["serialization","unused"]}]},{"key": "S2066","title": "\"Serializable\" inner classes of non-serializable classes should be \"static\"","tags": ["serialization","cert"],"implementations": [{"key": "squid:S2066","language": "Java","title": "\"Serializable\" inner classes of non-serializable classes should be \"static\"","description": "<p>Serializing a non-<code>static<\/code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not\nserializable, then serialization will fail, resulting in a runtime error. <\/p>\n<p>Making the inner class <code>static<\/code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static<\/code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: <\/p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. <\/li>\n  <li> a nested (<code>static<\/code>) class can be instantiated independently of the outer class. <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Pomegranate {\n  \/\/ ...\n\n  public class Seed implements Serializable {  \/\/ Noncompliant; serialization will fail\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Pomegranate {\n  \/\/ ...\n\n  public static class Seed implements Serializable {\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/O4CpAQ\">CERT SER05-J.<\/a> - Do not serialize instances of inner classes <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","serialization"]}]},{"key": "S2068","title": "Credentials should not be hard-coded","tags": ["cwe","cert","sans-top25-porous","owasp-a2"],"implementations": [{"key": "squid:S2068","language": "Java","title": "Credentials should not be hard-coded","description": "<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.<\/p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nConnection conn = null;\ntry {\n  conn = DriverManager.getConnection(\"jdbc:mysql:\/\/localhost\/test?\" +\n        \"user=steve&amp;password=blue\"); \/\/ Noncompliant\n  String uname = \"steve\";\n  String password = \"blue\";\n  conn = DriverManager.getConnection(\"jdbc:mysql:\/\/localhost\/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password); \/\/ Noncompliant\n\n  java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication(\"userName\", \"1234\".toCharArray());  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql:\/\/localhost\/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/798\">MITRE, CWE-798<\/a> - Use of Hard-coded Credentials <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/259\">MITRE, CWE-259<\/a> - Use of Hard-coded Password <\/li>\n  <li> <a href=\"http:\/\/www.sans.org\/top25-software-errors\/\">SANS Top 25<\/a> - Porous Defenses <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/qQCHAQ\">CERT, MSC03-J.<\/a> - Never hard code sensitive information <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2<\/a> -\n  Broken Authentication and Session Management <\/li>\n  <li> Derived from FindSecBugs rule <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password<\/a> <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","cwe","owasp-a2","sans-top25-porous"]},{"key": "php:S2068","language": "PHP","title": "Credentials should not be hard-coded","description": "<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.<\/p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$uname = \"steve\";\n$password = \"blue\";\nconnect($uname, $password);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n$uname = getEncryptedUser();\n$password = getEncryptedPass();\nconnect($uname, $password);\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/798\">MITRE, CWE-798<\/a> - Use of Hard-coded Credentials <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/259\">MITRE, CWE-259<\/a> - Use of Hard-coded Password <\/li>\n  <li> <a href=\"http:\/\/www.sans.org\/top25-software-errors\/\">SANS Top 25<\/a> - Porous Defenses <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/qQCHAQ\">CERT, MSC03-J.<\/a> - Never hard code sensitive information <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2<\/a> -\n  Broken Authentication and Session Management <\/li>\n  <li> Derived from FindSecBugs rule <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password<\/a> <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","cwe","owasp-a2","sans-top25-porous"]}]},{"key": "S2077","title": "SQL binding mechanisms should be used","tags": ["cwe","owasp-a1","sans-top25-insecure","cert","hibernate","sql"],"implementations": [{"key": "squid:S2077","language": "Java","title": "SQL binding mechanisms should be used","description": "<p>Applications that execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an\nattacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed.<\/p>\n<p>This rule checks a variety of methods from different frameworks which are susceptible to SQL injection if not used properly. Frameworks which are\ncovered are Java JDBC, JPA, JDO, Hibernate and Spring. The following specific method signatures are tested. <\/p>\n<ul>\n  <li> <code>org.hibernate.Session.createQuery<\/code> <\/li>\n  <li> <code>org.hibernate.Session.createSQLQuery<\/code> <\/li>\n  <li> <code>java.sql.Statement.executeQuery<\/code> <\/li>\n  <li> <code>java.sql.Statement.execute<\/code> <\/li>\n  <li> <code>java.sql.Statement.executeUpdate<\/code> <\/li>\n  <li> <code>java.sql.Statement.executeLargeUpdate<\/code> <\/li>\n  <li> <code>java.sql.Statement.addBatch<\/code> <\/li>\n  <li> <code>java.sql.Connection.prepareStatement<\/code> <\/li>\n  <li> <code>java.sql.Connection.prepareCall<\/code> <\/li>\n  <li> <code>java.sql.Connection.nativeSQL<\/code> <\/li>\n  <li> <code>javax.persistence.EntityManager.createNativeQuery<\/code> <\/li>\n  <li> <code>javax.persistence.EntityManager.createQuery<\/code> <\/li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.batchUpdate<\/code> <\/li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.execute<\/code> <\/li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.query<\/code> <\/li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForList<\/code> <\/li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForMap<\/code> <\/li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForObject<\/code> <\/li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForRowSet<\/code> <\/li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForInt<\/code> <\/li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForLong<\/code> <\/li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.update<\/code> <\/li>\n  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.&lt;init&gt;<\/code> <\/li>\n  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementCreator<\/code> <\/li>\n  <li> <code>javax.jdo.PersistenceManager.newQuery<\/code> <\/li>\n  <li> <code>javax.jdo.Query.setFilter<\/code> <\/li>\n  <li> <code>javax.jdo.Query.setGrouping<\/code> <\/li>\n<\/ul>\n<p>If a method is defined in an interface, implementations are also tested. For example this is the case for\n<code>org.springframework.jdbc.core.JdbcOperations<\/code> , which is usually used as <code>org.springframework.jdbc.core.JdbcTemplate<\/code>). <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  Statement stmt2 = null;\n  PreparedStatement pstmt;\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\"); \/\/ Compliant; parameters not used here\n\n    stmt2 = con.createStatement();\n    ResultSet rs2 = stmt2.executeQuery(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  \/\/ Noncompliant; parameter concatenated directly into query\n\n    pstmt = con.prepareStatement(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  \/\/ Noncompliant; parameter concatenated directly into query\n    ResultSet rs3 = pstmt.executeQuery();\n\n    \/\/...\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query = session.createQuery(  \/\/ Compliant\n            \"FROM students where fname = \" + userInput);  \/\/ Noncompliant; parameter binding should be used instead\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  PreparedStatement pstmt = null;\n  String query = \"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=?\"\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\");\n\n    pstmt = con.prepareStatement(query);\n    pstmt.setString(1, user);  \/\/ Compliant; PreparedStatements escape their inputs.\n    ResultSet rs2 = pstmt.executeQuery();\n\n    \/\/...\n  }\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query =  session.createQuery(\"FROM students where fname = ?\");\n  query = query.setParameter(0,userInput);  \/\/ Parameter binding escapes all input\n  \/\/ ...\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/89\">MITRE, CWE-89<\/a> - Improper Neutralization of Special Elements used in an SQL Command <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/564.html\">MITRE, CWE-564<\/a> - SQL Injection: Hibernate <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/20.html\">MITRE, CWE-20<\/a> - Improper Input Validation <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/943.html\">MITRE, CWE-943<\/a> - Improper Neutralization of Special Elements in Data Query Logic\n  <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/PgIRAg\">CERT, IDS00-J.<\/a> - Prevent SQL injection <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1<\/a> - Injection <\/li>\n  <li> <a href=\"http:\/\/www.sans.org\/top25-software-errors\/\">SANS Top 25<\/a> - Insecure Interaction Between Components <\/li>\n  <li> Derived from FindSecBugs rules <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#SQL_INJECTION_JPA\">Potential SQL\/JPQL Injection\n  (JPA)<\/a>, <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#SQL_INJECTION_JDO\">Potential SQL\/JDOQL Injection (JDO)<\/a>, <a\n  href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL\/HQL Injection (Hibernate)<\/a> <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","cwe","hibernate","owasp-a1","sans-top25-insecure","sql"]}]},{"key": "S2092","title": "Cookies should be \"secure\"","tags": ["cwe","owasp-a6","owasp-a2"],"implementations": [{"key": "squid:S2092","language": "Java","title": "Cookies should be \"secure\"","description": "<p>The \"secure\" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon.\nInstead, cookies with the secure attribute are only sent over encrypted HTTPS connections.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);  \/\/ Noncompliant; cookie is not secure\nresponse.addCookie(c);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);\nc.setSecure(true);\nresponse.addCookie(c);\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/614\">MITRE, CWE-614<\/a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2<\/a> -\n  Broken Authentication and Session Management <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6<\/a> - Sensitive Data Exposure\n  <\/li>\n<\/ul>","severity": "Minor","tags": ["cwe","owasp-a2","owasp-a6"]}]},{"key": "S2093","title": "Try-with-resources should be used","tags": ["java8","cert","pitfall"],"implementations": [{"key": "squid:S2093","language": "Java","title": "Try-with-resources should be used","description": "<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer\nto bullet-proof, it should be preferred over the older <code>try<\/code>\/<code>catch<\/code>\/<code>finally<\/code> version.<\/p>\n<p>This rule checks that <code>close<\/code>-able resources are opened in a try-with-resources statement.<\/p>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>7<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nFileReader fr = null;\nBufferedReader br = null;\ntry {\n  fr = new FileReader(fileName);\n  br = new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n} finally {\n  if (br != null) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n  if (fr != null ) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ntry (\n    FileReader fr = new FileReader(fileName);\n    BufferedReader br = new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n<\/pre>\n<p>or<\/p>\n<pre>\ntry (BufferedReader br =\n        new BufferedReader(new FileReader(fileName))) { \/\/ no need to name intermediate resources if you don't want to\n  return br.readLine();\n}\ncatch (...) {}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/MACfBg\">CERT, ERR54-J.<\/a> - Use a try-with-resources statement to safely handle\n  closeable resources <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","java8","pitfall"]}]},{"key": "S2094","title": "Classes should not be empty","tags": ["clumsy"],"implementations": [{"key": "squid:S2094","language": "Java","title": "Classes should not be empty","description": "<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an\n<code>interface<\/code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Nothing {  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic interface Nothing {\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.<\/p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S2095","title": "Resources should be closed","tags": ["cwe","leak","denial-of-service","cert"],"implementations": [{"key": "squid:S2095","language": "Java","title": "Resources should be closed","description": "<p>Java's garbage collection cannot be relied on to clean up everything. Specifically, connections, streams, files and other classes that implement\nthe <code>Closeable<\/code> interface or its super-interface, <code>AutoCloseable<\/code>, must be manually closed after creation. Further, that\n<code>close<\/code> call must be made in a <code>finally<\/code> block, otherwise an exception could keep the call from being made. <\/p>\n<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it's on to\ntheir knees.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nprivate void readTheFile() throws IOException {\n  Path path = Paths.get(this.fileName);\n  BufferedReader reader = Files.newBufferedReader(path, this.charset)) {\n  \/\/ ...\n  reader.close();  \/\/ Noncompliant\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    for (String property : propertyList) {\n      stream = new FileOutputStream(\"myfile.txt\");  \/\/ Noncompliant\n      \/\/ ...\n    }\n  } catch (Exception e) {\n    \/\/ ...\n  } finally {\n    stream.close();  \/\/ Multiple streams were opened. Only the last is closed.\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nprivate void readTheFile() throws IOException {\n  Path path = Paths.get(this.fileName);\n  BufferedReader reader = null;\n  try {\n    reader = Files.newBufferedReader(path, this.charset)) {\n    \/\/ ...\n  } finally {\n    if (reader != null) {\n      reader.close();\n    }\n  }\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    stream = new FileOutputStream(\"myfile.txt\");\n    for (String property : propertyList) {\n      \/\/ ...\n    }\n  } catch (Exception e) {\n    \/\/ ...\n  } finally {\n    stream.close();\n  }\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables<\/code>. All resources opened in a try-with-resources\nstatement are ignored by this rule. <\/p>\n<pre>\ntry (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n  \/\/...\n}\ncatch ( ... ) {\n  \/\/...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/459.html\">MITRE, CWE-459<\/a> - Incomplete Cleanup <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/9gFqAQ\">CERT, FIO04-J.<\/a> - Release resources when they are no longer needed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/GAGQBw\">CERT, FIO42-C.<\/a> - Close files when they are no longer needed <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","cwe","denial-of-service","leak"]}]},{"key": "S2097","title": "\"equals(Object obj)\" should test argument type","tags": [],"implementations": [{"key": "squid:S2097","language": "Java","title": "\"equals(Object obj)\" should test argument type","description": "<p>Because the <code>equals<\/code> method takes a generic <code>Object<\/code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  \/\/ ...\n}\n<\/pre>","severity": "Minor","tags": []}]},{"key": "S2109","title": "Reflection should not be used to check non-runtime annotations","tags": [],"implementations": [{"key": "squid:S2109","language": "Java","title": "Reflection should not be used to check non-runtime annotations","description": "<p>The writer of an annotation can set one of three retention policies for it:<\/p>\n<ul>\n  <li> <code>RetentionPolicy.SOURCE<\/code> - these annotations are dropped during compilation, E.G. <code>@Override<\/code>,\n  <code>@SuppressWarnings<\/code>. <\/li>\n  <li> <code>RetentionPolicy.CLASS<\/code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the\n  default. <\/li>\n  <li> <code>RetentionPolicy.RUNTIME<\/code> - these annotations are present in the class file and loaded into the JVM. <\/li>\n<\/ul>\n<p>Only annotations that have been given a <code>RUNTIME<\/code> retention policy will be available to reflection. Testing for annotations with any\nother retention policy is simply an error, since the test will always return false.<\/p>\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME<\/code> retention.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nMethod m = String.class.getMethod(\"getBytes\", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  \/\/ Noncompliant; test will always return false, even when @Override is present in the code\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2110","title": "Invalid \"Date\" values should not be used","tags": [],"implementations": [{"key": "squid:S2110","language": "Java","title": "Invalid \"Date\" values should not be used","description": "<p>Whether the valid value ranges for <code>Date<\/code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month\nstarts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12\nfor month, and you'll get January of the following year.<\/p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date<\/code>, <code>java.sql.Date<\/code>, and\n<code>java.util.Calendar<\/code>. Specifically, values outside of the valid ranges:<\/p>\n<table>\n  <tbody>\n    <tr>\n      <th>Field<\/th>\n      <th>Valid<\/th>\n    <\/tr>\n    <tr>\n      <td>month<\/td>\n      <td>0-11<\/td>\n    <\/tr>\n    <tr>\n      <td>date (day)<\/td>\n      <td>0-31<\/td>\n    <\/tr>\n    <tr>\n      <td>hour<\/td>\n      <td>0-23<\/td>\n    <\/tr>\n    <tr>\n      <td>minute<\/td>\n      <td>0-60<\/td>\n    <\/tr>\n    <tr>\n      <td>second<\/td>\n      <td>0-61<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  \/\/ Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  \/\/ Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  \/\/ Noncompliant; invalid comparison\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  \/\/ ...\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2111","title": "\"BigDecimal(double)\" should not be used","tags": ["cert"],"implementations": [{"key": "squid:S2111","language": "Java","title": "\"BigDecimal(double)\" should not be used","description": "<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)<\/code> constructor. <\/p>\n<p>From <a href=\"http:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/math\/BigDecimal.html#BigDecimal(double)\">the JavaDocs<\/a>:<\/p>\n<blockquote>\n  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which\n  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to\n  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\n  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances\n  notwithstanding.\n<\/blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf<\/code>, which uses a string under the covers to eliminate floating point rounding errors.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); \/\/ Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); \/\/ Noncompliant; same result\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = BigDecimal.valueOf(1.1);\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NQAVAg\">CERT, NUM10-J.<\/a> - Do not construct BigDecimal objects from floating-point\n  literals <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S2112","title": "\"URL.hashCode\" and \"URL.equals\" should be avoided","tags": ["performance"],"implementations": [{"key": "squid:S2112","language": "Java","title": "\"URL.hashCode\" and \"URL.equals\" should be avoided","description": "<p>The <code>equals<\/code> and <code>hashCode<\/code> methods of <code>java.net.URL<\/code> both may trigger a name service (usually DNS) lookup to\nresolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI<\/code> on the other hand\nmakes no such calls and should be used instead unless the specific <code>URL<\/code> functionality is required.<\/p>\n<p>In general it is better to use the <code>URI<\/code> class until access to the resource is actually needed, at which point you can just convert the\n<code>URI<\/code> to a <code>URL<\/code> using <code>URI.toURL()<\/code>.<\/p>\n<p>This rule checks for uses of <code>URL<\/code> 's in <code>Map<\/code> and <code>Set<\/code> , and for explicit calls to the <code>equals<\/code> and\n<code>hashCode<\/code> methods.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  \/\/ Noncompliant\n\n  URL homepage = new URL(\"http:\/\/sonarsource.com\");  \/\/ Compliant\n  if (homepage.equals(url)) { \/\/ Noncompliant\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  \/\/ Compliant\n\n  URI homepage = new URI(\"http:\/\/sonarsource.com\");  \/\/ Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  \/\/ Compliant\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S2114","title": "Collections should not be passed as arguments to their own methods","tags": [],"implementations": [{"key": "squid:S2114","language": "Java","title": "Collections should not be passed as arguments to their own methods","description": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. <\/p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); \/\/ Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); \/\/ Noncompliant; behavior undefined\nobjs.containsAll(objs); \/\/ Noncompliant; always true\nobjs.removeAll(objs); \/\/ Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); \/\/ Noncompliant; NOOP\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2116","title": "\"hashCode\" and \"toString\" should not be called on array instances","tags": [],"implementations": [{"key": "squid:S2116","language": "Java","title": "\"hashCode\" and \"toString\" should not be called on array instances","description": "<p>While <code>hashCode<\/code> and <code>toString<\/code> are available on arrays, they are largely useless. <code>hashCode<\/code> returns the array's\n\"identity hash code\", and <code>toString<\/code> returns nearly the same value. Neither method's output actually reflects the array's contents.\nInstead, you should pass the array to the relevant static <code>Arrays<\/code> method.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); \/\/ Noncompliant\n    int argHash = args.hashCode(); \/\/ Noncompliant\n\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2118","title": "Non-serializable classes should not be written","tags": ["serialization"],"implementations": [{"key": "squid:S2118","language": "Java","title": "Non-serializable classes should not be written","description": "<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown.\nOnly a class that <code>implements Serializable<\/code> or one that extends such a class can successfully be serialized (or de-serialized). <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Vegetable {  \/\/ neither implements Serializable nor extends a class that does\n  \/\/...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    \/\/...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  \/\/ Noncompliant. Nothing will be written\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Vegetable implements Serializable {  \/\/ can now be serialized\n  \/\/...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    \/\/...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n<\/pre>","severity": "Major","tags": ["serialization"]}]},{"key": "S2122","title": "\"ScheduledThreadPoolExecutor\" should not have 0 core threads","tags": [],"implementations": [{"key": "squid:S2122","language": "Java","title": "\"ScheduledThreadPoolExecutor\" should not have 0 core threads","description": "<p><code>java.util.concurrent.ScheduledThreadPoolExecutor<\/code>'s pool is sized with <code>corePoolSize<\/code>, so setting <code>corePoolSize<\/code>\nto zero means the executor will have no threads and run nothing.<\/p>\n<p>This rule detects instances where <code>corePoolSize<\/code> is set to zero, via either its setter or the object constructor.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void do(){\n\n  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); \/\/ Noncompliant\n\n  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);\n  stpe2.setCorePoolSize(0);  \/\/ Noncompliant\n<\/pre>","severity": "Critical","tags": []}]},{"key": "S2123","title": "Values should not be uselessly incremented","tags": ["unused"],"implementations": [{"key": "squid:S2123","language": "Java","title": "Values should not be uselessly incremented","description": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; \/\/ Noncompliant; i is still zero\n\n  return j++; \/\/ Noncompliant; 0 returned\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n<\/pre>","severity": "Major","tags": ["unused"]},{"key": "javascript:S2123","language": "JavaScript","title": "Values should not be uselessly incremented","description": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar i = 0;\ni = i++; \/\/ Noncompliant; i is still zero\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar i = 0;\ni++;\n<\/pre>","severity": "Major","tags": ["unused"]}]},{"key": "S2127","title": "\"Double.longBitsToDouble\" should not be used for \"int\"","tags": [],"implementations": [{"key": "squid:S2127","language": "Java","title": "\"Double.longBitsToDouble\" should not be used for \"int\"","description": "<p><code>Double.longBitsToDouble<\/code> expects a 64-bit, <code>long<\/code> argument. Pass it a smaller value, such as an <code>int<\/code> and the\nmathematical conversion into a <code>double<\/code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as\nif a child were trying to use an adult's gloves.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nint i = 42;\ndouble d = Double.longBitsToDouble(i);  \/\/ Noncompliant\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2129","title": "Constructors should not be used to instantiate \"String\" and primitive-wrapper classes","tags": ["performance"],"implementations": [{"key": "squid:S2129","language": "Java","title": "Constructors should not be used to instantiate \"String\" and primitive-wrapper classes","description": "<p>Constructors for <code>Strings<\/code> and the objects used to wrap primitives should never be used. Doing so is less clear and uses more memory\nthan simply using the desired value in the case of strings, and using <code>valueOf<\/code> for everything else.<\/p>\n<p>Further, these constructors are deprecated in Java 9, which is an indication that they will eventually be removed from the language altogether.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString empty = new String(); \/\/ Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); \/\/ Noncompliant\nDouble myDouble = new Double(1.1); \/\/ Noncompliant; use valueOf\nInteger integer = new Integer(1); \/\/ Noncompliant\nBoolean bool = new Boolean(true); \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S2130","title": "Parsing should be used to convert \"Strings\" to primitives","tags": ["performance"],"implementations": [{"key": "squid:S2130","language": "Java","title": "Parsing should be used to convert \"Strings\" to primitives","description": "<p>Rather than creating a boxed primitive from a <code>String<\/code> to extract the primitive value, use the relevant <code>parse<\/code> method\ninstead. It will be clearer and more efficient.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = (new Float(myNum)).floatValue();  \/\/ Noncompliant; creates &amp; discards a Float\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = Float.parseFloat(myNum);\n<\/pre>","severity": "Minor","tags": ["performance"]}]},{"key": "S2131","title": "Primitives should not be boxed just for \"String\" conversion","tags": ["performance"],"implementations": [{"key": "squid:S2131","language": "Java","title": "Primitives should not be boxed just for \"String\" conversion","description": "<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'\n<code>toString<\/code> method, it's a waste of memory and cycles because those methods are <code>static<\/code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static<\/code> method <code>valueOf<\/code> in the primitive-wrapper classes with a non-<code>String<\/code>\nargument should be avoided, as should concatenating empty string <code>\"\"<\/code> to a primitive.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); \/\/ Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); \/\/ Noncompliant\nmyIntString = 4 + \"\";  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S2133","title": "Objects should not be created only to \"getClass\"","tags": ["performance"],"implementations": [{"key": "squid:S2133","language": "Java","title": "Objects should not be created only to \"getClass\"","description": "<p>Creating an object for the sole purpose of calling <code>getClass<\/code> on it is a waste of memory and cycles. Instead, simply use the class'\n<code>.class<\/code> property.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nMyObject myOb = new MyObject();  \/\/ Noncompliant\nClass c = myOb.getClass();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nClass c = MyObject.class;\n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S2134","title": "Classes extending java.lang.Thread should override the \"run\" method","tags": ["multi-threading","pitfall"],"implementations": [{"key": "squid:S2134","language": "Java","title": "Classes extending java.lang.Thread should override the \"run\" method","description": "<p>According to the Java API documentation:<\/p>\n<blockquote>\n  <p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the\n  run method of class Thread. An instance of the subclass can then be allocated and started...<\/p>\n  <p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An\n  instance of the class can then be allocated, passed as an argument when creating Thread, and started.<\/p>\n<\/blockquote>\n<p>By definition, extending the Thread class without overriding the <code>run<\/code> method doesn't make sense, and implies that the contract of the\n<code>Thread<\/code> class is not well understood.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyRunner extends Thread { \/\/ Noncompliant; run method not overridden\n\n  public void doSometing() {...}\n}\n<\/pre>","severity": "Major","tags": ["multi-threading","pitfall"]}]},{"key": "S2140","title": "Methods of \"Random\" that return floating point values should not be used in random integer generation","tags": ["clumsy"],"implementations": [{"key": "squid:S2140","language": "Java","title": "Methods of \"Random\" that return floating point values should not be used in random integer generation","description": "<p>There is no need to multiply the output of <code>Random<\/code>'s <code>nextDouble<\/code> method to get a random integer. Use the\n<code>nextInt<\/code> method instead.<\/p>\n<p>This rule raises an issue when the return value of any of <code>Random<\/code>'s methods that return a floating point value is converted to an\ninteger.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  \/\/ Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); \/\/ Noncompliant; will always be 0;\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  \/\/ returns pseudo-random value between 0 and 50\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S2142","title": "\"InterruptedException\" should not be ignored","tags": ["cwe","multi-threading"],"implementations": [{"key": "squid:S2142","language": "Java","title": "\"InterruptedException\" should not be ignored","description": "<p><code>InterruptedExceptions<\/code> should never be ignored in the code, and simply logging the exception counts in this case as \"ignoring\". The\nthrowing of the <code>InterruptedException<\/code> clears the interrupted state of the Thread, so if not handled properly that information will be\nlost. Instead, <code>InterruptedExceptions<\/code> should either be rethrown - immediately or after cleaning up the method's state - or the thread\nshould be re-interrupted by calling <code>Thread.interrupt()<\/code> even if this is supposed to be a single threaded application. Any other course of\naction risks delaying thread shutdown and loses the information that the thread was interrupted - probably without finishing its task.<\/p>\n<p>Similarly, the <code>ThreadDeath<\/code> exception should also be propagated. According to its JavaDoc:<\/p>\n<blockquote>\n  <p>If <code>ThreadDeath<\/code> is caught by a method, it is important that it be rethrown so that the thread actually dies.<\/p>\n<\/blockquote>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      \/\/ do stuff\n    }\n  }catch (InterruptedException e) { \/\/ Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      \/\/ do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    \/\/ Restore interrupted state...\n    Thread.currentThread().interrupt();\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/391.html\">MITRE, CWE-391<\/a> - Unchecked Error Condition <\/li>\n  <li> <a href=\"https:\/\/www.ibm.com\/developerworks\/java\/library\/j-jtp05236\/index.html?ca=drs-#2.1\">Dealing with InterruptedException<\/a> <\/li>\n<\/ul>","severity": "Major","tags": ["cwe","multi-threading"]}]},{"key": "S2147","title": "Catches should be combined","tags": ["clumsy"],"implementations": [{"key": "squid:S2147","language": "Java","title": "Catches should be combined","description": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch<\/code> blocks have the same code, they\nshould be combined for better readability.<\/p>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>7<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  \/\/ Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  \/\/ Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S2151","title": "\"runFinalizersOnExit\" should not be called","tags": ["cert"],"implementations": [{"key": "squid:S2151","language": "Java","title": "\"runFinalizersOnExit\" should not be called","description": "<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit<\/code> and\n<code>Runtime.runFinalizersOnExit<\/code>, but both methods are deprecated because they are are inherently unsafe. <\/p>\n<p>According to the Oracle Javadoc:<\/p>\n<blockquote>\n  <p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic\n  behavior or deadlock.<\/p>\n<\/blockquote>\n<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic static void main(String [] args) {\n  ...\n  System.runFinalizersOnExit(true);  \/\/ Noncompliant\n  ...\n}\n\nprotected void finalize(){\n  doSomething();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic static void main(String [] args) {\n  Runtime.addShutdownHook(new Runnable() {\n    public void run(){\n      doSomething();\n    }\n  });\n  \/\/...\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/H4cbAQ\">CERT, MET12-J.<\/a> - Do not use finalizers <\/li>\n<\/ul>","severity": "Critical","tags": ["cert"]}]},{"key": "S2153","title": "Boxing and unboxing should not be immediately reversed","tags": ["clumsy"],"implementations": [{"key": "squid:S2153","language": "Java","title": "Boxing and unboxing should not be immediately reversed","description": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer<\/code> to hold an <code>int<\/code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.<\/p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive\/object transition for you).<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void examineInt(int a) {\n  \/\/...\n}\n\npublic void examineInteger(Integer a) {\n  \/\/ ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); \/\/ Noncompliant\n\n  examineInt(new Integer(i).intValue()); \/\/ Noncompliant; explicit box\/unbox\n  examineInt(Integer.valueOf(i));  \/\/ Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); \/\/ Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); \/\/ Noncompliant; unboxed int will be autoboxed\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S2154","title": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting","tags": [],"implementations": [{"key": "squid:S2154","language": "Java","title": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting","description": "<p>If wrapped primitive values (e.g. <code>Integers<\/code> and <code>Floats<\/code>) are used in a ternary operator (e.g. <code>a?b:c<\/code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  \/\/ Noncompliant; i is coerced to float. n = 1.23456792E8\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  \/\/ n = 123456789\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2157","title": "\"Cloneables\" should implement \"clone\"","tags": ["convention","api-design"],"implementations": [{"key": "squid:S2157","language": "Java","title": "\"Cloneables\" should implement \"clone\"","description": "<p>Simply implementing <code>Cloneable<\/code> without also overriding <code>Object.clone()<\/code> does not necessarily make the class cloneable. While\nthe <code>Cloneable<\/code> interface does not include a <code>clone<\/code> method, it is required by convention, and ensures true cloneability.\nOtherwise the default JVM <code>clone<\/code> will be used, which copies primitive values and object references from the source to the target. I.e.\nwithout overriding <code>clone<\/code>, any cloned instances will potentially share members with the source instance.<\/p>\n<p>Removing the <code>Cloneable<\/code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a\nclass to be copied.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Team implements Cloneable {  \/\/ Noncompliant\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Team implements Cloneable {\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() {\n    Team clone = (Team) super.clone();\n    \/\/...\n  }\n}\n<\/pre>","severity": "Critical","tags": ["api-design","convention"]}]},{"key": "S2159","title": "Silly equality checks should not be made","tags": ["cert","unused"],"implementations": [{"key": "squid:S2159","language": "Java","title": "Silly equality checks should not be made","description": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:<\/p>\n<ul>\n  <li> comparing an object with null <\/li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) <\/li>\n  <li> comparing unrelated classes <\/li>\n  <li> comparing an unrelated <code>class<\/code> and <code>interface<\/code> <\/li>\n  <li> comparing unrelated <code>interface<\/code> types <\/li>\n  <li> comparing an array to a non-array <\/li>\n  <li> comparing two arrays <\/li>\n<\/ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()<\/code>, calling <code>equals<\/code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)<\/code> is equivalent to <code>array1==array2<\/code>.<\/p>\n<p>However, some developers might expect <code>Array.equals(Object obj)<\/code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==<\/code> operator or <code>Arrays.equals(array1, array2)<\/code> should always be\nused with arrays.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n\/\/...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { \/\/ Noncompliant; unrelated classes\n  \/\/ ...\n}\nelse if (spatula.equals(plant)) { \/\/ Noncompliant; unrelated class and interface\n  \/\/ ...\n}\nelse if (tool.equals(plant)) { \/\/ Noncompliant; unrelated interfaces\n  \/\/ ...\n}\nelse if (tool.equals(tools)) { \/\/ Noncompliant; array &amp; non-array\n  \/\/ ...\n}\nelse if (trees.equals(tools)) {  \/\/ Noncompliant; incompatible arrays\n  \/\/ ...\n}\nelse if (tree.equals(null)) {  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/IQAlAg\">CERT, EXP02-J.<\/a> - Do not use the Object.equals() method to compare two\n  arrays <\/li>\n<\/ul>","severity": "Major","tags": ["cert","unused"]}]},{"key": "S2160","title": "Subclasses that add fields should override \"equals\"","tags": ["suspicious"],"implementations": [{"key": "squid:S2160","language": "Java","title": "Subclasses that add fields should override \"equals\"","description": "<p>Extend a class that overrides <code>equals<\/code> and add fields without overriding <code>equals<\/code> in the subclass, and you run the risk of\nnon-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.<\/p>\n<p>This rule looks for classes that do all of the following:<\/p>\n<ul>\n  <li> extend classes that override <code>equals<\/code>. <\/li>\n  <li> do not themselves override <code>equals<\/code>. <\/li>\n  <li> add fields. <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  \/\/ Noncompliant; instances will use Fruit's equals method\n  private Color ripeColor;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj = (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  \/\/ added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n<\/pre>","severity": "Minor","tags": ["suspicious"]}]},{"key": "S2165","title": "\"finalize\" should not set fields to \"null\"","tags": ["performance","clumsy"],"implementations": [{"key": "squid:S2165","language": "Java","title": "\"finalize\" should not set fields to \"null\"","description": "<p>There is no point in setting class fields to <code>null<\/code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -\nthe object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name = null;  \/\/ Noncompliant; completely unnecessary\n<\/pre>","severity": "Minor","tags": ["clumsy","performance"]}]},{"key": "S2166","title": "Classes named like \"Exception\" should extend \"Exception\" or a subclass","tags": ["convention","pitfall"],"implementations": [{"key": "squid:S2166","language": "Java","title": "Classes named like \"Exception\" should extend \"Exception\" or a subclass","description": "<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend <code>Exception<\/code> or one of its subclasses is a clear violation of the expectation\nthat a class' name will indicate what it is and\/or does.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class FruitException {  \/\/ Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  \/\/ ...\n}\n\npublic class CarException {  \/\/ Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  \/\/ ...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  \/\/ ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  \/\/ ...\n<\/pre>","severity": "Major","tags": ["convention","pitfall"]}]},{"key": "S2167","title": "\"compareTo\" should not return \"Integer.MIN_VALUE\"","tags": [],"implementations": [{"key": "squid:S2167","language": "Java","title": "\"compareTo\" should not return \"Integer.MIN_VALUE\"","description": "<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo<\/code> that matters. Returning <code>Integer.MIN_VALUE<\/code>\ndoes <em>not<\/em> convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo<\/code> is sometimes\ninversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE<\/code> yields\n<code>Integer.MIN_VALUE<\/code> rather than <code>Integer.MAX_VALUE<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return Integer.MIN_VALUE;  \/\/ Noncompliant\n  }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return -1;\n  }\n<\/pre>","severity": "Minor","tags": []}]},{"key": "S2168","title": "Double-checked locking should not be used","tags": ["cwe","multi-threading","cert"],"implementations": [{"key": "squid:S2168","language": "Java","title": "Double-checked locking should not be used","description": "<p>Double-checked locking is the practice of checking a lazy-initialized object's state both before and after a <code>synchronized<\/code> block is\nentered to determine whether or not to initialize the object.<\/p>\n<p>It does not work reliably in a platform-independent manner without additional synchronization for mutable instances of anything other than\n<code>float<\/code> or <code>int<\/code>. Using double-checked locking for the lazy initialization of any other type of primitive or mutable object\nrisks a second thread using an uninitialized or partially initialized member while the first thread is still creating it, and crashing the\nprogram.<\/p>\n<p>There are multiple ways to fix this. The simplest one is to simply not use double checked locking at all, and synchronize the whole method instead.\nWith early versions of the JVM, synchronizing the whole method was generally advised against for performance reasons. But <code>synchronized<\/code>\nperformance has improved a lot in newer JVMs, so this is now a preferred solution. If you prefer to avoid using <code>synchronized<\/code> altogether,\nyou can use an inner <code>static class<\/code> to hold the reference instead. Inner static classes are guaranteed to load lazily.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n@NotThreadSafe\npublic class DoubleCheckedLocking {\n    private static Resource resource;\n\n    public static Resource getInstance() {\n        if (resource == null) {\n            synchronized (DoubleCheckedLocking.class) {\n                if (resource == null)\n                    resource = new Resource();\n            }\n        }\n        return resource;\n    }\n\n    static class Resource {\n\n    }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n@ThreadSafe\npublic class SafeLazyInitialization {\n    private static Resource resource;\n\n    public synchronized static Resource getInstance() {\n        if (resource == null)\n            resource = new Resource();\n        return resource;\n    }\n\n    static class Resource {\n    }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/www.cs.umd.edu\/~pugh\/java\/memoryModel\/DoubleCheckedLocking.html\">The \"Double-Checked Locking is Broken\" Declaration<\/a> <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/IgAZAg\">CERT, LCK10-J.<\/a> - Use a correct form of the double-checked locking idiom\n  <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/609.html\">MITRE, CWE-609<\/a> - Double-checked locking <\/li>\n  <li> <a href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-12.html#jls-12.4\">JLS 12.4<\/a> - Initialization of Classes and Interfaces <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","cwe","multi-threading"]}]},{"key": "S2175","title": "Inappropriate \"Collection\" calls should not be made","tags": ["cert"],"implementations": [{"key": "squid:S2175","language": "Java","title": "Inappropriate \"Collection\" calls should not be made","description": "<p>A couple <code>Collection<\/code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains<\/code> or <code>List.remove<\/code> is\nunrelated to the type used for the list declaration.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  \/\/ Noncompliant. Always false.\n  list.remove(integer); \/\/ Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/QwFlAQ\">CERT, EXP04-J.<\/a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S2176","title": "Class names should not shadow interfaces or superclasses","tags": ["pitfall"],"implementations": [{"key": "squid:S2176","language": "Java","title": "Class names should not shadow interfaces or superclasses","description": "<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n<\/pre>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S2177","title": "Child class methods named for parent class methods should be overrides","tags": ["pitfall"],"implementations": [{"key": "squid:S2177","language": "Java","title": "Child class methods named for parent class methods should be overrides","description": "<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that's not the case\nwhen:<\/p>\n<ul>\n  <li> the parent class method is <code>static<\/code> and the child class method is not. <\/li>\n  <li> the arguments or return types of the child method are in different packages than those of the parent method. <\/li>\n  <li> the parent class method is <code>private<\/code>. <\/li>\n<\/ul>\n<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static<\/code> keyword in the parent\ndeclaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then\nthe method should be renamed to prevent confusion. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n\/\/ Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    \/\/,,,\n  }\n\n  public static void doSomethingElse() {\n    \/\/...\n  }\n}\n\n\/\/ Child.java\nimport fruit.Pear;\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  \/\/ Noncompliant; this is not an override\n    \/\/ ...\n  }\n\n\n  public void doSomethingElse() {  \/\/ Noncompliant; parent method is static\n    \/\/...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n\/\/ Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    \/\/,,,\n  }\n\n  public static void doSomethingElse() {\n    \/\/...\n  }\n}\n\n\/\/ Child.java\nimport computer.Pear;  \/\/ import corrected\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  \/\/ true override (see import)\n    \/\/,,,\n  }\n\n  public static void doSomethingElse() {\n    \/\/...\n  }\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S2178","title": "Short-circuit logic should be used in boolean contexts","tags": ["cert"],"implementations": [{"key": "squid:S2178","language": "Java","title": "Short-circuit logic should be used in boolean contexts","description": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(getTrue() | getFalse()) { ... } \/\/ Noncompliant; both sides evaluated\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  \/\/ true short-circuit logic\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/g4FtAg\">CERT, EXP46-C.<\/a> - Do not use a bitwise operator with a Boolean-like operand\n  <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert"]}]},{"key": "S2183","title": "Ints and longs should not be shifted by zero or more than their number of bits-1","tags": ["cert"],"implementations": [{"key": "squid:S2183","language": "Java","title": "Ints and longs should not be shifted by zero or more than their number of bits-1","description": "<p>Since an <code>int<\/code> is a 32-bit variable, shifting by more than +\/-31 is confusing at best and an error at worst. Shifting an\n<code>int<\/code> by 32 is the same as shifting it by 0, and shifting it by 33 is the same as shifting it by 1.<\/p>\n<p>Similarly, shifting a <code>long<\/code> by +\/-64 is the same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic int shift(int a) {\n  return a &lt;&lt; 48;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic int shift(int a) {\n  return a &lt;&lt; 16;\n}\n<\/pre>","severity": "Minor","tags": ["cert"]}]},{"key": "S2184","title": "Math operands should be cast before assignment","tags": ["cwe","overflow","sans-top25-risky","misra","cert"],"implementations": [{"key": "squid:S2184","language": "Java","title": "Math operands should be cast before assignment","description": "<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long<\/code>,\n<code>double<\/code>, or <code>float<\/code> with automatic type conversion, but having started as an <code>int<\/code> or <code>long<\/code>, the result\nwill likely not be what you expect. <\/p>\n<p>For instance, if the result of <code>int<\/code> division is assigned to a floating-point variable, precision will have been lost before the\nassignment. Likewise, if the result of multiplication is assigned to a <code>long<\/code>, it may have already overflowed before the assignment.<\/p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the\noperation takes place.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfloat twoThirds = 2\/3; \/\/ Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; \/\/ Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; \/\/ Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; \/\/Noncompliant, gives a positive result instead of a negative one.\nDate myDate = new Date(seconds * 1_000); \/\/Noncompliant, won't produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  \/\/Noncompliant, won't produce the expected result if factor &gt; 214_748\n}\n\npublic float compute2(long factor){\n  return factor \/ 123;  \/\/Noncompliant, will be rounded to closest long integer\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfloat twoThirds = 2f\/3; \/\/ 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; \/\/ 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; \/\/ 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; \/\/ Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n\npublic float compute2(long factor){\n  return factor \/ 123f;\n}\n<\/pre>\n<p>or<\/p>\n<pre>\nfloat twoThirds = (float)2\/3; \/\/ 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; \/\/ 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n\npublic float compute2(float factor){\n  return factor \/ 123;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C++:2008, 5-0-8 - An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue\n  expression. <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/190\">MITRE, CWE-190<\/a> - Integer Overflow or Wraparound <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/woIyAQ\">CERT, NUM50-J.<\/a> - Convert integers to floating point for floating-point\n  operations <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/AxE\">CERT, INT18-C.<\/a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/1IAyAQ\">CERT, INT18-CPP.<\/a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size <\/li>\n  <li> <a href=\"http:\/\/www.sans.org\/top25-software-errors\/\">SANS Top 25<\/a> - Risky Resource Management <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","cwe","misra","overflow","sans-top25-risky"]}]},{"key": "S2185","title": "Silly math should not be performed","tags": ["clumsy"],"implementations": [{"key": "squid:S2185","language": "Java","title": "Silly math should not be performed","description": "<p>Certain math operations are just silly and should not be performed because their results are predictable.<\/p>\n<p>In particular, <code>anyValue % 1<\/code> is silly because it will always return 0.<\/p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round<\/code>, <code>Math.ceil<\/code>, or\n<code>Math.floor<\/code> is silly because the result will always be the original value. <\/p>\n<p>These operations are silly with any constant value: <code>Math.abs<\/code>, <code>Math.ceil<\/code>, <code>Math.floor<\/code>, <code>Math.rint<\/code>,\n<code>Math.round<\/code>.<\/p>\n<p>And these oprations are silly with certain constant values:<\/p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation<\/th>\n      <th>Value<\/th>\n    <\/tr>\n    <tr>\n      <td>acos<\/td>\n      <td>0.0 or 1.0<\/td>\n    <\/tr>\n    <tr>\n      <td>asin<\/td>\n      <td>0.0 or 1.0<\/td>\n    <\/tr>\n    <tr>\n      <td>atan<\/td>\n      <td>0.0 or 1.0<\/td>\n    <\/tr>\n    <tr>\n      <td>atan2<\/td>\n      <td>0.0<\/td>\n    <\/tr>\n    <tr>\n      <td>cbrt<\/td>\n      <td>0.0 or 1.0<\/td>\n    <\/tr>\n    <tr>\n      <td>cos<\/td>\n      <td>0.0<\/td>\n    <\/tr>\n    <tr>\n      <td>cosh<\/td>\n      <td>0.0<\/td>\n    <\/tr>\n    <tr>\n      <td>exp<\/td>\n      <td>0.0 or 1.0<\/td>\n    <\/tr>\n    <tr>\n      <td>expm1<\/td>\n      <td>0.0<\/td>\n    <\/tr>\n    <tr>\n      <td>log<\/td>\n      <td>0.0 or 1.0<\/td>\n    <\/tr>\n    <tr>\n      <td>log10<\/td>\n      <td>0.0 or 1.0<\/td>\n    <\/tr>\n    <tr>\n      <td>sin<\/td>\n      <td>0.0<\/td>\n    <\/tr>\n    <tr>\n      <td>sinh<\/td>\n      <td>0.0<\/td>\n    <\/tr>\n    <tr>\n      <td>sqrt<\/td>\n      <td>0.0 or 1.0<\/td>\n    <\/tr>\n    <tr>\n      <td>tan<\/td>\n      <td>0.0<\/td>\n    <\/tr>\n    <tr>\n      <td>tanh<\/td>\n      <td>0.0<\/td>\n    <\/tr>\n    <tr>\n      <td>toDegrees<\/td>\n      <td>0.0 or 1.0<\/td>\n    <\/tr>\n    <tr>\n      <td>toRadians<\/td>\n      <td>0.0<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); \/\/ Noncompliant\n  double ceiling = Math.ceil(4.2);  \/\/ Noncompliant\n  double arcTan = Math.atan(0.0);  \/\/ Noncompliant\n}\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S2186","title": "JUnit assertions should not be used in \"run\" methods","tags": ["tests"],"implementations": [{"key": "squid:S2186","language": "Java","title": "JUnit assertions should not be used in \"run\" methods","description": "<p>JUnit assertions should not be made from the <code>run<\/code> method of a <code>Runnable<\/code>, because failed assertions result in\n<code>AssertionError<\/code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the\ntest won't fail.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void run() {\n  \/\/ ...\n  Assert.assertEquals(expected, actual);  \/\/ Noncompliant\n}\n<\/pre>","severity": "Critical","tags": ["tests"]}]},{"key": "S2187","title": "TestCases should contain tests","tags": ["tests","unused","confusing"],"implementations": [{"key": "squid:S2187","language": "Java","title": "TestCases should contain tests","description": "<p>There's no point in having a JUnit <code>TestCase<\/code> without any test methods. Similarly, you shouldn't have a file in the tests directory with\n\"Test\" in the name, but no tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.<\/p>\n<p>This rule raises an issue when files in the test directory have \"Test\" in the name or implement <code>TestCase<\/code> but don't contain any\ntests.<\/p>","severity": "Blocker","tags": ["confusing","tests","unused"]}]},{"key": "S2188","title": "JUnit test cases should call super methods","tags": ["tests"],"implementations": [{"key": "squid:S2188","language": "Java","title": "JUnit test cases should call super methods","description": "<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super<\/code> call is made in the overriding\nmethod. In some cases not calling the <code>super<\/code> method is acceptable, but not with <code>setUp<\/code> and <code>tearDown<\/code> in a JUnit 3\n<code>TestCase<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  \/\/ Noncompliant\n      myClass = new MyClass();\n    }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass = new MyClass();\n    }\n<\/pre>","severity": "Blocker","tags": ["tests"]}]},{"key": "S2189","title": "Loops should not be infinite","tags": ["cert"],"implementations": [{"key": "squid:S2189","language": "Java","title": "Loops should not be infinite","description": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break<\/code>, every loop should have an end condition.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (;;) {  \/\/ Noncompliant; end condition omitted\n  \/\/ ...\n}\n\nint j;\nwhile (true) { \/\/ Noncompliant; end condition omitted\n  j++;\n}\n\nint k;\nboolean b = true;\nwhile (b) { \/\/ Noncompliant; b never written to in loop\n  k++;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nint j;\nwhile (true) { \/\/ reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  \/\/ true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k &lt; Integer.MAX_VALUE;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/PYHfAw\">CERT, MSC01-J.<\/a> - Do not use an empty infinite loop <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert"]},{"key": "javascript:S2189","language": "JavaScript","title": "Loops should not be infinite","description": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break<\/code>, every loop should have an end condition.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (;;) {  \/\/ Noncompliant; end condition omitted\n  \/\/ ...\n}\n\nvar j = 0;\nwhile (true) { \/\/ Noncompliant; constant end condition\n  j++;\n}\n\nvar k;\nvar b = true;\nwhile (b) { \/\/ Noncompliant; constant end condition\n  k++;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n\nwhile (true) { \/\/ break will potentially allow leaving the loop\n  if (someCondition) {\n    break;\n  }\n}\n\nvar k;\nvar b = true;\nwhile (b) {\n  k++;\n  b = k &lt; 10;\n}\n\nouter:\nwhile(true) {\n  while(true) {\n    break outer;\n  }\n}\n\n<\/pre>\n\n<h2>Known Limitations<\/h2>\n<ul>\n    <li>False positives: when <code>yield<\/code> is used - <a\n            href=\"https:\/\/jira.sonarsource.com\/browse\/SONARJS-877\">SONARJS-877<\/a>.<\/li>\n    <li>False positives: when an exception is raised by a function invoked within the loop.<\/li>\n    <li>False negatives: when a loop condition is based on an element of an array or object.<\/li>\n<\/ul>\n\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/PYHfAw\">CERT, MSC01-J.<\/a> - Do not use an empty infinite loop <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert"]}]},{"key": "S2200","title": "\"compareTo\" results should not be checked for specific values","tags": ["unpredictable"],"implementations": [{"key": "squid:S2200","language": "Java","title": "\"compareTo\" results should not be checked for specific values","description": "<p>While most <code>compareTo<\/code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo<\/code> against a specific\nvalue other than 0 could result in false negatives.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  \/\/ ...\n}\n<\/pre>","severity": "Minor","tags": ["unpredictable"]}]},{"key": "S2201","title": "Return values should not be ignored when function calls don't have any side effects","tags": ["misra","cert"],"implementations": [{"key": "squid:S2201","language": "Java","title": "Return values should not be ignored when function calls don't have any side effects","description": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. <\/p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on the following predefined list of immutable classes in the Java API\n: <code>String<\/code>, <code>Boolean<\/code>, <code>Integer<\/code>, <code>Double<\/code>, <code>Float<\/code>, <code>Byte<\/code>, <code>Character<\/code>,\n<code>Short<\/code>, <code>StackTraceElement<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); \/\/ Noncompliant; result of method thrown away\n  ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/9YIRAQ\">CERT, EXP12-C.<\/a> - Do not ignore values returned by functions <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/eoAyAQ\">CERT, EXP12-CPP.<\/a> - Do not ignore values returned by functions or methods\n  <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/9gEqAQ\">CERT, EXP00-J.<\/a> - Do not ignore values returned by methods <\/li>\n<\/ul>","severity": "Major","tags": ["cert","misra"]},{"key": "javascript:S2201","language": "JavaScript","title": "Return values should not be ignored when function calls don't have any side effects","description": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. <\/p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n'hello'.lastIndexOf('e'); \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nlet char = 'hello'.lastIndexOf('e');\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/9YIRAQ\">CERT, EXP12-C.<\/a> - Do not ignore values returned by functions <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/eoAyAQ\">CERT, EXP12-CPP.<\/a> - Do not ignore values returned by functions or methods\n  <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/9gEqAQ\">CERT, EXP00-J.<\/a> - Do not ignore values returned by methods <\/li>\n<\/ul>","severity": "Major","tags": ["cert","misra"]}]},{"key": "S2204","title": "\".equals()\" should not be used to test the values of \"Atomic\" classes","tags": ["multi-threading"],"implementations": [{"key": "squid:S2204","language": "Java","title": "\".equals()\" should not be used to test the values of \"Atomic\" classes","description": "<p><code>AtomicInteger<\/code>, and <code>AtomicLong<\/code> extend <code>Number<\/code>, but they're distinct from <code>Integer<\/code> and\n<code>Long<\/code> and should be handled differently. <code>AtomicInteger<\/code> and <code>AtomicLong<\/code> are designed to support lock-free,\nthread-safe programming on single variables. As such, an <code>AtomicInteger<\/code> will only ever be \"equal\" to itself. Instead, you should\n<code>.get()<\/code> the value and make comparisons on it.<\/p>\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger<\/code>, <code>AtomicLong<\/code>, and\n<code>AtomicBoolean<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n<\/pre>","severity": "Major","tags": ["multi-threading"]}]},{"key": "S2209","title": "\"static\" members should be accessed statically","tags": ["pitfall"],"implementations": [{"key": "squid:S2209","language": "Java","title": "\"static\" members should be accessed statically","description": "<p>While it is <em>possible<\/em> to access <code>static<\/code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  \/\/ Noncompliant\n    second.counter ++;  \/\/ Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  \/\/ Compliant\n    A.counter ++;  \/\/ Compliant\n  }\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S2222","title": "Locks should be released","tags": ["cwe","multi-threading"],"implementations": [{"key": "squid:S2222","language": "Java","title": "Locks should be released","description": "<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.<\/p>\n<p>Failing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    lock.lock(); \/\/ Noncompliant\n    if (isInitialized()) {\n      \/\/ ...\n      lock.unlock();\n    }\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    if (isInitialized()) {\n      lock.lock();\n      \/\/ ...\n      lock.unlock();\n    }\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/cwe.mitre.org\/data\/definitions\/459.html\">MITRE, CWE-459<\/a> - Incomplete Cleanup <\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","multi-threading"]}]},{"key": "S2225","title": "\"toString()\" and \"clone()\" methods should not return null","tags": ["cwe"],"implementations": [{"key": "squid:S2225","language": "Java","title": "\"toString()\" and \"clone()\" methods should not return null","description": "<p>Calling <code>toString()<\/code> or <code>clone()<\/code> on an object should always return a string or an object. Returning <code>null<\/code>\ninstead contravenes the method's implicit contract.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return null; \/\/ Noncompliant\n  } else {\n    \/\/ ...\n {code}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return \"\";\n  } else {\n    \/\/ ...\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/476.html\">MITRE CWE-476<\/a> - NULL Pointer Dereference <\/li>\n<\/ul>","severity": "Major","tags": ["cwe"]}]},{"key": "S2226","title": "Servlets should not have mutable instance fields","tags": ["multi-threading","struts","cert"],"implementations": [{"key": "squid:S2226","language": "Java","title": "Servlets should not have mutable instance fields","description": "<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to\nprocess this request. So all threads are sharing the servlet instances and by extension instance fields. To prevent any misunderstanding and\nunexpected behavior at runtime, all servlet fields should then be either <code>static<\/code> and\/or <code>final<\/code>, or simply removed.<\/p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  \/\/As this field is shared by all users, it's obvious that this piece of information should be managed differently\n  ...\n}\n<\/pre>\n<p>or <\/p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  \/\/Same reason\n  ...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/EYBUC\">CERT, MSC11-J.<\/a> - Do not let session information leak within a servlet <\/li>\n<\/ul>","severity": "Major","tags": ["cert","multi-threading","struts"]}]},{"key": "S2230","title": "Non-public methods should not be \"@Transactional\"","tags": ["spring"],"implementations": [{"key": "squid:S2230","language": "Java","title": "Non-public methods should not be \"@Transactional\"","description": "<p>Marking a non-public method <code>@Transactional<\/code> is both useless and misleading because Spring doesn't \"see\" non-<code>public<\/code>\nmethods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.<\/p>\n<p>Therefore marking a <code>private<\/code> method, for instance, <code>@Transactional<\/code> can only result in a runtime error or exception if the\nmethod is actually written to be <code>@Transactional<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n@Transactional  \/\/ Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  \/\/ ...\n}\n<\/pre>","severity": "Major","tags": ["spring"]}]},{"key": "S2232","title": "\"ResultSet.isLast()\" should not be used","tags": ["performance","pitfall","sql"],"implementations": [{"key": "squid:S2232","language": "Java","title": "\"ResultSet.isLast()\" should not be used","description": "<p>There are several reasons to avoid <code>ResultSet.isLast()<\/code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY<\/code>\nresult sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear\non what should be returned when the <code>ResultSet<\/code> is empty, so some drivers may return the opposite of what is expected.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { \/\/ Noncompliant\n  \/\/ process row\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nResultSet rs = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (! rs.next()) {\n  \/\/ process row\n}\n<\/pre>","severity": "Major","tags": ["performance","pitfall","sql"]}]},{"key": "S2235","title": "IllegalMonitorStateException should not be caught","tags": ["multi-threading"],"implementations": [{"key": "squid:S2235","language": "Java","title": "IllegalMonitorStateException should not be caught","description": "<p>According to Oracle Javadoc:<\/p>\n<blockquote>\n  <p><code>IllegalMonitorStateException<\/code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting\n  on an object's monitor without owning the specified monitor.<\/p>\n<\/blockquote>\n<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)<\/code>, <code>Object.notify()<\/code> and\n<code>Object.notifyAll()<\/code> methods should never be called on an object whose monitor is not held. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n<\/pre>","severity": "Critical","tags": ["multi-threading"]}]},{"key": "S2236","title": "Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should not be called on Thread instances","tags": ["multi-threading"],"implementations": [{"key": "squid:S2236","language": "Java","title": "Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should not be called on Thread instances","description": "<p>The methods <code>wait(...)<\/code>, <code>notify()<\/code> and <code>notifyAll()<\/code> are available on a <code>Thread<\/code> instance, but only\nbecause all classes in Java extend <code>Object<\/code> and therefore automatically inherit those methods. But there are two very good reasons for not\ncalling them on a <code>Thread<\/code>:<\/p>\n<ul>\n  <li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED<\/code>, <code>WAITING<\/code>, ...), so calling\n  them will corrupt the behavior of the JVM. <\/li>\n  <li> It is not clear (perhaps even to the original coder) what is really expected. For instance, it is waiting for the execution of the Thread to\n  suspended, or is it the acquisition of the object monitor that is waited for? <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n<\/pre>","severity": "Blocker","tags": ["multi-threading"]}]},{"key": "S2251","title": "A \"for\" loop update clause should move the counter in the right direction","tags": ["cert"],"implementations": [{"key": "squid:S2251","language": "Java","title": "A \"for\" loop update clause should move the counter in the right direction","description": "<p>A <code>for<\/code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { \/\/ Noncompliant;\n    String string = strings[i];  \/\/ ArrayIndexOutOfBoundsException when i reaches -1\n    \/\/...\n  }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    \/\/...\n  }\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/zYEzAg\">CERT, MSC54-J.<\/a> - Avoid inadvertent wrapping of loop counters <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]},{"key": "javascript:S2251","language": "JavaScript","title": "A \"for\" loop update clause should move the counter in the right direction","description": "<p>A <code>for<\/code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run\ninfinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while<\/code> loops. More\ntypically, an infinite <code>for<\/code> loop is a bug. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (var i = 0; i &lt; strings.length; i--) { \/\/ Noncompliant;\n  \/\/...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (var i = 0; i &lt; strings.length; i++) {\n  \/\/...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/zYEzAg\">CERT, MSC54-J.<\/a> - Avoid inadvertent wrapping of loop counters <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S2252","title": "Loop conditions should be true at least once","tags": [],"implementations": [{"key": "squid:S2252","language": "Java","title": "Loop conditions should be true at least once","description": "<p>If a <code>for<\/code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always\nbugs, particularly when the initial value and stop conditions are hard-coded.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  \/\/ Noncompliant\n  \/\/ ...\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2254","title": "\"HttpServletRequest.getRequestedSessionId()\" should not be used","tags": ["cwe","sans-top25-porous","owasp-a2"],"implementations": [{"key": "squid:S2254","language": "Java","title": "\"HttpServletRequest.getRequestedSessionId()\" should not be used","description": "<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()<\/code> method:<\/p>\n<blockquote>\n  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client\n  did not specify a session ID, this method returns null.<\/p>\n<\/blockquote>\n<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually\nupdating the value of this session ID in the HTTP request. <\/p>\n<p>Here is an example of a updated HTTP header:<\/p>\n<pre>\nGET \/pageSomeWhere HTTP\/1.1\nHost: webSite.com\nUser-Agent: Mozilla\/5.0\nCookie: JSESSIONID=Hacked_Session_Value'''\"&gt;\n<\/pre>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G.\nTomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated.\nMoreover, this session ID should never be logged to prevent hijacking of active sessions.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(isActiveSession(request.getRequestedSessionId()) ){\n  ...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/807\">MITRE, CWE-807<\/a> - Reliance on Untrusted Inputs in a Security Decision <\/li>\n  <li> <a href=\"http:\/\/www.sans.org\/top25-software-errors\/\">SANS Top 25<\/a> - Porous Defenses <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2<\/a> -\n  Broken Authentication and Session Management <\/li>\n  <li> Derived from FindSecBugs rule <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#SERVLET_SESSION_ID\">Untrusted Session Cookie Value<\/a>\n  <\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","owasp-a2","sans-top25-porous"]}]},{"key": "S2259","title": "Null pointers should not be dereferenced","tags": ["cwe","cert"],"implementations": [{"key": "squid:S2259","language": "Java","title": "Null pointers should not be dereferenced","description": "<p>A reference to <code>null<\/code> should never be dereferenced\/accessed. Doing so will cause a <code>NullPointerException<\/code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.<\/p>\n<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull<\/code> and <code>@Nonnull<\/code> annotations defined in <a\nhref=\"https:\/\/jcp.org\/en\/jsr\/detail?id=305\">JSR-305<\/a> to understand which values are and are not nullable.<\/p>\n<p><code>@Nullable<\/code> denotes that, under some unspecified circumstances, the value might be null. To keep false positives low, this annotation is\nignored. Whether an explicit test is required or not is left to the developer's discretion.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>Here are some examples of null pointer dereferences detected by this rule:<\/p>\n<pre>\n@CheckForNull\nString getName(){...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; \/\/ Noncompliant; the result of getName() could be null, but isn't null-checked\n}\n<\/pre>\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry{\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  \/\/ ...\n\n}catch(Exception e){\n  e.printStackTrace();\n}finally{\n  stmt.close();   \/\/ Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close();  \/\/ Noncompliant; conn could be null if an exception was thrown\n}\n<\/pre>\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic  void append(@CheckForNull Color color) {\n    merge(currentColor, color);  \/\/ Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n<\/pre>\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println(\"Unable to apply color \" + color.toString());  \/\/ Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/476.html\">MITRE, CWE-476<\/a> - NULL Pointer Dereference <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/PAw\">CERT, EXP34-C.<\/a> - Do not dereference null pointers <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/ZwDOAQ\">CERT, EXP01-J.<\/a> - Do not use a null in a case where an object is required\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe"]},{"key": "javascript:S2259","language": "JavaScript","title": "Properties of variables with \"null\" or \"undefined\" values should not be accessed","description": "<p>When a variable is assigned an <code>undefined<\/code> or <code>null<\/code> value, it has no properties. Trying to access properties of such a\nvariable anyway results in a <code>TypeError<\/code>, causing abrupt termination of the script if the error is not caught in a <code>catch<\/code>\nblock. But instead of <code>catch<\/code>-ing this condition, it is best to avoid it altogether.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (x === undefined) {\n  console.log(x.length); \/\/ Noncompliant; TypeError will be thrown\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/476.html\">MITRE, CWE-476<\/a> - NULL Pointer Dereference <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/PAw\">CERT, EXP34-C.<\/a> - Do not dereference null pointers <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/ZwDOAQ\">CERT, EXP01-J.<\/a> - Do not use a null in a case where an object is required\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe"]}]},{"key": "S2272","title": "\"Iterator.next()\" methods should throw \"NoSuchElementException\"","tags": ["unpredictable"],"implementations": [{"key": "squid:S2272","language": "Java","title": "\"Iterator.next()\" methods should throw \"NoSuchElementException\"","description": "<p>By contract, any implementation of the <code>java.util.Iterator.next()<\/code> method should throw a <code>NoSuchElementException<\/code> exception\nwhen the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this\n<code>Iterator<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      return null;\n    }\n    ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      throw new NoSuchElementException();\n    }\n    ...\n  }\n}\n<\/pre>","severity": "Minor","tags": ["unpredictable"]}]},{"key": "S2273","title": "\"wait\", \"notify\" and \"notifyAll\" should only be called when a lock is obviously held on an object","tags": ["multi-threading"],"implementations": [{"key": "squid:S2273","language": "Java","title": "\"wait\", \"notify\" and \"notifyAll\" should only be called when a lock is obviously held on an object","description": "<p>By contract, the method <code>Object.wait(...)<\/code>, <code>Object.notify()<\/code> and <code>Object.notifyAll()<\/code> should be called by a\nthread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException<\/code> exception is thrown. This rule\nreinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized<\/code> method or statement. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    obj.wait();\n  }\n  ... \/\/ Perform removal\n}\n<\/pre>\n<p>or<\/p>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... \/\/ Perform removal\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nprivate void removeElement() {\n  synchronized(obj) {\n    while (!suitableCondition()){\n      obj.wait();\n    }\n    ... \/\/ Perform removal\n  }\n}\n<\/pre>\n<p>or<\/p>\n<pre>\nprivate synchronized void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... \/\/ Perform removal\n}\n<\/pre>","severity": "Major","tags": ["multi-threading"]}]},{"key": "S2274","title": "\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop","tags": ["multi-threading","cert"],"implementations": [{"key": "squid:S2274","language": "Java","title": "\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop","description": "<p>According to the documentation of the Java <code>Condition<\/code> interface:<\/p>\n<blockquote>\n  <p>When waiting upon a <code>Condition<\/code>, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.<\/p>\n<\/blockquote>\n<p>The same advice is also found for the <code>Object.wait(...)<\/code> method:<\/p>\n<blockquote>\n  <p>waits should always occur in loops, like this one:<\/p>\n  <pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout);\n  }\n   ... \/\/ Perform action appropriate to condition\n}\n<\/pre>\n<\/blockquote>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   \/\/the thread can wake up even if the condition is still false\n  }\n   ... \/\/ Perform action appropriate to condition\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... \/\/ Perform action appropriate to condition\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/9QIhAQ\">CERT THI03-J.<\/a> - Always invoke wait() and await() methods inside a loop\n  <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","multi-threading"]}]},{"key": "S2275","title": "Printf-style format strings should not lead to unexpected behavior at runtime","tags": ["cert","pitfall"],"implementations": [{"key": "squid:S2275","language": "Java","title": "Printf-style format strings should not lead to unexpected behavior at runtime","description": "<p>Because <code>printf<\/code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf<\/code>-style formats when calling\nthe <code>format(...)<\/code> methods of <code>java.util.Formatter<\/code>, <code>java.lang.String<\/code>, <code>java.io.PrintStream<\/code>,\n<code>MessageFormat<\/code>, and <code>java.io.PrintWriter<\/code> classes and the <code>printf(...)<\/code> methods of <code>java.io.PrintStream<\/code>\nor <code>java.io.PrintWriter<\/code> classes. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  \/\/ Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  \/\/Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   \/\/Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  \/\/Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   \/\/Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); \/\/ Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); \/\/ Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); \/\/ Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/wQA1\">CERT, FIO47-C.<\/a> - Use valid format strings <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/e4EyAQ\">CERT, FIO00-CPP.<\/a> - Take care when creating format strings <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","pitfall"]}]},{"key": "S2276","title": "\"wait(...)\" should be used instead of \"Thread.sleep(...)\" when a lock is held","tags": ["multi-threading","performance","cert"],"implementations": [{"key": "squid:S2276","language": "Java","title": "\"wait(...)\" should be used instead of \"Thread.sleep(...)\" when a lock is held","description": "<p>If <code>Thread.sleep(...)<\/code> is called when the current thread holds a lock, it could lead to performance and scalability issues, or even\nworse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)<\/code> on the monitor object to\ntemporarily release the lock and allow other threads to run.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200);\n    }\n    process();\n  }\n  ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200);\n    }\n    process();\n  }\n  ...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/FgG7AQ\">CERT, LCK09-J.<\/a> - Do not perform operations that can block while holding a\n  lock <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","multi-threading","performance"]}]},{"key": "S2277","title": "Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)","tags": ["cwe","owasp-a6","sans-top25-porous","owasp-a5"],"implementations": [{"key": "squid:S2277","language": "Java","title": "Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)","description": "<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an\nissue as soon as a literal value starts with <code>RSA\/NONE<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA\/NONE\/NoPadding\");\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA\/ECB\/OAEPWITHSHA-256ANDMGF1PADDING\");\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/780.html\">MITRE CWE-780<\/a> - Use of RSA Algorithm without OAEP <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/327.html\">MITRE CWE-327<\/a>: Use of a Broken or Risky Cryptographic Algorithm <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A5-Security_Misconfiguration\">OWASP Top Ten 2013 Category A5<\/a> - Security\n  Misconfiguration <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6<\/a> - Sensitive Data Exposure\n  <\/li>\n  <li> Derived from FindSecBugs rule <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#RSA_NO_PADDING\">RSA NoPadding Unsafe<\/a> <\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","owasp-a5","owasp-a6","sans-top25-porous"]}]},{"key": "S2278","title": "Neither DES (Data Encryption Standard) nor DESede (3DES) should be used","tags": ["cwe","cert","owasp-a6","sans-top25-porous"],"implementations": [{"key": "squid:S2278","language": "Java","title": "Neither DES (Data Encryption Standard) nor DESede (3DES) should be used","description": "<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:<\/p>\n<blockquote>\n  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer\n  provides the security that is needed to protect federal government information.<\/p>\n  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.<\/p>\n<\/blockquote>\n<p>For similar reasons, RC2 should also be avoided.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nCipher c = Cipher.getInstance(\"DESede\/ECB\/PKCS5Padding\");\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nCipher c = Cipher.getInstance(\"AES\/GCM\/NoPadding\");\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/326.html\">MITRE CWE-326<\/a> - Inadequate Encryption Strength <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/327.html\">MITRE CWE-327<\/a> - Use of a Broken or Risky Cryptographic Algorithm <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6<\/a> - Sensitive Data Exposure\n  <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/VwAZAg\">CERT, MSC61-J.<\/a> - Do not use insecure or weak cryptographic algorithms <\/li>\n  <li> Derived from FindSecBugs rule <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#DES_USAGE\">DES \/ DESede Unsafe<\/a> <\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","cwe","owasp-a6","sans-top25-porous"]}]},{"key": "S2293","title": "The diamond operator (\"<>\") should be used","tags": ["clumsy"],"implementations": [{"key": "squid:S2293","language": "Java","title": "The diamond operator (\"<>\") should be used","description": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;<\/code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List<\/code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;<\/code>,\nand the compiler will infer the type.<\/p>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>7<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  \/\/ Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S2326","title": "Unused type parameters should be removed","tags": ["cert","unused"],"implementations": [{"key": "squid:S2326","language": "Java","title": "Unused type parameters should be removed","description": "<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nint &lt;T&gt; Add(int a, int b) \/\/ Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nint Add(int a, int b)\n{\n  return a + b;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","unused"]}]},{"key": "S2386","title": "Mutable fields should not be \"public static\"","tags": ["cwe","unpredictable","cert"],"implementations": [{"key": "squid:S2386","language": "Java","title": "Mutable fields should not be \"public static\"","description": "<p>There is no good reason to have a mutable object as the <code>public<\/code> (by default), <code>static<\/code> member of an <code>interface<\/code>.\nSuch variables should be moved into classes and their visibility lowered. <\/p>\n<p>Similarly, mutable <code>static<\/code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final<\/code> if appropriate. <\/p>\n<p>Note that making a mutable field, such as an array, <code>final<\/code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).<\/p>\n<p>This rule raises issues for <code>public static<\/code> array, <code>Collection<\/code>, <code>Date<\/code>, and <code>awt.Point<\/code> members.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; \/\/ Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  \/\/ Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  \/\/ Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/582.html\">MITRE, CWE-582<\/a> - Array Declared Public, Final, and Static <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/607.html\">MITRE, CWE-607<\/a> - Public Static Final Field References Mutable Object <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/rwBc\">CERT, OBJ01-J.<\/a> - Limit accessibility of fields <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/JQLEAw\">CERT, OBJ13-J.<\/a> - Ensure that references to mutable objects are not exposed\n  <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","cwe","unpredictable"]}]},{"key": "S2387","title": "Child class fields should not shadow parent class fields","tags": ["confusing"],"implementations": [{"key": "squid:S2387","language": "Java","title": "Child class fields should not shadow parent class fields","description": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. Perhaps even worse is the case where a child class field varies from the name of a parent class only by case.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  \/\/ ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  \/\/ Noncompliant\n  private static Color FLESH; \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  \/\/ ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule ignores <code>private<\/code> parent class fields, but in all other such cases, the child class field should be renamed.<\/p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  \/\/ ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  \/\/ Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  \/\/ ...\n}\n<\/pre>","severity": "Blocker","tags": ["confusing"]}]},{"key": "S2388","title": "Inner class calls to super class methods should be unambiguous","tags": ["pitfall"],"implementations": [{"key": "squid:S2388","language": "Java","title": "Inner class calls to super class methods should be unambiguous","description": "<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using <code>super.<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  \/\/ Noncompliant; was Outer.this.foo() intended instead?\n      \/\/ ...\n    }\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      \/\/ ...\n    }\n  }\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S2390","title": "Classes should not access static members of their own subclasses during initialization","tags": ["cert"],"implementations": [{"key": "squid:S2390","language": "Java","title": "Classes should not access static members of their own subclasses during initialization","description": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. <\/p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/display\/java\/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.<\/a> - Prevent\n  class initialization cycles <\/li>\n  <li> Java Language Specifications - <a href=\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se8\/html\/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces<\/a> <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S2391","title": "JUnit framework methods should be declared properly","tags": ["tests"],"implementations": [{"key": "squid:S2391","language": "Java","title": "JUnit framework methods should be declared properly","description": "<p>If the <code>suite<\/code> method in a JUnit 3 <code>TestCase<\/code> is not declared correctly, it will not be used. Such a method must be named\n\"suite\", have no arguments, be <code>public static<\/code>, and must return either a <code>junit.framework.Test<\/code> or a\n<code>junit.framework.TestSuite<\/code>.<\/p>\n<p>Similarly, <code>setUp<\/code> and <code>tearDown<\/code> methods that aren't properly capitalized will also be ignored.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nTest suite() { ... }  \/\/ Noncompliant; must be public static\npublic static boolean suite() { ... }  \/\/ Noncompliant; wrong return type\npublic static Test suit() { ... }  \/\/ Noncompliant; typo in method name\npublic static Test suite(int count) { ... } \/\/ Noncompliant; must be no-arg\n\npublic void setup() { ... } \/\/ Noncompliant; should be setUp\npublic void tearDwon() { ... }  \/\/ Noncompliant; should be tearDown\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic static Test suite() { ... }\npublic void setUp() { ... }\npublic void tearDown() { ... }\n<\/pre>","severity": "Blocker","tags": ["tests"]}]},{"key": "S2432","title": "Setters should not return values","tags": [],"implementations": [{"key": "javascript:S2432","language": "JavaScript","title": "Setters should not return values","description": "<p>Functions declared with the <code>set<\/code> keyword will automatically return the values they were passed. Thus any value explicitly returned from\na setter will be ignored, and explicitly returning a value is an error.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar person = {\n  \/\/ ...\n  set name(name) {\n    this.name = name;\n    return 42;  \/\/ Noncompliant\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar person = {\n  \/\/ ...\n  set name(name) {\n    this.name = name;\n  }\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2437","title": "Silly bit operations should not be performed","tags": ["suspicious"],"implementations": [{"key": "squid:S2437","language": "Java","title": "Silly bit operations should not be performed","description": "<p>Certain bit operations are just silly and should not be performed because their results are predictable.<\/p>\n<p>Specifically, using <code>&amp; -1<\/code> with any value will always result in the original value, as will <code>anyValue ^ 0<\/code> and\n<code>anyValue | 0<\/code>.<\/p>","severity": "Blocker","tags": ["suspicious"]}]},{"key": "S2438","title": "\"Threads\" should not be used where \"Runnables\" are expected","tags": ["multi-threading","pitfall"],"implementations": [{"key": "squid:S2438","language": "Java","title": "\"Threads\" should not be used where \"Runnables\" are expected","description": "<p>While it is technically correct to use a <code>Thread<\/code> where a <code>Runnable<\/code> is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.<\/p>\n<p>The crux of the issue is that <code>Thread<\/code> is a larger concept than <code>Runnable<\/code>. A <code>Runnable<\/code> is an object whose\nrunning should be managed. A <code>Thread<\/code> expects to manage the running of itself or other <code>Runnables<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tThread r =new Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tRunnable r =new Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n<\/pre>","severity": "Major","tags": ["multi-threading","pitfall"]}]},{"key": "S2440","title": "Classes with only \"static\" methods should not be instantiated","tags": ["clumsy"],"implementations": [{"key": "squid:S2440","language": "Java","title": "Classes with only \"static\" methods should not be instantiated","description": "<p><code>static<\/code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only\n<code>static<\/code> methods.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  \/\/ ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); \/\/ Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    \/\/...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  \/\/ ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    \/\/...\n  }\n}\n<\/pre>\n<h2>See Also<\/h2>\n<ul>\n  <li> {rule:squid:S1118} - Utility classes should not have public constructors <\/li>\n<\/ul>","severity": "Major","tags": ["clumsy"]}]},{"key": "S2441","title": "Non-serializable objects should not be stored in \"HttpSession\" objects","tags": ["cwe"],"implementations": [{"key": "squid:S2441","language": "Java","title": "Non-serializable objects should not be stored in \"HttpSession\" objects","description": "<p>If you have no intention of writting an <code>HttpSession<\/code> object to file, then storing non-<code>serializable<\/code> objects in it may not\nseem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use\nin a process called \"passivation\". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such\nsessions at startup.<\/p>\n<p>The point is, that even though <code>HttpSession<\/code> does not <code>extend Serializable<\/code>, you must nonetheless assume that it will be\nserialized, and understand that if you've stored non-serializable objects in the session, errors will result. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Address {\n  \/\/...\n}\n\n\/\/...\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  \/\/ Noncompliant; Address isn't serializable\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/579.html\">MITRE, CWE-579<\/a> - J2EE Bad Practices: Non-serializable Object Stored in Session\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cwe"]}]},{"key": "S2442","title": "\"Lock\" objects should not be \"synchronized\"","tags": ["multi-threading","cert","clumsy"],"implementations": [{"key": "squid:S2442","language": "Java","title": "\"Lock\" objects should not be \"synchronized\"","description": "<p><code>java.util.concurrent.locks.Lock<\/code> offers far more powerful and flexible locking operations than are available with\n<code>synchronized<\/code> blocks. So synchronizing on a <code>Lock<\/code> throws away the power of the object, and is just silly. Instead, such\nobjects should be locked and unlocked using <code>tryLock()<\/code> and <code>unlock()<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  \/\/ Noncompliant\n  \/\/...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n\/\/...\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/cQCaAg\">CERT, LCK03-J.<\/a> - Do not synchronize on the intrinsic locks of high-level\n  concurrency objects <\/li>\n<\/ul>","severity": "Major","tags": ["cert","clumsy","multi-threading"]}]},{"key": "S2445","title": "Blocks should be synchronized on \"private final\" fields or parameters","tags": ["cwe","multi-threading","cert"],"implementations": [{"key": "squid:S2445","language": "Java","title": "Blocks should be synchronized on \"private final\" fields or parameters","description": "<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final<\/code>\nfield makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread,\nsynchronized on the new value, to enter the block at the same time.<\/p>\n<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object\ninstances in to the method as parameters, completely undermining the synchronization.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nprivate String color = \"red\";\n\nprivate void doSomething(){\n  synchronized(color) {  \/\/ Noncompliant; lock is actually on object instance \"red\" referred to by the color variable\n    \/\/...\n    color = \"green\"; \/\/ other threads now allowed into this block\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nprivate String color = \"red\";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    \/\/...\n    color = \"green\";\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/412.html\">MITRE, CWE-412<\/a> - Unrestricted Externally Accessible Lock <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/413\">MITRE, CWE-413<\/a> - Improper Resource Locking <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/6IEzAg\">CERT, LCK00-J.<\/a> - Use private final lock objects to synchronize classes that\n  may interact with untrusted code <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","multi-threading"]}]},{"key": "S2446","title": "\"notifyAll\" should be used","tags": ["multi-threading","cert"],"implementations": [{"key": "squid:S2446","language": "Java","title": "\"notifyAll\" should be used","description": "<p><code>notify<\/code> and <code>notifyAll<\/code> both wake up sleeping threads, but <code>notify<\/code> only rouses one, while <code>notifyAll<\/code>\nrouses all of them. Since <code>notify<\/code> might not wake up the right thread, <code>notifyAll<\/code> should be used instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      \/\/ ...\n      notify();  \/\/ Noncompliant\n    }\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      \/\/ ...\n      notifyAll();\n    }\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/OoAlAQ\">CERT, THI02-J.<\/a> - Notify all waiting threads rather than a single thread\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","multi-threading"]}]},{"key": "S2447","title": "Null should not be returned from a \"Boolean\" method","tags": ["pitfall"],"implementations": [{"key": "squid:S2447","language": "Java","title": "Null should not be returned from a \"Boolean\" method","description": "<p>While <code>null<\/code> is technically a valid <code>Boolean<\/code> value, that fact, and the distinction between <code>Boolean<\/code> and\n<code>boolean<\/code> is easy to forget. So returning <code>null<\/code> from a <code>Boolean<\/code> method is likely to cause problems with callers'\ncode.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic Boolean isUsable() {\n  \/\/ ...\n  return null;  \/\/ Noncompliant\n}\n<\/pre>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S2583","title": "Conditionally executed blocks should be reachable","tags": ["cwe","misra","cert","unused","pitfall"],"implementations": [{"key": "squid:S2583","language": "Java","title": "Conditionally executed blocks should be reachable","description": "<p>Conditional expressions which are always <code>true<\/code> or <code>false<\/code> can lead to dead code. Such code is always buggy and should never\nbe used in production.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\na = false;\nif (a) { \/\/ Noncompliant\n  doSomething(); \/\/ never executed\n}\n\nif (!a || b) { \/\/ Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); \/\/ never executed\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. <\/li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/570.html\">MITRE, CWE-570<\/a> - Expression is Always False <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/571\">MITRE, CWE-571<\/a> - Expression is Always True <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","pitfall","unused"]},{"key": "javascript:S2583","language": "JavaScript","title": "Conditionally executed blocks should be reachable","description": "<p>Conditional expressions which are always <code>true<\/code> or <code>false<\/code> can lead to dead code. Such code is always buggy and should never\nbe used in production.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\na = false;\nif (a) { \/\/ Noncompliant\n  doSomething(); \/\/ never executed\n}\n\nif (!a || b) { \/\/ Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); \/\/ never executed\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. <\/li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/570.html\">MITRE, CWE-570<\/a> - Expression is Always False <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/571\">MITRE, CWE-571<\/a> - Expression is Always True <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","pitfall","unused"]}]},{"key": "S2589","title": "Boolean expressions should not be gratuitous","tags": ["cwe","misra","cert","redundant"],"implementations": [{"key": "squid:S2589","language": "Java","title": "Boolean expressions should not be gratuitous","description": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\na = true;\nif (a) { \/\/ Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { \/\/ Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { \/\/ Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. <\/li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489\">MITRE, CWE-489<\/a> - Leftover Debug Code <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/571\">MITRE, CWE-571<\/a> - Expression is Always True <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","redundant"]}]},{"key": "S2629","title": "\"Preconditions\" and logging arguments should not require evaluation","tags": ["performance"],"implementations": [{"key": "squid:S2629","language": "Java","title": "\"Preconditions\" and logging arguments should not require evaluation","description": "<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions<\/code> check can result in a\nperformance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.<\/p>\n<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.<\/p>\n<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions<\/code> conditions check and logging\ncalls.<\/p>\n<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen <code>Preconditions<\/code> should be skipped altoghether, and the relevant exception should be conditionally thrown instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nlogger.log(Level.DEBUG, \"Something went wrong: \" + message);  \/\/ Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nLOG.error(\"Unable to open file \" + csvPath, e);  \/\/ Noncompliant\n\nPreconditions.checkState(a &gt; 0, \"Arg must be positive, but got \" + a);  \/\/ Noncompliant. String concatenation performed even when a &gt; 0\n\nPreconditions.checkState(condition, formatMessage());  \/\/ Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nlogger.log(Level.SEVERE, \"Something went wrong: %s \", message);  \/\/ String formatting only applied if needed\n\nlogger.log(Level.SEVERE, () -&gt; \"Something went wrong: \" + message); \/\/ since Java 8, we can use Supplier , which will be evaluated lazily\n\nLOG.error(\"Unable to open file {}\", csvPath, e);\n\nif (LOG.isDebugEnabled() {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  \/\/ this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg &gt; 0, \"Arg must be positive, but got %d\", a);  \/\/ String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  \/\/ formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p><code>catch<\/code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored. This rule accounts for explicit test-level testing with SLF4J methods <code>isXXXEnabled<\/code> and\nignores the bodies of such <code>if<\/code> statements.<\/p>","severity": "Major","tags": ["performance"]}]},{"key": "S2637","title": "\"@NonNull\" values should not be set to null","tags": [],"implementations": [{"key": "squid:S2637","language": "Java","title": "\"@NonNull\" values should not be set to null","description": "<p>Fields, parameters and return values marked <code>@NotNull<\/code>, <code>@NonNull<\/code>, or <code>@Nonnull<\/code> are assumed to have non-null\nvalues and are not typically null-checked before use. Therefore setting one of these values to <code>null<\/code>, or failing to set such a class field\nin a constructor, could cause <code>NullPointerException<\/code>s at runtime.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MainClass {\n\n  @Nonnull\n  private String primary;\n  private String secondary;\n\n  public MainClass(String color) {\n    if (color != null) {\n      secondary = null;\n    }\n    primary = color;  \/\/ Noncompliant; \"primary\" is Nonnull but could be set to null here\n  }\n\n  public MainClass() { \/\/ Noncompliant; \"primary\" Nonnull\" but is not initialized\n  }\n\n  @Nonnull\n  public String indirectMix() {\n    String mix = null;\n    return mix;  \/\/ Noncompliant; return value is Nonnull, but null is returned.}}\n  }\n<\/pre>","severity": "Minor","tags": []}]},{"key": "S2638","title": "Method overrides should not change contracts","tags": ["suspicious"],"implementations": [{"key": "squid:S2638","language": "Java","title": "Method overrides should not change contracts","description": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable<\/code>, <code>@CheckForNull<\/code>, <code>@NotNull<\/code>, <code>@NonNull<\/code>, and\n<code>@Nonnull<\/code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  \/\/ Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  \/\/ Noncompliant\n    return null;\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> https:\/\/en.wikipedia.org\/wiki\/Liskov_substitution_principle <\/li>\n<\/ul>","severity": "Critical","tags": ["suspicious"]}]},{"key": "S2639","title": "Inappropriate regular expressions should not be used","tags": [],"implementations": [{"key": "squid:S2639","language": "Java","title": "Inappropriate regular expressions should not be used","description": "<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.<\/p>\n<p>The following should not be used as regular expressions:<\/p>\n<ul>\n  <li> <code>.<\/code> - matches any single character. Used in <code>replaceAll<\/code>, it matches <em>everything<\/em> <\/li>\n  <li> <code>|<\/code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters <\/li>\n  <li> <code>File.separator<\/code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString str = \"\/File|Name.txt\";\n\nString clean = str.replaceAll(\".\",\"\"); \/\/ Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll(\"|\",\"_\"); \/\/ Noncompliant; yields _\/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,\"\"); \/\/ Noncompliant; exception on Windows\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2653","title": "Web applications should not have a \"main\" method","tags": ["cwe","cert","jee"],"implementations": [{"key": "squid:S2653","language": "Java","title": "Web applications should not have a \"main\" method","description": "<p>There is no reason to have a <code>main<\/code> method in a web application. It may have been useful for debugging during application development,\nbut such a method should never make it into production. Having a <code>main<\/code> method in a web application opens a door to the application logic\nthat an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be\npresent.<\/p>\n<p>This rule raises an issue when a <code>main<\/code> method is found in a servlet or an EJB.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    if (userIsAuthorized(req)) {\n      updatePrices(req);\n    }\n  }\n\n  public static void main(String[] args) { \/\/ Noncompliant\n    updatePrices(req);\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489.html\">MITRE, CWE-489<\/a> - Leftover Debug Code <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/VoB8Bw\">CERT, ENV06-J.<\/a> - Production code must not contain debugging entry points\n  <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe","jee"]}]},{"key": "S2674","title": "The value returned from a stream read should be checked","tags": ["cert"],"implementations": [{"key": "squid:S2674","language": "Java","title": "The value returned from a stream read should be checked","description": "<p>You cannot assume that any given stream reading call will fill the <code>byte[]<\/code> passed in to the method. Instead, you must check the value\nreturned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.<\/p>\n<p>Similarly, you cannot assume that <code>InputStream.skip<\/code> will actually skip the requested number of bytes, but must check the value returned\nfrom the method.<\/p>\n<p>This rule raises an issue when an <code>InputStream.read<\/code> method that accepts a <code>byte[]<\/code> is called, but the return value is not\nchecked, and when the return value of <code>InputStream.skip<\/code> is not checked. The rule also applies to <code>InputStream<\/code> child\nclasses.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  \/\/ Noncompliant\n    \/\/ ...\n  } catch (IOException e) { ... }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      \/\/ ...\n    }\n  } catch (IOException e) { ... }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/XACSAQ\">CERT, FIO10-J.<\/a> - Ensure the array is filled when using read() to fill an\n  array <\/li>\n<\/ul>","severity": "Minor","tags": ["cert"]}]},{"key": "S2675","title": "\"readObject\" should not be \"synchronized\"","tags": ["confusing"],"implementations": [{"key": "squid:S2675","language": "Java","title": "\"readObject\" should not be \"synchronized\"","description": "<p>A <code>readObject<\/code> method is written when a <code>Serializable<\/code> object needs special handling to be rehydrated from file. It should be\nthe case that the object being created by <code>readObject<\/code> is only visible to the thread that invoked the method, and the\n<code>synchronized<\/code> keyword is not needed, and using <code>synchronized<\/code> anyway is just confusing. If this is not the case, the method\nshould be refactored to make it the case.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { \/\/ Noncompliant\n  \/\/...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { \/\/ Compliant\n  \/\/...\n}\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "S2676","title": "Neither \"Math.abs\" nor negation should be used on numbers that could be \"MIN_VALUE\"","tags": [],"implementations": [{"key": "squid:S2676","language": "Java","title": "Neither \"Math.abs\" nor negation should be used on numbers that could be \"MIN_VALUE\"","description": "<p>It is possible for a call to <code>hashCode<\/code> to return <code>Integer.MIN_VALUE<\/code>. Take the absolute value of such a hashcode and you'll\nstill have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.<\/p>\n<p>Similarly, <code>Integer.MIN_VALUE<\/code> could be returned from <code>Random.nextInt()<\/code> or any object's <code>compareTo<\/code> method, and\n<code>Long.MIN_VALUE<\/code> could be returned from <code>Random.nextLong()<\/code>. Calling <code>Math.abs<\/code> on values returned from these methods\nis similarly ill-advised.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { \/\/ Noncompliant\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Minor","tags": []}]},{"key": "S2677","title": "\"read\" and \"readLine\" return values should be used","tags": [],"implementations": [{"key": "squid:S2677","language": "Java","title": "\"read\" and \"readLine\" return values should be used","description": "<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of\naction is surely a bug.<\/p>\n<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()<\/code>,\n<code>Reader.read()<\/code>, and these methods in any child classes.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    while (buffReader.readLine() != null) { \/\/ Noncompliant\n      \/\/ ...\n    }\n  } catch (IOException e) {\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      \/\/ ...\n    }\n  } catch (IOException e) {\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2681","title": "Multiline blocks should be enclosed in curly braces","tags": ["cwe","cert"],"implementations": [{"key": "squid:S2681","language": "Java","title": "Multiline blocks should be enclosed in curly braces","description": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if<\/code> statement or <code>for<\/code> loop, but doing so can be\nmisleading and induce bugs. <\/p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  \/\/ Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  \/\/ Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  \/\/ Noncompliant\n  secondAction();  \/\/ Executed unconditionally\n\nif (condition); secondAction();  \/\/ Noncompliant; secondAction executed unconditionally\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  \/\/ Noncompliant; executed only on last array element\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/483.html\">MITRE, CWE-483<\/a> - Incorrect Block Delimitation <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/3wHEAw\">CERT, EXP52-J.<\/a> - Use braces for the body of an if, for, or while statement\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe"]},{"key": "javascript:S2681","language": "JavaScript","title": "Multiline blocks should be enclosed in curly braces","description": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if<\/code> statement or <code>for<\/code> loop, but doing so can be\nmisleading and induce bugs. <\/p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  \/\/ Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  \/\/ Noncompliant; executed only on last array element\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/483.html\">MITRE, CWE-483<\/a> - Incorrect Block Delimitation <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/3wHEAw\">CERT, EXP52-J.<\/a> - Use braces for the body of an if, for, or while statement\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe"]},{"key": "php:S2681","language": "PHP","title": "Multiline blocks should be enclosed in curly braces","description": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if<\/code> statement or <code>for<\/code> loop, but doing so can be\nmisleading and induce bugs. <\/p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ($condition)\n  firstActionInBlock();\n  secondAction();  \/\/ Noncompliant; executed unconditionally\nthirdAction();\n\n$str = null;\nfor ($i = 0; $i &lt; count($array); $i++)\n  $str = $array[$i];\n  doTheThing($str);  \/\/ Noncompliant; executed only on last array element\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif ($condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\n$str = null;\nfor ($i = 0; $i &lt; count($array); $i++) {\n  $str = $array[$i];\n  doTheThing($str);\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/483.html\">MITRE, CWE-483<\/a> - Incorrect Block Delimitation <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/3wHEAw\">CERT, EXP52-J.<\/a> - Use braces for the body of an if, for, or while statement\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe"]}]},{"key": "S2688","title": "\"NaN\" should not be used in comparisons","tags": ["cert"],"implementations": [{"key": "javascript:S2688","language": "JavaScript","title": "\"NaN\" should not be used in comparisons","description": "<p><code>NaN<\/code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN<\/code> will yield predictable results,\nbut probably not the ones you want. <\/p>\n<p>Instead, the best way to see whether a variable is equal to <code>NaN<\/code> is to use <code>Number.isNaN()<\/code>, since ES2015, or (perhaps\ncounter-intuitively) to compare it to itself. Since <code>NaN !== NaN<\/code>, when <code>a !== a<\/code>, you know it must equal <code>NaN<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar a = NaN;\n\nif (a === NaN) {  \/\/ Noncompliant; always false\n  console.log(\"a is not a number\");  \/\/ this is dead code\n}\nif (a !== NaN) { \/\/ Noncompliant; always true\n  console.log(\"a is not NaN\"); \/\/ this statement is not necessarily true\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (Number.isNaN(a)) {\n  console.log(\"a is not a number\");\n}\nif (!Number.isNaN(a)) {\n  console.log(\"a is not NaN\");\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/7AEqAQ\">CERT, NUM07-J.<\/a> - Do not attempt comparisons with NaN <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S2692","title": "\"indexOf\" checks should not be for positive numbers","tags": ["suspicious"],"implementations": [{"key": "squid:S2692","language": "Java","title": "\"indexOf\" checks should not be for positive numbers","description": "<p>Most checks against an <code>indexOf<\/code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String<\/code> or a <code>List<\/code>, consider\nusing the <code>contains<\/code> method instead.<\/p>\n<p>This rule raises an issue when an <code>indexOf<\/code> value retrieved either from a <code>String<\/code> or a <code>List<\/code> is tested against\n<code>&gt;0<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  \/\/ Noncompliant\n  \/\/ ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { \/\/ Noncompliant\n  \/\/ ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  \/\/ ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  \/\/ ...\n}\nif (name.contains(\"ae\") {\n  \/\/ ...\n}\n<\/pre>","severity": "Critical","tags": ["suspicious"]}]},{"key": "S2695","title": "\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices","tags": ["sql"],"implementations": [{"key": "squid:S2695","language": "Java","title": "\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices","description": "<p>The parameters in a <code>PreparedStatement<\/code> are numbered from 1, not 0, so using any \"set\" method of a <code>PreparedStatement<\/code> with a\nnumber less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet<\/code> indices also start at 1,\nrather than 0<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(0, date);  \/\/ Noncompliant\nps.setDouble(3, salary);  \/\/ Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  \/\/ ...\n}\n<\/pre>","severity": "Blocker","tags": ["sql"]}]},{"key": "S2696","title": "Instance methods should not write to \"static\" fields","tags": ["multi-threading"],"implementations": [{"key": "squid:S2696","language": "Java","title": "Instance methods should not write to \"static\" fields","description": "<p>Correctly updating a <code>static<\/code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and\/or multiple threads in play. Ideally, <code>static<\/code> fields are only updated from <code>synchronized static<\/code>\nmethods.<\/p>\n<p>This rule raises an issue each time a <code>static<\/code> field is updated from a non-static method.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    \/\/...\n    count++;  \/\/ Noncompliant\n  }\n}\n<\/pre>","severity": "Critical","tags": ["multi-threading"]}]},{"key": "S2703","title": "Variables should be declared explicitly","tags": ["pitfall"],"implementations": [{"key": "javascript:S2703","language": "JavaScript","title": "Variables should be declared explicitly","description": "<p>JavaScript variable scope can be particularly difficult to understand and get right. The situation gets even worse when you consider the\n<em>accidental<\/em> creation of global variables, which is what happens when you declare a variable inside a function or the <code>for<\/code> clause\nof a for-loop without using the <code>let<\/code>, <code>const<\/code> or <code>var<\/code> keywords. <\/p>\n<p><code>let<\/code> and <code>const<\/code> were introduced in ECMAScript 2015, and are now the preferred keywords for variable declaration.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction f(){\n  i = 1;         \/\/ Noncompliant; i is global\n\n  for (j = 0; j &lt; array.length; j++) {  \/\/ Noncompliant; j is global now too\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction f(){\n  var i = 1;\n\n  for (let j = 0; j &lt; array.length; j++) {\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Blocker","tags": ["pitfall"]}]},{"key": "S2711","title": "\"yield\" and \"return\" should not be used outside functions","tags": [],"implementations": [{"key": "python:S2711","language": "Python","title": "\"yield\" and \"return\" should not be used outside functions","description": "<p><code>yield<\/code> and <code>return<\/code> only make sense in the context of functions. Using them outside a function raises a\n<code>SyntaxError<\/code>. To break out of a loop, use <code>break<\/code> instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass:\n    while True:\n        return False #Noncompliant\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S2712","title": "\"return\" and \"yield\" should not be used in the same function","tags": [],"implementations": [{"key": "python:S2712","language": "Python","title": "\"return\" and \"yield\" should not be used in the same function","description": "<p>Functions that use <code>yield<\/code> are known as \"generators\", and generators cannot <code>return<\/code> values. Similarly, functions that use\n<code>return<\/code> cannot use <code>yield<\/code>. Doing so will cause a <code>SyntaxError<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ndef adder(n):\n     num = 0\n     while num &lt; n:\n         yield num\n         num += 1\n     return num  #Noncompliant\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S2718","title": "\"DateUtils.truncate\" from Apache Commons Lang library should not be used","tags": ["performance","java8"],"implementations": [{"key": "squid:S2718","language": "Java","title": "\"DateUtils.truncate\" from Apache Commons Lang library should not be used","description": "<p>The use of the <code>Instant<\/code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils<\/code> class\nfrom Commons Lang.<\/p>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  instant = instant.truncatedTo(ChronoUnit.SECONDS);\n  return Date.from(instant);\n}\n<\/pre>","severity": "Major","tags": ["java8","performance"]}]},{"key": "S2733","title": "\"__exit__\" should accept type, value, and traceback arguments","tags": [],"implementations": [{"key": "python:S2733","language": "Python","title": "\"__exit__\" should accept type, value, and traceback arguments","description": "<p>The <code>__exit__<\/code> method is invoked with four arguments: self, type, value and traceback. Leave one of these out of the method declaration\nand the result will be a <code>TypeError<\/code> at runtime.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass:\n   def __enter__(self):\n       pass\n   def __exit__(self, exc_type, exc_val):  # Noncompliant\n       pass\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S2734","title": "\"__init__\" should not return a value","tags": [],"implementations": [{"key": "python:S2734","language": "Python","title": "\"__init__\" should not return a value","description": "<p>By contract, every Python function returns something, even if it's the <code>None<\/code> value, which can be returned implicitly by omitting the\n<code>return<\/code> statement, or explicitly. <\/p>\n<p>The <code>__init__<\/code> method is required to return <code>None<\/code>. A <code>TypeError<\/code> will be raised if the <code>__init__<\/code>\nmethod either <code>yield<\/code>s or <code>return<\/code>s any expression other than <code>None<\/code>. Returning some expression that evaluates to\n<code>None<\/code> will not raise an error, but is considered bad practice.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n        return self  # Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S2737","title": "\"catch\" clauses should do more than rethrow","tags": ["cert","unused","finding","clumsy"],"implementations": [{"key": "squid:S2737","language": "Java","title": "\"catch\" clauses should do more than rethrow","description": "<p>A <code>catch<\/code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch<\/code> altogether and letting\nit bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. <\/p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      \/\/...\n  }\n  catch (IOException e) {  \/\/ Noncompliant\n    throw e;\n  }\n  return sb.toString();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      \/\/...\n  }\n  catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return sb.toString();\n}\n<\/pre>\n<p>or<\/p>\n<pre>\npublic String readFile(File f) throws IOException {\n  StringBuilder sb = new StringBuilder();\n  FileReader fileReader = new FileReader(fileName);\n  BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n  while((line = bufferedReader.readLine()) != null) {\n    \/\/...\n\n  return sb.toString();\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","clumsy","finding","unused"]}]},{"key": "S2757","title": "\"=+\" should not be used instead of \"+=\"","tags": [],"implementations": [{"key": "squid:S2757","language": "Java","title": "\"=+\" should not be used instead of \"+=\"","description": "<p>The use of operators pairs ( <code>=+<\/code>, <code>=-<\/code> or <code>=!<\/code> ) where the reversed, single operator was meant (<code>+=<\/code>,\n<code>-=<\/code> or <code>!=<\/code>) will compile and run, but not produce the expected results.<\/p>\n<p>This rule raises an issue when <code>=+<\/code>, <code>=-<\/code>, or <code>=!<\/code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num;  \/\/ Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; \/\/ Noncompliant; target = 3\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num;  \/\/ Compliant; intent to assign inverse value of num is clear\ntarget += num;\n<\/pre>","severity": "Major","tags": []},{"key": "javascript:S2757","language": "JavaScript","title": "\"=+\" should not be used instead of \"+=\"","description": "<p>The use of operators pairs (<code>=+<\/code> or <code>=-<\/code>) where the reversed, single operator was meant (<code>+=<\/code> or <code>-=<\/code>)\nwill compile and run, but not produce the expected results.<\/p>\n<p>This rule raises an issue when <code>=+<\/code> and <code>=-<\/code> are used without any space between the two operators and when there is at least\none whitespace after.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar target =-5;\nvar num = 3;\n\ntarget =- num;  \/\/ Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; \/\/ Noncompliant; target = 3\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar target = -5;\nvar num = 3;\n\ntarget = -num;  \/\/ Compliant; intent to assign inverse value of num is clear\ntarget += num;\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2772","title": "\"pass\" should not be used needlessly","tags": ["unused"],"implementations": [{"key": "python:S2772","language": "Python","title": "\"pass\" should not be used needlessly","description": "<p>The use of a <code>pass<\/code> statement where it's not required by the syntax is pure cruft and should be removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n    def __init__(self, log=\"\", who=\"\", date=0, files=[]):\n        self.log = log\n        self.files = files\n        self.who = who\n        self.date = date\n        pass    # Noncompliant\n\n    def lookup():\n        pass    # Compliant; method can't be empty\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n    def __init__(self, log=\"\", who=\"\", date=0, files=[]):\n        self.log = log\n        self.files = files\n        self.who = who\n        self.date = date\n\n    def lookup():\n        pass\n<\/pre>","severity": "Minor","tags": ["unused"]}]},{"key": "S2786","title": "Nested \"enum\"s should not be declared static","tags": ["clumsy"],"implementations": [{"key": "squid:S2786","language": "Java","title": "Nested \"enum\"s should not be declared static","description": "<p>According to <a href=\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-8.html#jls-8.9\">the docs<\/a>:<\/p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static<\/code>.\n<\/blockquote>\n<p>So there's no need to declare them <code>static<\/code> explicitly.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Flower {\n  static enum Color { \/\/ Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Flower {\n  enum Color { \/\/ Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  \/\/ ...\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S2789","title": "\"null\" should not be used with \"Optional\"","tags": ["java8"],"implementations": [{"key": "squid:S2789","language": "Java","title": "\"null\" should not be used with \"Optional\"","description": "<p>The concept of <code>Optional<\/code> is that it will be used when <code>null<\/code> could cause errors. In a way, it replaces <code>null<\/code>,\nand when <code>Optional<\/code> is in use, there should never be a question of returning or receiving <code>null<\/code> from a call.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  if (optional != null) {  \/\/ Noncompliant\n    \/\/ do something with optional...\n  }\n}\n\n@Nullable \/\/ Noncompliant\npublic Optional&lt;String&gt; getOptional() {\n  \/\/ ...\n  return null;  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  optional.ifPresent(\n    \/\/ do something with optional...\n  );\n}\n\npublic Optional&lt;String&gt; getOptional() {\n  \/\/ ...\n  return Optional.empty();\n}\n<\/pre>","severity": "Major","tags": ["java8"]}]},{"key": "S2814","title": "Variables and functions should not be redeclared","tags": ["confusing"],"implementations": [{"key": "javascript:S2814","language": "JavaScript","title": "Variables and functions should not be redeclared","description": "<p>This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as\neither a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with\nthe developer not realizing that the value of the variable is overwritten by the new assignment.<\/p>\n<p>This rule also applies to function parameters.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar a = 'foo';\nfunction a() {}   \/\/ Noncompliant\nconsole.log(a);   \/\/ prints \"foo\"\n\nfunction myFunc(arg) {\n  var arg = \"event\"; \/\/ Noncompliant, argument value is lost\n}\n\nfun(); \/\/ prints \"bar\"\n\nfunction fun() {\n  console.log(\"foo\");\n}\n\nfun(); \/\/ prints \"bar\"\n\nfunction fun() {  \/\/ Noncompliant\n  console.log(\"bar\");\n}\n\nfun(); \/\/ prints \"bar\"\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar a = 'foo';\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  var newName = \"event\";\n}\n\nfun(); \/\/ prints \"foo\"\n\nfunction fun() {\n  print(\"foo\");\n}\n\nfun(); \/\/ prints \"foo\"\n\nfunction printBar() {\n  print(\"bar\");\n}\n\nprintBar(); \/\/ prints \"bar\"\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "S2819","title": "Cross-document messaging domains should be carefully restricted","tags": ["html5","owasp-a3"],"implementations": [{"key": "javascript:S2819","language": "JavaScript","title": "Cross-document messaging domains should be carefully restricted","description": "<p>HTML5 adds the ability to send messages to documents served from other domains. According to the specification:<\/p>\n<blockquote>\n  Authors should not use the wildcard keyword (\n  <code>*<\/code>) in the\n  <code>targetOrigin<\/code> argument in messages that contain any confidential information, as otherwise there is no way to guarantee that the message\n  is only delivered to the recipient to which it was intended.\n<\/blockquote>\n<p>To mitigate the risk of sending sensitive information to a document served from a hostile or unknown domain, this rule raises an issue each time\n<code>Window.postMessage<\/code> is used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar myWindow = document.getElementById('myIFrame').contentWindow;\nmyWindow.postMessage(message, \"*\"); \/\/ Noncompliant; how do you know what you loaded in 'myIFrame' is still there?\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3<\/a> - Cross-Site Scripting\n  (XSS) <\/li>\n<\/ul>","severity": "Critical","tags": ["html5","owasp-a3"]}]},{"key": "S2864","title": "\"entrySet()\" should be iterated when both the key and value are needed","tags": ["performance"],"implementations": [{"key": "squid:S2864","language": "Java","title": "\"entrySet()\" should be iterated when both the key and value are needed","description": "<p>When only the keys from a map are needed in a loop, iterating the <code>keySet<\/code> makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the <code>entrySet<\/code>, which will give access to both the key and value, instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  \/\/ Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S2870","title": "\"delete\" should not be used on arrays","tags": [],"implementations": [{"key": "javascript:S2870","language": "JavaScript","title": "\"delete\" should not be used on arrays","description": "<p>The <code>delete<\/code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete<\/code> operator can be\nused here too, but if it is, a hole will be left in the array because the indexes\/keys won't be shifted to reflect the deletion. <\/p>\n<p>The proper method for removing an element at a certain index would be:<\/p>\n<ul>\n  <li> <code>Array.prototype.splice<\/code> - add\/remove elements from the the array <\/li>\n  <li> <code>Array.prototype.pop<\/code> - add\/remove elements from the end of the array <\/li>\n  <li> <code>Array.prototype.shift<\/code> - add\/remove elements from the beginning of the array <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\ndelete myArray[2];  \/\/ Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']\nconsole.log(myArray[2]); \/\/ expected value was 'd' but output is undefined\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\n\/\/ removes 1 element from index 2\nremoved = myArray.splice(2, 1);  \/\/ myArray =&gt; ['a', 'b', 'd']\nconsole.log(myArray[2]); \/\/ outputs 'd'\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2873","title": "Calls should not be made to non-callable values","tags": [],"implementations": [{"key": "javascript:S2873","language": "JavaScript","title": "Calls should not be made to non-callable values","description": "<p>The fact that JavaScript is not a strongly typed language allows developers a lot of freedom, but that freedom can be dangerous if you go too far\nwith it. <\/p>\n<p>Specifically, it is syntactically acceptable to invoke any expression as though its value were a function. But a <code>TypeError<\/code> may be\nraised if you do.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfoo = 1;\nfoo();   \/\/ Noncompliant; TypeError\n\nfoo = undefined;\nfoo();  \/\/ Noncompliant; TypeError\n<\/pre>","severity": "Major","tags": []}]},{"key": "S2885","title": "Non-thread-safe fields should not be static","tags": ["multi-threading"],"implementations": [{"key": "squid:S2885","language": "Java","title": "Non-thread-safe fields should not be static","description": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.<\/p>\n<p>This rule raises an issue when an instance of <code>Calendar<\/code>, <code>DateFormat<\/code>, <code>javax.xml.xpath.XPath<\/code>, or\n<code>javax.xml.validation.SchemaFactory<\/code> is marked <code>static<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  \/\/ Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n<\/pre>","severity": "Major","tags": ["multi-threading"]}]},{"key": "S2886","title": "Getters and setters should be synchronized in pairs","tags": ["multi-threading","cert"],"implementations": [{"key": "squid:S2886","language": "Java","title": "Getters and setters should be synchronized in pairs","description": "<p>When one part of a getter\/setter pair is <code>synchronized<\/code> the other part should be too. Failure to synchronize both sides of a pair may\nresult in inconsistent behavior at runtime as callers access an inconsistent method state.<\/p>\n<p>This rule raises an issue when either the method or the contents of one method in a getter\/setter pair are synchrnoized but the other is not.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  \/\/ Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  \/\/ Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/I4BoAg\">CERT, VNA01-J.<\/a> - Ensure visibility of shared references to immutable\n  objects <\/li>\n<\/ul>","severity": "Major","tags": ["cert","multi-threading"]}]},{"key": "S2912","title": "\"indexOf\" checks should use a start position","tags": ["confusing"],"implementations": [{"key": "squid:S2912","language": "Java","title": "\"indexOf\" checks should use a start position","description": "<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper\nchoice of <code>indexOf<\/code> methods can help move code from confusing to clear.<\/p>\n<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf<\/code> the substring versus\nthe target point, or you can use the version of <code>indexOf<\/code> which takes a starting point argument. The latter is arguably clearer because the\nresult is tested against -1, which is an easily recognizable \"not found\" indicator.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\") &gt; 2) { \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\", 2) &gt; -1) {\n  \/\/ ...\n}\n<\/pre>","severity": "Minor","tags": ["confusing"]}]},{"key": "S2924","title": "JUnit rules should be used","tags": ["tests","unused"],"implementations": [{"key": "squid:S2924","language": "Java","title": "JUnit rules should be used","description": "<p>While some <code>TestRule<\/code> classes have the desired effect without ever being directly referenced by a test, several others do not, and\nthere's no reason to leave them cluttering up the file if they're not in use.<\/p>\n<p>This rule raises an issue when <code>Test<\/code> class fields of the following types aren't used by any of the test methods:\n<code>TemporaryFolder<\/code>, and <code>TestName<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  \/\/ Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n<\/pre>","severity": "Minor","tags": ["tests","unused"]}]},{"key": "S2925","title": "\"Thread.sleep\" should not be used in tests","tags": ["bad-practice"],"implementations": [{"key": "squid:S2925","language": "Java","title": "\"Thread.sleep\" should not be used in tests","description": "<p>Using <code>Thread.sleep<\/code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on\nenvironment (\"Passes on my machine!\") or load. Don't rely on timing (use mocks) or use libraries such as <code>Awaitility<\/code> for asynchroneous\ntesting. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  \/\/ Noncompliant\n  \/\/ assertions...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  \/\/ Compliant\n  \/\/ assertions...\n}\n\nprivate Callable&lt;Boolean&gt; didTheThing() {\n  return new Callable&lt;Boolean&gt;() {\n    public Boolean call() throws Exception {\n      \/\/ check the condition that must be fulfilled...\n    }\n  };\n}\n<\/pre>","severity": "Major","tags": ["bad-practice"]}]},{"key": "S2964","title": "\"sleep\" should not be called","tags": [],"implementations": [{"key": "php:S2964","language": "PHP","title": "\"sleep\" should not be called","description": "<p><code>sleep<\/code> is sometimes used in a mistaken attempt to prevent Denial of Service (DoS) attacks by throttling response rate. But because it\nties up a thread, each request takes longer to serve that it otherwise would, making the application <em>more<\/em> vulnerable to DoS attacks, rather\nthan less.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (is_bad_ip($requester)) {\n  sleep(5);  \/\/ Noncompliant\n}\n<\/pre>","severity": "Minor","tags": []}]},{"key": "S2970","title": "Assertions should be complete","tags": ["tests"],"implementations": [{"key": "squid:S2970","language": "Java","title": "Assertions should be complete","description": "<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:<\/p>\n<ul>\n  <li> Fest: <code>assertThat<\/code> is not followed by an assertion invocation <\/li>\n  <li> AssertJ: <code>assertThat<\/code> is not followed by an assertion invocation <\/li>\n  <li> Mockito: <code>verify<\/code> is not followed by a method invocation <\/li>\n<\/ul>\n<p>In such cases, what is intended to be a test doesn't actually verify anything<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n\/\/ Fest\nboolean result = performAction();\n\/\/ let's now check that result value is true\nassertThat(result); \/\/ Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n\/\/ Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n\/\/ let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); \/\/ Noncompliant; nothing is checked here, oups no call is chained to verify()\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n\/\/ Fest\nboolean result = performAction();\n\/\/ let's now check that result value is true\nassertThat(result).isTrue();\n\n\/\/ Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n\/\/ let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Variable assignments and return statements are skipped to allow helper methods.<\/p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); \/\/ No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n<\/pre>","severity": "Blocker","tags": ["tests"]}]},{"key": "S2975","title": "\"clone\" should not be overridden","tags": ["suspicious"],"implementations": [{"key": "squid:S2975","language": "Java","title": "\"clone\" should not be overridden","description": "<p>Many consider <code>clone<\/code> and <code>Cloneable<\/code> broken in Java, largely because the rules for overriding <code>clone<\/code> are tricky\nand difficult to get right, according to Joshua Bloch:<\/p>\n<blockquote>\n  Object's clone method is very tricky. It's based on field copies, and it's \"extra-linguistic.\" It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and\n  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow\n  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n<\/blockquote>\n<p>A copy constructor or copy factory should be used instead.<\/p>\n<p>This rule raises an issue when <code>clone<\/code> is overridden, whether or not <code>Cloneable<\/code> is implemented.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n  \/\/ ...\n\n  public Object clone() { \/\/ Noncompliant\n    \/\/...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass {\n  \/\/ ...\n\n  MyClass (MyClass source) {\n    \/\/...\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/www.artima.com\/intv\/bloch13.html\">Copy Constructor versus Cloning<\/a> <\/li>\n<\/ul>\n<h3>See Also<\/h3>\n<ul>\n  <li> {rule:squid:S2157} - \"Cloneables\" should implement \"clone\" <\/li>\n  <li> {rule:squid:S1182} - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" <\/li>\n<\/ul>","severity": "Blocker","tags": ["suspicious"]}]},{"key": "S2976","title": "\"File.createTempFile\" should not be used to create a directory","tags": ["owasp-a9"],"implementations": [{"key": "squid:S2976","language": "Java","title": "\"File.createTempFile\" should not be used to create a directory","description": "<p>Using <code>File.createTempFile<\/code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and\ninsecure. Instead, <code>Files.createTempDirectory<\/code> (Java 7+) or a library function such as Guava's similarly-named\n<code>Files.createTempDir<\/code> should be used.<\/p>\n<p>This rule raises an issue when the following steps are taken in immediate sequence:<\/p>\n<ul>\n  <li> call to <code>File.createTempFile<\/code> <\/li>\n  <li> delete resulting file <\/li>\n  <li> call <code>mkdir<\/code> on the File object <\/li>\n<\/ul>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>7<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nFile tempDir;\ntempDir = File.createTempFile(\"\", \".\");\ntempDir.delete();\ntempDir.mkdir();  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nPath tempPath = Files.createTempDirectory(\"\");\nFile tempDir = tempPath.toFile();\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities\">OWAPS Top Ten 2013 Category A9<\/a> - Using\n  Components with Known Vulnerabilities <\/li>\n<\/ul>","severity": "Critical","tags": ["owasp-a9"]}]},{"key": "S2999","title": "\"new\" operators should be used with functions","tags": [],"implementations": [{"key": "javascript:S2999","language": "JavaScript","title": "\"new\" operators should be used with functions","description": "<p>The <code>new<\/code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a\n<code>TypeError<\/code> because there won't be a constructor function for the <code>new<\/code> keyword to invoke.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = 1;\n\nvar obj1 = new someClass;    \/\/ Noncompliant;\nvar obj2 = new MyClass();    \/\/ Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n\/**\n * @constructor\n *\/\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = function(){\n  this.prop = 1;\n}\n\nvar obj1 = new someClass;  \/\/ Compliant\nvar obj2 = new MyClass();  \/\/ Compliant regardless of considerJSDoc value\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3001","title": "\"delete\" should be used only with object properties","tags": [],"implementations": [{"key": "javascript:S3001","language": "JavaScript","title": "\"delete\" should be used only with object properties","description": "<p>The semantics of the <code>delete<\/code> operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass\nanything else to it, and you may or may not get the desired result.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar x  = 1;\ndelete x;       \/\/ Noncompliant\n\nfunction foo(){\n..\n}\n\ndelete foo;  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar obj = {\n  x:1,\n  foo: function(){\n  ...\n  }\n};\ndelete obj.x;\ndelete obj.foo;\n\n<\/pre>","severity": "Minor","tags": []}]},{"key": "S3008","title": "Static non-final field names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S3008","language": "Java","title": "Static non-final field names should comply with a naming convention","description": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular\nexpression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\npublic final class MyClass {\n   private static String foo_bar;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {\n   private static String fooBar;\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S3010","title": "Static fields should not be updated in constructors","tags": [],"implementations": [{"key": "squid:S3010","language": "Java","title": "Static fields should not be updated in constructors","description": "<p>Assigning a value to a <code>static<\/code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.<\/p>\n<p>Instead remove the field's <code>static<\/code> modifier, or initialize it statically.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Person {\n  static Date dateOfBirth;\n  static int expectedFingers;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;  \/\/ Noncompliant; now everyone has this birthday\n    expectedFingers = 10;  \/\/ Noncompliant\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Person {\n  Date dateOfBirth;\n  static int expectedFingers = 10;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;\n  }\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3020","title": "\"toArray\" should be passed an array of the proper type","tags": [],"implementations": [{"key": "squid:S3020","language": "Java","title": "\"toArray\" should be passed an array of the proper type","description": "<p>Given no arguments, the <code>Collections.toArray<\/code> method returns an <code>Object []<\/code>, which will cause a\n<code>ClassCastException<\/code> at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the\ncall.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray();  \/\/ Noncompliant; ClassCastException thrown\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return strings.toArray(new String[0]);\n}\n<\/pre>","severity": "Minor","tags": []}]},{"key": "S3027","title": "String function use should be optimized for single characters","tags": ["performance","clumsy"],"implementations": [{"key": "squid:S3027","language": "Java","title": "String function use should be optimized for single characters","description": "<p>An <code>indexOf<\/code> or <code>lastIndexOf<\/code> call with a single letter <code>String<\/code> can be made more performant by switching to a\ncall with a <code>char<\/code> argument.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString myStr = \"Hello World\";\n\/\/ ...\nint pos = myStr.indexOf(\"W\");  \/\/ Noncompliant\n\/\/ ...\nint otherPos = myStr.lastIndexOf(\"r\"); \/\/ Noncompliant\n\/\/ ...\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nString myStr = \"Hello World\";\n\/\/ ...\nint pos = myStr.indexOf('W');\n\/\/ ...\nint otherPos = myStr.lastIndexOf('r');\n\/\/ ...\n<\/pre>","severity": "Major","tags": ["clumsy","performance"]}]},{"key": "S3034","title": "Raw byte values should not be used in bitwise operations in combination with shifts","tags": ["cert"],"implementations": [{"key": "squid:S3034","language": "Java","title": "Raw byte values should not be used in bitwise operations in combination with shifts","description": "<p>When reading bytes in order to build other primitive values such as <code>int<\/code>s or <code>long<\/code>s, the <code>byte<\/code> values are\nautomatically promoted, but that promotion can have unexpected results.<\/p>\n<p>For instance, the binary representation of the integer 640 is <code>0b0000_0010_1000_0000<\/code>, which can also be written with the array of\n(unsigned) bytes <code>[2, 128]<\/code>. However, since Java uses two's complement, the representation of the integer in signed bytes will be <code>[2,\n-128]<\/code> (because the <code>byte<\/code> <code>0b1000_0000<\/code> is promoted to the <code>int<\/code>\n<code>0b1111_1111_1111_1111_1111_1111_1000_0000<\/code>). Consequently, trying to reconstruct the initial integer by shifting and adding the values of\nthe bytes without taking care of the sign will not produce the expected result. <\/p>\n<p>To prevent such accidental value conversion, use bitwise and (<code>&amp;<\/code>) to combine the <code>byte<\/code> value with <code>0xff<\/code>\n(255) and turn all the higher bits back off.<\/p>\n<p>This rule raises an issue any time a <code>byte<\/code> value is used as an operand without <code>&amp; 0xff<\/code>, when combined with shifts.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | readByte(); \/\/ Noncompliant\n    }\n    return result;\n  }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | (readByte() &amp; 0xff);\n    }\n    return result;\n  }\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SAHEAw\">CERT, NUM52-J.<\/a> - Be aware of numeric promotion behavior <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S3038","title": "Abstract methods should not be redundant","tags": ["confusing"],"implementations": [{"key": "squid:S3038","language": "Java","title": "Abstract methods should not be redundant","description": "<p>There's no point in redundantly defining an <code>abstract<\/code> method with the same signature as a method in an <code>interface<\/code> that the\nclass <code>implements<\/code>. Any concrete child classes will have to implement the method either way.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  \/\/ Noncompliant\n\n  \/\/ ...\n}\n<\/pre>","severity": "Minor","tags": ["confusing"]}]},{"key": "S3042","title": "\"writeObject\" should not be the only \"synchronized\" code in a class","tags": ["confusing"],"implementations": [{"key": "squid:S3042","language": "Java","title": "\"writeObject\" should not be the only \"synchronized\" code in a class","description": "<p>The purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There's no real problem with marking\n<code>writeObject<\/code> <code>synchronized<\/code>, but if it's highly suspicious if this serialization-related method the only\n<code>synchronized<\/code> code in a <code>class<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n  public RubberBall(Color color, int diameter) {\n    \/\/ ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    \/\/ ...\n  }\n\n  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { \/\/ Noncompliant\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n   public RubberBall(Color color, int diameter) {\n    \/\/ ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    \/\/ ...\n  }\n\n  private void writeObject(ObjectOutputStream stream) throws IOException {\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "S3046","title": "\"wait\" should not be called when multiple locks are held","tags": ["multi-threading","deadlock"],"implementations": [{"key": "squid:S3046","language": "Java","title": "\"wait\" should not be called when multiple locks are held","description": "<p>When two locks are held simultaneously, a <code>wait<\/code> call only releases one of them. The other will be held until some other thread requests\na lock on the awaited object. If no unrelated code tries to lock on that object, then all other threads will be locked out, resulting in a\ndeadlock.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nsynchronized (this.mon1) {  \/\/ threadB can't enter this block to request this.mon2 lock &amp; release threadA\n\tsynchronized (this.mon2) {\n\t\tthis.mon2.wait();  \/\/ Noncompliant; threadA is stuck here holding lock on this.mon1\n\t}\n}\n<\/pre>","severity": "Blocker","tags": ["deadlock","multi-threading"]}]},{"key": "S3066","title": "\"enum\" fields should not be publicly mutable","tags": ["bad-practice"],"implementations": [{"key": "squid:S3066","language": "Java","title": "\"enum\" fields should not be publicly mutable","description": "<p><code>enum<\/code>s are generally thought of as constant, but an <code>enum<\/code> with a <code>public<\/code> field or <code>public<\/code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum<\/code> are <code>private<\/code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  \/\/ ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  \/\/ Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    \/\/ ...\n  }\n\n  public void setLandMass(int landMass) {  \/\/ Noncompliant\n    this.landMass = landMass;\n  }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  \/\/ ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    \/\/ ...\n  }\n<\/pre>","severity": "Minor","tags": ["bad-practice"]}]},{"key": "S3067","title": "\"getClass\" should not be used for synchronization","tags": ["multi-threading","cert"],"implementations": [{"key": "squid:S3067","language": "Java","title": "\"getClass\" should not be used for synchronization","description": "<p><code>getClass<\/code> should not be used for synchronization in non-<code>final<\/code> classes because child classes will synchronize on a\ndifferent object than the parent or each other, allowing multiple threads into the code block at once, despite the <code>synchronized<\/code>\nkeyword.<\/p>\n<p>Instead, hard code the name of the class on which to synchronize or make the class <code>final<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (this.getClass()) {  \/\/ Noncompliant\n      \/\/ ...\n    }\n  }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (MyClass.class) {\n      \/\/ ...\n    }\n  }\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/bwCaAg\">CERT, LCK02-J.<\/a> - Do not synchronize on the class object returned by\n  getClass() <\/li>\n<\/ul>","severity": "Major","tags": ["cert","multi-threading"]}]},{"key": "S3281","title": "Default EJB interceptors should be declared in \"ejb-jar.xml\"","tags": [],"implementations": [{"key": "squid:S3281","language": "Java","title": "Default EJB interceptors should be declared in \"ejb-jar.xml\"","description": "<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml<\/code> file, or they will not be treated\nas default. <\/p>\n<p>This rule applies to projects that contain JEE Beans (any one of <code>javax.ejb.Singleton<\/code>, <code>MessageDriven<\/code>,\n<code>Stateless<\/code> or <code>Stateful<\/code>).<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n\/\/ file: ejb-interceptors.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;\/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;\/interceptor-class&gt;&lt;!-- Noncompliant; will not be treated as default --&gt;\n   &lt;\/interceptor-binding&gt;\n&lt;\/assembly-descriptor&gt;\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n\/\/ file: ejb-jar.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;\/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;\/interceptor-class&gt;\n   &lt;\/interceptor-binding&gt;\n&lt;\/assembly-descriptor&gt;\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S3346","title": "Expressions used in \"assert\" should not produce side effects","tags": ["cert"],"implementations": [{"key": "squid:S3346","language": "Java","title": "Expressions used in \"assert\" should not produce side effects","description": "<p>Since <code>assert<\/code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their\nexecution the evaluation of any logic required for correct program function.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nassert myList.remove(myList.get(0));  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/vwG7AQ\">CERT, EXP06-J.<\/a> - Expressions used in assertions must not produce side\n  effects <\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S3355","title": "Web applications should use validation filters","tags": ["owasp-a1","injection"],"implementations": [{"key": "squid:S3355","language": "Java","title": "Web applications should use validation filters","description": "<p>Specifying a validation filter for all input in your <code>web.xml<\/code> allows you to scrub all your HTTP parameters in one central place. To do\nso, you'll need to define a validator, and a filtering class that uses it, then set up the filter's use in <code>web.xml<\/code>.<\/p>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class ValidatingHttpRequest extends HttpServletRequestWrapper {\n  \/\/ ...\n}\n\npublic class ValidationFilter implements javax.servlet.Filter {\n  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {\n    chain.doFilter(new ValidatingHttpRequest( (HttpServletRequest)request ), response);\n  }\n}\n<\/pre>\n<p>and<\/p>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;\/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;\/filter-class&gt;\n  &lt;\/filter&gt;\n\n  &lt;filter-mapping&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;\/filter-name&gt;\n     &lt;url-pattern&gt;\/*&lt;\/url-pattern&gt;\n  &lt;\/filter-mapping&gt;\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1<\/a> - Injection <\/li>\n  <li> <a href=\"https:\/\/www.owasp.org\/index.php\/How_to_add_validation_logic_to_HttpServletRequest\">OWASP, How to add validation logic to\n  HttpServletRequest<\/a> <\/li>\n<\/ul>","severity": "Critical","tags": ["injection","owasp-a1"]}]},{"key": "S3358","title": "Ternary operators should not be nested","tags": ["confusing"],"implementations": [{"key": "squid:S3358","language": "Java","title": "Ternary operators should not be nested","description": "<p>Just because you <em>can<\/em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.<\/p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "S3398","title": "\"private\" methods called only by inner classes should be moved to those classes","tags": ["confusing"],"implementations": [{"key": "squid:S3398","language": "Java","title": "\"private\" methods called only by inner classes should be moved to those classes","description": "<p>When a <code>private<\/code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same\naccess to the outer class' members, but the outer class will be clearer and less cluttered.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  \/\/ Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n<\/pre>","severity": "Minor","tags": ["confusing"]}]},{"key": "S3400","title": "Methods should not return constants","tags": ["confusing"],"implementations": [{"key": "squid:S3400","language": "Java","title": "Methods should not return constants","description": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. <\/p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return<\/code> of a constant value. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic int getBestNumber() {\n  return 12;  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic static int bestNumber = 12;\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Methods with annotations, such as <code>@Override<\/code> and Spring's <code>@RequestMapping<\/code>, are ignored.<\/p>","severity": "Minor","tags": ["confusing"]}]},{"key": "S3403","title": "Strict equality operators should not be used with dissimilar types","tags": [],"implementations": [{"key": "javascript:S3403","language": "JavaScript","title": "Strict equality operators should not be used with dissimilar types","description": "<p>Comparing dissimilar types using the strict equality operators <code>===<\/code> and <code>!==<\/code> will always return the same value,\nrespectively <code>false<\/code> and <code>true<\/code>, because no type conversion is done before the comparison. Thus, such comparisons can only be\nbugs.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a === b) {  \/\/ Noncompliant; always false\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a == b) {\n  \/\/ ...\n}\n<\/pre>\n<p>or<\/p>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a === Number(b)) {\n  \/\/ ...\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3421","title": "Deprecated \"${pom}\" properties should not be used","tags": ["maven","obsolete"],"implementations": [{"key": "squid:S3421","language": "Java","title": "Deprecated \"${pom}\" properties should not be used","description": "<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect,\ndeprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated\nfeatures should be added, and all existing uses should be gradually removed.<\/p>\n<p>This rule raises an issue when <code>${pom.*<\/code>} properties are used in a pom.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;\/finalName&gt;  &lt;!-- Noncompliant --&gt;\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;\/finalName&gt;\n<\/pre>\n<p>or<\/p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;\/finalName&gt;\n<\/pre>","severity": "Minor","tags": ["maven","obsolete"]}]},{"key": "S3422","title": "Dependencies should not have \"system\" scope","tags": ["maven","lock-in"],"implementations": [{"key": "squid:S3422","language": "Java","title": "Dependencies should not have \"system\" scope","description": "<p><code>system<\/code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact\nin an environment that's not configured just like yours is, your code won't work. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;\/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;\/artifactId&gt;\n  &lt;version&gt;2.0&lt;\/version&gt;\n  &lt;scope&gt;system&lt;\/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;\/usr\/bin\/lib\/rt.jar&lt;\/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;\/dependency&gt;\n<\/pre>","severity": "Critical","tags": ["lock-in","maven"]}]},{"key": "S3437","title": "Value-based objects should not be serialized","tags": ["serialization","java8","lock-in"],"implementations": [{"key": "squid:S3437","language": "Java","title": "Value-based objects should not be serialized","description": "<p>According to the documentation,<\/p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization...\n<\/blockquote>\n<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:<\/p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = new Foo(0);\n<\/pre>\n<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:<\/p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = arr[0];\n<\/pre>\n<p>Serialization promises that on deserialization of <code>arr<\/code>, elements 0 and 1 <strong>will<\/strong> be aliased.<\/p>\n<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.<\/p>\n<p>This rule raises an issue when a <code>Serializable<\/code> class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the <code>java.time<\/code> package except <code>Clock<\/code>; the\ndate classes for alternate calendars: <code>HijrahDate<\/code>, <code>JapaneseDate<\/code>, <code>MinguaDate<\/code>, <code>ThaiBuddhistDate<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass implements Serializable {\n  private HijrahDate date;  \/\/ Noncompliant; mark this transient\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  \/\/ ...\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/lang\/doc-files\/ValueBased.html\">Value-based classes<\/a> <\/li>\n<\/ul>","severity": "Minor","tags": ["java8","lock-in","serialization"]}]},{"key": "S3438","title": "\"SingleConnectionFactory\" instances should be set to \"reconnectOnException\"","tags": ["spring"],"implementations": [{"key": "squid:S3438","language": "Java","title": "\"SingleConnectionFactory\" instances should be set to \"reconnectOnException\"","description": "<p>Use of a Spring <code>SingleConnectionFactory<\/code> without enabling the <code>reconnectOnException<\/code> setting will prevent automatic\nconnection recovery when the connection goes bad. <\/p>\n<p>That's because the <code>reconnectOnException<\/code> property defaults to <code>false<\/code>. As a result, even if the code that uses this\nconnection factory (Spring's <code>DefaultMessageListenerContainer<\/code> or your own code) has reconnect logic, that code won't work because the\n<code>SingleConnectionFactory<\/code> will act like a single-connection pool by preventing connection <code>close<\/code> calls from actually closing\nanything. As a result, subsequent factory <code>create<\/code> operations will just hand back the original broken <code>Connection<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" \/&gt;\n &lt;\/bean&gt;\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\" p:reconnectOnException=\"true\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" \/&gt;\n &lt;\/bean&gt;\n<\/pre>\n<p>or<\/p>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" \/&gt;\n   &lt;property name=\"reconnectOnException\"&gt;&lt;value&gt;true&lt;\/value&gt;&lt;\/property&gt;\n &lt;\/bean&gt;\n<\/pre>","severity": "Major","tags": ["spring"]}]},{"key": "S3457","title": "Printf-style format strings should be used correctly","tags": ["cert","confusing"],"implementations": [{"key": "squid:S3457","language": "Java","title": "Printf-style format strings should be used correctly","description": "<p>Because <code>printf<\/code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of <code>printf<\/code>-style format strings to their\narguments when calling the <code>format(...)<\/code> methods of <code>java.util.Formatter<\/code>, <code>java.lang.String<\/code>,\n<code>java.io.PrintStream<\/code>, <code>MessageFormat<\/code>, and <code>java.io.PrintWriter<\/code> classes and the <code>printf(...)<\/code> methods of\n<code>java.io.PrintStream<\/code> or <code>java.io.PrintWriter<\/code> classes. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  \/\/Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   \/\/Noncompliant; the second argument '2' is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  \/\/Noncompliant; the third argument '3' is unused\nString.format(\"First Line\\n\");   \/\/Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   \/\/Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); \/\/ Noncompliant\nString s = String.format(\"string without arguments\"); \/\/ Noncompliant\n\nMessageFormat.format(\"Result '{0}'.\", value); \/\/ Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  \/\/ Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); \/\/ Noncompliant; no need to call toString() on objects\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result '{0}'  =  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/wQA1\">CERT, FIO47-C.<\/a> - Use valid format strings <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/e4EyAQ\">CERT, FIO00-CPP.<\/a> - Take care when creating format strings <\/li>\n<\/ul>","severity": "Major","tags": ["cert","confusing"]}]},{"key": "S3500","title": "Attempts should not be made to update \"const\" variables","tags": ["es2015"],"implementations": [{"key": "javascript:S3500","language": "JavaScript","title": "Attempts should not be made to update \"const\" variables","description": "<p>Variables declared with <code>const<\/code> cannot be modified. Unfortunately, attempts to do so don't always raise an error; in a non-ES2015\nenvironment, such an attempt might simply be ignored.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nconst pi = \"yes, please\";\npi = 3.14;  \/\/ Noncompliant\n<\/pre>","severity": "Major","tags": ["es2015"]}]},{"key": "S3516","title": "Methods returns should not be invariant","tags": [],"implementations": [{"key": "squid:S3516","language": "Java","title": "Methods returns should not be invariant","description": "<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.<\/p>\n<p>This rule raises an issue when a method contains several <code>return<\/code> statements that all return the same value.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nint foo(boolean a) {\n  int b = 12;\n  if(a) {\n    return b;\n  }\n  return b;  \/\/ Noncompliant\n}\n<\/pre>","severity": "Blocker","tags": []},{"key": "javascript:S3516","language": "JavaScript","title": "Function returns should not be invariant","description": "<p>When a function is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is likely a mistake.<\/p>\n<p>This rule raises an issue when a function contains several <code>return<\/code> statements that all return the same value.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction foo(a) {  \/\/ Noncompliant\n  let b = 12;\n  if (a) {\n    return b;\n  }\n  return b;\n}\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S3518","title": "Zero should not be a possible denominator","tags": ["cwe","denial-of-service","cert"],"implementations": [{"key": "squid:S3518","language": "Java","title": "Zero should not be a possible denominator","description": "<p>If the denominator to a division or modulo operation is zero it would result in a fatal error.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    \/\/ ..\n    z = 3;\n  } else {\n    \/\/ ..\n  }\n  z = 1 \/ z; \/\/ Noncompliant, possible division by zero\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    \/\/ ..\n    z = 3;\n  } else {\n    \/\/ ..\n    z = 1;\n  }\n  z = 1 \/ z;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/cwe.mitre.org\/data\/definitions\/369.html\">MITRE, CWE-369<\/a> - Divide by zero <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/KAGyAw\">CERT, NUM02-J.<\/a> - Ensure that division and remainder operations do not\n  result in divide-by-zero errors <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/cAI\">CERT, INT33-C.<\/a> - Ensure that division and remainder operations do not result\n  in divide-by-zero errors <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe","denial-of-service"]}]},{"key": "S3523","title": "Function constructors should not be used","tags": ["clumsy"],"implementations": [{"key": "javascript:S3523","language": "JavaScript","title": "Function constructors should not be used","description": "<p>In addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructor's string\narguments similar to the way <code>eval<\/code> works, which could expose your program to random, unintended code which can be both slow and a security\nrisk.<\/p>\n<p>In general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5's built-in JSON functions or\na dedicated library.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar obj =  new Function(\"return \" + data)();  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar obj = JSON.parse(data);\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Function calls where the argument is a string literal (e.g. <code>(Function('return this'))()<\/code>) are ignored. <\/p>","severity": "Critical","tags": ["clumsy"]}]},{"key": "S3531","title": "Generators should \"yield\" something","tags": ["api-design","es2015"],"implementations": [{"key": "javascript:S3531","language": "JavaScript","title": "Generators should \"yield\" something","description": "<p>A generator without a <code>yield<\/code> statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code\nwill always be empty. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction* myGen(a, b) {  \/\/ Noncompliant\n  let answer = 0;\n  answer += a * b;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction* myGen(a, b) {\n  let answer = 0;\n  while (answer &lt; 42) {\n    answer += a * b;\n    yield answer;\n  }\n}\n<\/pre>","severity": "Major","tags": ["api-design","es2015"]}]},{"key": "S3579","title": "Array indexes should be numeric","tags": ["bad-practice"],"implementations": [{"key": "javascript:S3579","language": "JavaScript","title": "Array indexes should be numeric","description": "<p>JavaScript is flexible enough to allow you to store values in an array with either numeric or named indexes. That is, it supports associative\narrays. But creating and populating an object in JavaScript is just as easy as an array, and more reliable if you need named members.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nlet arr = [];\narr[0] = 'a';\narr['name'] = 'bob';  \/\/ Noncompliant\narr[1] = 'foo';\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nlet obj = {\n  name: 'bob',\n  arr: ['a', 'foo']\n};\n<\/pre>","severity": "Major","tags": ["bad-practice"]}]},{"key": "S3599","title": "Double Brace Initialization should not be used","tags": ["leak"],"implementations": [{"key": "squid:S3599","language": "Java","title": "Double Brace Initialization should not be used","description": "<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when there's no leak, DBI is so obscure that it's bound to\nconfuse most maintainers. <\/p>\n<p>For collections, use <code>Arrays.asList<\/code> instead, or explicitly add each item directly to the collection.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nMap source = new HashMap(){{ \/\/ Noncompliant\n    put(\"firstName\", \"John\");\n    put(\"lastName\", \"Smith\");\n}};\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nMap source = new HashMap();\n\/\/ ...\nsource.put(\"firstName\", \"John\");\nsource.put(\"lastName\", \"Smith\");\n\/\/ ...\n<\/pre>","severity": "Minor","tags": ["leak"]}]},{"key": "S3616","title": "Comma and logical OR operators should not be used in switch cases","tags": [],"implementations": [{"key": "javascript:S3616","language": "JavaScript","title": "Comma and logical OR operators should not be used in switch cases","description": "<p>The comma operator (<code>,<\/code>) evaluates its operands, from left to right, and returns the second one. That's useful in some situations, but\njust wrong in a <code>switch<\/code> <code>case<\/code>. You may think you're compactly handling multiple values in the case, but only the last one in\nthe comma-list will ever be handled. The rest will fall through to the default.<\/p>\n<p>Similarly the logical OR operator (<code>||<\/code>) will not work in a <code>switch<\/code> <code>case<\/code>, only the first argument will be\nconsidered at execution time.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch a {\n  case 1,2:  \/\/ Noncompliant; only 2 is ever handled by this case\n    doTheThing(a);\n  case 3 || 4: \/\/ Noncompliant; only '3' is handled\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\"Neener, neener!\");  \/\/ this happens when a==1 or a == 4\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch a {\n  case 1:\n  case 2:\n    doTheThing(a);\n  case 3:\n  case 4:\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\"Neener, neener!\");\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3631","title": "\"Arrays.stream\" should be used for primitive arrays","tags": ["performance"],"implementations": [{"key": "squid:S3631","language": "Java","title": "\"Arrays.stream\" should be used for primitive arrays","description": "<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()<\/code> and <code>Arrays.stream(array)<\/code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList<\/code> will force the construction of a list of boxed types, and then use\n<em>that<\/em> last as a stream. On the other hand, <code>Arrays.stream<\/code> uses the appropriate primitive stream type (<code>IntStream<\/code>,\n<code>LongStream<\/code>, <code>DoubleStream<\/code>) when applicable, with much better performance.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() \/\/ Noncompliant\n    .filter(...)\n    .forEach(...);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S3655","title": "Optional value should only be accessed after calling isPresent()","tags": ["cwe"],"implementations": [{"key": "squid:S3655","language": "Java","title": "Optional value should only be accessed after calling isPresent()","description": "<p><code>Optional<\/code> value can hold either a value or not. The value held in the <code>Optional<\/code> can be accessed using the\n<code>get()<\/code> method, but it will throw a <\/p>\n<p><code>NoSuchElementException<\/code> if there is no value present. To avoid the exception, calling the <code>isPresent()<\/code> method should always\nbe done before any call to <code>get()<\/code>.<\/p>\n<p>Alternatively, note that other methods such as <code>orElse(...)<\/code>, <code>orElseGet(...)<\/code> or <code>orElseThrow(...)<\/code> can be used\nto specify what to do with an empty <code>Optional<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n\/\/ ...\n\nString stringValue = value.get(); \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n\/\/ ...\n\nif (value.isPresent()) {\n  String stringValue = value.get();\n}\n<\/pre>\n<p>or<\/p>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n\/\/ ...\n\nString stringValue = value.orElse(\"default\");\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/cwe.mitre.org\/data\/definitions\/476.html\">MITRE, CWE-476<\/a> - NULL Pointer Dereference <\/li>\n<\/ul>","severity": "Major","tags": ["cwe"]}]},{"key": "S3686","title": "Functions should not be called both with and without \"new\"","tags": [],"implementations": [{"key": "javascript:S3686","language": "JavaScript","title": "Functions should not be called both with and without \"new\"","description": "<p>Constructor functions, which create new object instances, must only be called with <code>new<\/code>. Non-constructor functions must not. Mixing\nthese two usages could lead to unexpected results at runtime.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction getNum() {\n  return 5;\n}\n\nfunction Num(numeric, alphabetic) {\n  this.numeric = numeric;\n  this.alphabetic = alphabetic;\n}\n\nvar myFirstNum = getNum();\nvar my2ndNum = new getNum();  \/\/ Noncompliant. An empty object is returned, NOT 5\n\nvar myNumObj1 = new Num();\nvar myNumObj2 = Num();  \/\/ Noncompliant. undefined is returned, NOT an object\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3699","title": "The output of functions that don't return anything should not be used","tags": [],"implementations": [{"key": "javascript:S3699","language": "JavaScript","title": "The output of functions that don't return anything should not be used","description": "<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n\"result\" to a variable is probably a bug because such functions return <code>undefined<\/code>, which is probably not what was intended.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction foo() {\n}\n\na = foo();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction foo() {\n}\n\nfoo();\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3725","title": "Java 8's \"Files.exists\" should not be used","tags": ["performance","java8"],"implementations": [{"key": "squid:S3725","language": "Java","title": "Java 8's \"Files.exists\" should not be used","description": "<p>The <code>Files.exists<\/code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don't actually exist. <\/p>\n<p>The same goes for <code>Files.notExists<\/code>, <code>Files.isDirectory<\/code> and <code>Files.isRegularFile<\/code>.<\/p>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is not 8.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nPath myPath;\nif(java.nio.Files.exists(myPath)) {  \/\/ Noncompliant\n \/\/ do something\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nPath myPath;\nif(myPath.toFile().exists())) {\n \/\/ do something\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> https:\/\/bugs.openjdk.java.net\/browse\/JDK-8153414 <\/li>\n  <li> https:\/\/bugs.openjdk.java.net\/browse\/JDK-8154077 <\/li>\n<\/ul>","severity": "Major","tags": ["java8","performance"]}]},{"key": "S3776","title": "Cognitive Complexity of methods should not be too high","tags": ["brain-overload"],"implementations": [{"key": "squid:S3776","language": "Java","title": "Cognitive Complexity of methods should not be too high","description": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/redirect.sonarsource.com\/doc\/cognitive-complexity.html\">Cognitive Complexity<\/a> <\/li>\n<\/ul>","severity": "Critical","tags": ["brain-overload"]},{"key": "php:S3776","language": "PHP","title": "Cognitive Complexity of functions should not be too high","description": "<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/redirect.sonarsource.com\/doc\/cognitive-complexity.html\">Cognitive Complexity<\/a> <\/li>\n<\/ul>","severity": "Critical","tags": ["brain-overload"]},{"key": "python:S3776","language": "Python","title": "Cognitive Complexity of functions should not be too high","description": "<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/redirect.sonarsource.com\/doc\/cognitive-complexity.html\">Cognitive Complexity<\/a> <\/li>\n<\/ul>","severity": "Critical","tags": ["brain-overload"]}]},{"key": "S3782","title": "Arguments to built-in functions should match documented types","tags": [],"implementations": [{"key": "javascript:S3782","language": "JavaScript","title": "Arguments to built-in functions should match documented types","description": "<p>The types of the arguments to built-in functions are specified in the JavaScript language specifications. Calls to these functions should conform\nto the documented types, otherwise the result will most likely not be what was expected (e.g.: the call would always return <code>false<\/code>).<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nconst isTooSmall = Math.abs(x &lt; 0.0042);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nconst isTooSmall = Math.abs(x) &lt; 0.0042;\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3785","title": "\"in\" should not be used with primitive types","tags": [],"implementations": [{"key": "javascript:S3785","language": "JavaScript","title": "\"in\" should not be used with primitive types","description": "<p>The <code>in<\/code> operator tests whether the specified property is in the specified object.<\/p>\n<p>If the right operand is a of primitive type (i.e., not an object) the <code>in<\/code> operator raises a <code>TypeError<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar x = \"Foo\";\n\"length\" in x; \/\/ Noncompliant: TypeError\n0 in x;        \/\/ Noncompliant: TypeError\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar x = new String(\"Foo\");\n\"length\" in x;    \/\/ true\n0 in x;           \/\/ true\n\"foobar\" in x;    \/\/ false\n<\/pre>","severity": "Critical","tags": []}]},{"key": "S3796","title": "Callbacks of array methods should have return statements","tags": [],"implementations": [{"key": "javascript:S3796","language": "JavaScript","title": "Callbacks of array methods should have return statements","description": "<p>Arrays in JavaScript have several methods for filtering, mapping or folding that require a callback. Not having a return statement in such a\ncallback function is most likely a mistake.<\/p>\n<p>This rule applies for the following methods of an array:<\/p>\n<ul>\n  <li> <code>Array.from<\/code> <\/li>\n  <li> <code>Array.prototype.every<\/code> <\/li>\n  <li> <code>Array.prototype.filter<\/code> <\/li>\n  <li> <code>Array.prototype.find<\/code> <\/li>\n  <li> <code>Array.prototype.findIndex<\/code> <\/li>\n  <li> <code>Array.prototype.map<\/code> <\/li>\n  <li> <code>Array.prototype.reduce<\/code> <\/li>\n  <li> <code>Array.prototype.reduceRight<\/code> <\/li>\n  <li> <code>Array.prototype.some<\/code> <\/li>\n  <li> <code>Array.prototype.sort<\/code> <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar merged = arr.reduce(function(a, b) {\n  a.concat(b);\n}); \/\/ Noncompliant: No return statement\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar merged = arr.reduce(function(a, b) {\n  return a.concat(b);\n});\n<\/pre>","severity": "Blocker","tags": []}]},{"key": "S3799","title": "Destructuring patterns should not be empty","tags": [],"implementations": [{"key": "javascript:S3799","language": "JavaScript","title": "Destructuring patterns should not be empty","description": "<p>Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible\nto create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the\nintent was to use a default value instead.<\/p>\n<p>This rule raises an issue when empty destructuring pattern is used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar {a: {}, b} = myObj; \/\/ Noncompliant\nfunction foo({first: [], second}) { \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar {a = {}, b} = myObj;\nfunction foo({first = [], second}) {\n  \/\/ ...\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3812","title": "Results of \"in\" and \"instanceof\" should be negated rather than operands","tags": [],"implementations": [{"key": "javascript:S3812","language": "JavaScript","title": "Results of \"in\" and \"instanceof\" should be negated rather than operands","description": "<p>Mixing up the order of operations will almost always yield unexpected results. For instance, consider the outcome of absentmindedly kissing the dog\nand patting your spouse on the head. <\/p>\n<p>Similarly, mis-applied negation will also yield bad results. For instance consider the difference between <code>\\!key in dict<\/code> and\n<code>\\!(key in dict)<\/code>. The first looks for a boolean value (<code>!key<\/code>) in <code>dict<\/code>, and the other looks for a string and\ninverts the result. <code>\\!obj instanceof SomeClass<\/code> has the same problem.<\/p>\n<p>This rule raises an issue when the left operand of an <code>in<\/code> or <code>instanceof<\/code> operator is negated.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (!\"prop\" in myObj) {  \/\/ Noncompliant;  \"in\" operator is checking property \"false\"\n  doTheThing();  \/\/ this block will be never executed\n}\n\nif (!foo instanceof MyClass) {  \/\/ Noncompliant; \"!foo\" returns a boolean, which is not an instance of anything\n  doTheOtherThing();  \/\/ this block is never executed\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (!(\"prop\" in myObj)) {\n  doTheThing();\n}\n\nif (!(foo instanceof MyClass)) {\n  doTheOtherThing();\n}\n<\/pre>","severity": "Critical","tags": []}]},{"key": "S3828","title": "\"yield\" expressions should not be used outside generators","tags": ["es2015"],"implementations": [{"key": "javascript:S3828","language": "JavaScript","title": "\"yield\" expressions should not be used outside generators","description": "<p>The <code>yield<\/code> keyword is used in a generator function to return an <code>IteratorResult<\/code> to the caller. It has no other purpose, and\nif found outside such a function will raise a <code>ReferenceError<\/code> because it is then treated as an identifier.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction foo() {\n  for (var i = 0; i &lt; 5; i++) {\n    yield i * 2;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction * foo() {\n  for (var i = 0; i &lt; 5; i++) {\n    yield i * 2;\n  }\n}\n<\/pre>","severity": "Blocker","tags": ["es2015"]}]},{"key": "S3834","title": "\"Symbol\" should not be used as a constructor","tags": ["es2015"],"implementations": [{"key": "javascript:S3834","language": "JavaScript","title": "\"Symbol\" should not be used as a constructor","description": "<p><code>Symbol<\/code> is a primitive type introduced in ECMAScript2015. Its instances are mainly used as unique property keys.<\/p>\n<p>An instance can only be created by using <code>Symbol<\/code> as a function. Using <code>Symbol<\/code> with the <code>new<\/code> operator will raise\na <code>TypeError<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nconst sym = new Symbol(\"foo\");   \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nconst sym = Symbol(\"foo\");\n<\/pre>","severity": "Critical","tags": ["es2015"]}]},{"key": "S3854","title": "super() should be invoked appropriately","tags": [],"implementations": [{"key": "javascript:S3854","language": "JavaScript","title": "super() should be invoked appropriately","description": "<p>There are situations where <code>super()<\/code> must be invoked and situations where <code>super()<\/code> cannot be invoked.<\/p>\n<p>The basic rule is: a constructor in a non-derived class cannot invoke <code>super()<\/code>; a constructor in a derived class must invoke\n<code>super()<\/code>.<\/p>\n<p>Furthermore:<\/p>\n<p>- <code>super()<\/code> must be invoked before the <code>this<\/code> and <code>super<\/code> keywords can be used.<\/p>\n<p>- <code>super()<\/code> must be invoked with the same number of arguments as the base class' constructor.<\/p>\n<p>- <code>super()<\/code> can only be invoked in a constructor - not in any other method.<\/p>\n<p>- <code>super()<\/code> cannot be invoked multiple times in the same constructor.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Animal {\n  constructor() {\n    super();         \/\/ Noncompliant, super() cannot be invoked in a base class\n  }\n\n  doSomething() {\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    this.name = name;\n    super.doSomething();\n    super();         \/\/ Noncompliant, super() must be invoked before \"this\" or \"super\" is used\n  }\n\n  doSomething() {\n    super();         \/\/ Noncompliant, super() cannot be invoked outside of a constructor\n  }\n}\n\nclass Labrador extends Dog {\n  constructor(name) {\n    super();         \/\/ Noncompliant, super() must be invoked with one argument\n  }\n}\n\nclass GermanShepherd extends Dog {\n  constructor(name) {\n  }                  \/\/ Noncompliant, super() must be invoked in constructor of derived class\n}\n\nclass FilaBrasileiro extends Dog {\n  constructor(name) {\n    super(name);\n    super(name);    \/\/ Noncompliant, super() can only be invoked once\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Animal {\n  constructor() {\n  }\n\n  doSomething() {\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super();\n    this.name = name;\n    super.doSomething();\n  }\n\n  doSomething() {\n  }\n}\n\nclass Labrador extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n\nclass GermanShepherd extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n\nclass FilaBrasileiro extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n<\/pre>\n<h2>Known Limitations<\/h2>\n<ul>\n  <li>False negatives: some issues are not raised if the base class is not defined in the same file as the current class.<\/li>\n<\/ul>","severity": "Critical","tags": []}]},{"key": "S3878","title": "Arrays should not be created for varargs parameters","tags": ["clumsy"],"implementations": [{"key": "squid:S3878","language": "Java","title": "Arrays should not be created for varargs parameters","description": "<p>There's no point in creating an array solely for the purpose of passing it as a varargs (<code>...<\/code>) argument; varargs <em>is<\/em> an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...<\/code>\nis expected makes the intent ambiguous: Is the array supposed to be one object ora collection of objects?<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void callTheThing() {\n  \/\/...\n  doTheThing(new String[] { \"s1\", \"s2\"});  \/\/ Noncompliant: unnecessary\n  doTheThing(new String[12]);  \/\/ Compliant\n  doTheOtherThing(new String[8]);  \/\/ Noncompliant: ambiguous\n  \/\/ ...\n}\n\npublic void doTheThing (String ... args) {\n  \/\/ ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void callTheThing() {\n  \/\/...\n  doTheThing(\"s1\", \"s2\");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   \/\/ ...\n}\n\npublic void doTheThing (String ... args) {\n  \/\/ ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  \/\/ ...\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S3923","title": "All branches in a conditional structure should not have exactly the same implementation","tags": [],"implementations": [{"key": "squid:S3923","language": "Java","title": "All branches in a conditional structure should not have exactly the same implementation","description": "<p>Having all branches in a <code>switch<\/code> or <code>if<\/code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch<\/code>\/<code>if<\/code> chain at all. Note that this rule does not\napply to <code>if<\/code> chains without <code>else<\/code>s, or to <code>switch<\/code>es without <code>default<\/code> clauses.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (b == 0) {  \/\/ Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  \/\/ Noncompliant\n\nswitch (i) {  \/\/ Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n<\/pre>","severity": "Major","tags": []},{"key": "javascript:S3923","language": "JavaScript","title": "All branches in a conditional structure should not have exactly the same implementation","description": "<p>Having all branches in a <code>switch<\/code> or <code>if<\/code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch<\/code>\/<code>if<\/code> chain at all. Note that this rule does not\napply to <code>if<\/code> chains without <code>else<\/code>s, or to <code>switch<\/code>es without <code>default<\/code> clauses.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (b == 0) {  \/\/ Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nlet a = (b == 0) ? getValue() : getValue();   \/\/ Noncompliant\n\nswitch (i) {  \/\/ Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3984","title": "Exception should not be created without being thrown","tags": [],"implementations": [{"key": "squid:S3984","language": "Java","title": "Exception should not be created without being thrown","description": "<p>Creating a new <code>Throwable<\/code> without actually throwing it is useless and is probably due to a mistake.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n<\/pre>","severity": "Major","tags": []}]},{"key": "S3985","title": "Unused \"private\" classes should be removed","tags": ["unused"],"implementations": [{"key": "squid:S3985","language": "Java","title": "Unused \"private\" classes should be removed","description": "<p><code>private<\/code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Foo\n{\n  ...\n  private class MyUnusedPrivateClass {...} \/\/ Noncompliant\n}\n<\/pre>","severity": "Major","tags": ["unused"]}]},{"key": "S3986","title": "Week Year (\"YYYY\") should not be used for date formatting","tags": ["suspicious"],"implementations": [{"key": "squid:S3986","language": "Java","title": "Week Year (\"YYYY\") should not be used for date formatting","description": "<p>Few developers are aware of the difference between <code>Y<\/code> for \"Week year\" and <code>y<\/code> for Year when formatting and parsing a date\nwith <code>SimpleDateFormat<\/code>. That's likely because for most dates, Week year and Year are the same, so testing at any time other than the first\nor last week of the year will yield the same value for both <code>y<\/code> and <code>Y<\/code>. But in the last week of December and the first week of\nJanuary, you may get unexpected results.<\/p>\n<p>According to the <a href=\"http:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/GregorianCalendar.html#week_year\">Javadoc<\/a>:<\/p>\n<blockquote>\n  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.\n  Therefore, the first and last days of a week year may have different calendar year values.<\/p>\n  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible\n  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar\n  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three\n  days of 1998 then are part of week 53 of 1997 and their week year is 1997.<\/p>\n<\/blockquote>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy\/MM\/dd\").parse(\"2015\/12\/31\");\nString result = new SimpleDateFormat(\"YYYY\/MM\/dd\").format(date);   \/\/Noncompliant; yields '2016\/12\/31'\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy\/MM\/dd\").parse(\"2015\/12\/31\");\nString result = new SimpleDateFormat(\"yyyy\/MM\/dd\").format(date);   \/\/Yields '2015\/12\/31' as expected\n<\/pre>\n<h2>Exceptions<\/h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy\/MM\/dd\").parse(\"2015\/12\/31\");\nString result = new SimpleDateFormat(\"YYYY-ww\").format(date);  \/\/compliant, 'Week year' is used along with 'Week of year'. result = '2016-01'\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "S899","title": "Return values should not be ignored when they contain the operation status code","tags": ["cwe","error-handling","misra","cert"],"implementations": [{"key": "squid:S899","language": "Java","title": "Return values should not be ignored when they contain the operation status code","description": "<p>When the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed\nsuccessfully.<\/p>\n<p>This rule raises an issue when the return values of the following are ignored:<\/p>\n<ul>\n  <li> <code>java.io.File<\/code> operations that return a status code (except <code>mkdirs<\/code>) <\/li>\n  <li> <code>Iterator.hasNext()<\/code> <\/li>\n  <li> <code>Enumeration.hasMoreElements()<\/code> <\/li>\n  <li> <code>Lock.tryLock()<\/code> <\/li>\n  <li> non-void <code>Condition.await*<\/code> methods <\/li>\n  <li> <code>CountDownLatch.await(long, TimeUnit)<\/code> <\/li>\n  <li> <code>Semaphore.tryAcquire<\/code> <\/li>\n  <li> <code>BlockingQueue<\/code>: <code>offer<\/code>, <code>remove<\/code>, <code>drainTo<\/code>, <\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  file.delete();  \/\/ Noncompliant\n  \/\/ ...\n  lock.tryLock(); \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  if (!lock.tryLock()) {\n    \/\/ lock failed; take appropriate action\n  }\n  if (!file.delete()) {\n    \/\/ file delete failed; take appropriate action\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 16.10 - If a function returns error information, then that error information shall be tested <\/li>\n  <li> MISRA C++:2008, 0-1-7 - The value returned by a function having a non-void return type that is not an overloaded operator shall always be used.\n  <\/li>\n  <li> MISRA C:2012, Dir. 4.7 - If a function returns error information, then that error information shall be tested <\/li>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/w4C4Ag\">CERT, ERR33-C.<\/a> - Detect and handle standard library errors <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/iIBfBw\">CERT, POS54-C.<\/a> - Detect and handle POSIX library errors <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/9gEqAQ\">CERT, EXP00-J.<\/a> - Do not ignore values returned by methods <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/9YIRAQ\">CERT, EXP12-C.<\/a> - Do not ignore values returned by functions <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/eoAyAQ\">CERT, EXP12-CPP.<\/a> - Do not ignore values returned by functions or methods\n  <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/toHWAw\">CERT, FIO02-J.<\/a> - Detect and handle file-related errors <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/754\">MITRE, CWE-754<\/a> - Improper Check for Unusual Exceptional Conditions <\/li>\n<\/ul>","severity": "Minor","tags": ["cert","cwe","error-handling","misra"]}]},{"key": "S905","title": "Non-empty statements should change control flow or have at least one side-effect","tags": ["cwe","misra","cert","unused"],"implementations": [{"key": "javascript:S905","language": "JavaScript","title": "Non-empty statements should change control flow or have at least one side-effect","description": "<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;<\/code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\na == 1; \/\/ Noncompliant; was assignment intended?\nvar msg = \"Hello, \"\n  \"World!\"; \/\/ Noncompliant; have we forgotten '+' operator on previous line?\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/482\">MITRE, CWE-482<\/a> - Comparing instead of Assigning <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","unused"]},{"key": "php:S905","language": "PHP","title": "Non-empty statements should change control flow or have at least one side-effect","description": "<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;<\/code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$a == 1; \/\/ Noncompliant; was assignment intended?\n$a &lt; $b; \/\/ Noncompliant; have we forgotten to assign the result to a variable?\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/482\">MITRE, CWE-482<\/a> - Comparing instead of Assigning <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP.<\/a> - Detect and remove code that has no effect <\/li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","unused"]}]},{"key": "S907","title": "\"goto\" statement should not be used","tags": ["brain-overload","misra"],"implementations": [{"key": "php:S907","language": "PHP","title": "\"goto\" statement should not be used","description": "<p><code>goto<\/code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas <code>if<\/code>, <code>for<\/code>, <code>while<\/code>, <code>continue<\/code> or <code>break<\/code> should be used instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$i = 0;\nloop:\n  echo(\"i = $i\");\n  $i++;\n  if ($i &lt; 10){\n    goto loop;\n  }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++){\n  echo(\"i = $i\");\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. <\/li>\n  <li> MISRA C:2012, 15.1 - The goto statement should not be used <\/li>\n<\/ul>","severity": "Major","tags": ["brain-overload","misra"]}]},{"key": "S930","title": "Function calls should not pass extra arguments","tags": ["cwe","misra","cert"],"implementations": [{"key": "javascript:S930","language": "JavaScript","title": "Function calls should not pass extra arguments","description": "<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function\nexecution.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction say(a, b) {\n  print(a + \" \" + b);\n}\n\nsay(\"hello\", \"world\", \"!\"); \/\/ Noncompliant; last argument is not used\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>No issue is reported when <code>arguments<\/code> is used in the body of the function being called.<\/p>\n<pre>\nfunction doSomething(a, b) {\n  compute(arguments);\n}\n\ndoSomething(1, 2, 3) \/\/ Compliant\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/628.html\">MITRE, CWE-628<\/a> - Function Call with Incorrectly Specified Arguments <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/LoAg\">CERT, DCL07-C.<\/a> - Include the appropriate type information in function\n  declarators <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/VQBc\">CERT, EXP37-C.<\/a> - Call functions with the correct number and type of arguments\n  <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe","misra"]}]},{"key": "SwitchLastCaseIsDefaultCheck","title": "\"switch\" statements should end with \"default\" clauses","tags": ["cwe","misra","cert"],"implementations": [{"key": "squid:SwitchLastCaseIsDefaultCheck","language": "Java","title": "\"switch\" statements should end with \"default\" clauses","description": "<p>The requirement for a final <code>default<\/code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken. When the <code>switch<\/code> covers all current values of an <code>enum<\/code> - and especially when it\ndoesn't - a <code>default<\/code> case should still be used because there is no guarantee that the <code>enum<\/code> won't be extended.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (param) {  \/\/missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: \/\/ default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>If the <code>switch<\/code> parameter is an <code>Enum<\/code> and if all the constants of this enum are used in the <code>case<\/code> statements,\nthen no <code>default<\/code> clause is expected.<\/p>\n<p>Example:<\/p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used. <\/li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause <\/li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. <\/li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause <\/li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed <\/li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch<\/em> statement shall have a <em>default<\/em> label <\/li>\n  <li> MISRA C:2012, 16.5 - A <em>default<\/em> label shall appear as either the first or the last <em>switch label<\/em> of a <em>switch<\/em> statement\n  <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/478.html\">MITRE, CWE-478<\/a> - Missing Default Case in Switch Statement <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/YgE\">CERT, MSC01-C.<\/a> - Strive for logical completeness <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/JoIyAQ\">CERT, MSC01-CPP.<\/a> - Strive for logical completeness <\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe","misra"]}]},{"key": "UnreachableCode","title": "Jump statements should not be followed by other statements","tags": ["cwe","misra","cert","unused"],"implementations": [{"key": "javascript:UnreachableCode","language": "JavaScript","title": "Jump statements should not be followed by other statements","description": "<p>Jump statements (<code>return<\/code>, <code>break<\/code> and <code>continue<\/code>) and <code>throw<\/code> expressions move control flow out of the\ncurrent code block. Typically, any statements in a block that come after a jump or <code>throw<\/code> are simply wasted keystrokes lying in wait to\nconfuse the unwary. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction fun(a) {\n  var i = 10;\n  return i + a;\n  i++;             \/\/ Noncompliant; this is never executed\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction fun(int a) {\n  var i = 10;\n  return i + a;\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule ignores unreachable <code>break<\/code> statements in <code>switch<\/code> clauses.<\/p>\n<pre>\nswitch (x) {\n  case 42:\n     return 43;\n     break;   \/\/ Compliant\n  default:\n    doSomething();\n}\n<\/pre>\n<p>Hoisted variables declarations without initialization are always considered reachable.<\/p>\n<pre>\nfunction bar() {\n  return x = function() {\n    x.foo = 42;\n  }\n  var x;\n}\n<\/pre>\n<h2>See<\/h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code <\/li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code <\/li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code <\/li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code <\/li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code <\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/561.html\">MITRE, CWE-561<\/a> - Dead Code <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/uQCSBg\">CERT, MSC56-J.<\/a> - Detect and remove superfluous code and values <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C.<\/a> - Detect and remove code that has no effect or is never\n  executed <\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/OYIyAQ\">CERT, MSC07-CPP.<\/a> - Detect and remove dead code <\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","unused"]}]},{"key": "UnusedPrivateMethod","title": "Unused \"private\" methods should be removed","tags": ["cert","unused"],"implementations": [{"key": "squid:UnusedPrivateMethod","language": "Java","title": "Unused \"private\" methods should be removed","description": "<p><code>private<\/code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.<\/p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private<\/code> methods that are only\naccessed using the reflection API.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     \/\/Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  \/\/Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  \/\/Compliant, relates to the java serialization mechanism\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     \/\/Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  \/\/Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  \/\/Compliant, relates to the java serialization mechanism\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>This rule doesn't raise any issue on annotated methods.<\/p>\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/OYIyAQ\">CERT, MSC07-CPP.<\/a> - Detect and remove dead code <\/li>\n<\/ul>","severity": "Major","tags": ["cert","unused"]}]},{"key": "UnusedVariable","title": "Unused local variables and functions should be removed","tags": ["unused"],"implementations": [{"key": "javascript:UnusedVariable","language": "JavaScript","title": "Unused local variables and functions should be removed","description": "<p>If a local variable or a local function is declared but not used, it is dead code and should be removed. Doing so will improve maintainability\nbecause developers will not wonder what the variable or function is used for.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  var seconds = 0;   \/\/ seconds is never used\n  return hours * 60;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n<\/pre>","severity": "Minor","tags": ["unused"]}]},{"key": "UselessImportCheck","title": "Useless imports should be removed","tags": ["unused"],"implementations": [{"key": "squid:UselessImportCheck","language": "Java","title": "Useless imports should be removed","description": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.<\/p>\n<p>Unused and useless imports should not occur if that is the case.<\/p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        \/\/ Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    \/\/ Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            \/\/ Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    \/\/ Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.<\/p>","severity": "Minor","tags": ["unused"]}]},{"key": "UselessParenthesesCheck","title": "Redundant pairs of parentheses should be removed","tags": ["confusing"],"implementations": [{"key": "squid:UselessParenthesesCheck","language": "Java","title": "Redundant pairs of parentheses should be removed","description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nint x = (y \/ 2 + 1);   \/\/Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  \/\/ Noncompliant\n  \/\/...\n}\n\nreturn ((x + 1));  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nint x = (y \/ 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  \/\/...\n}\n\nreturn (x + 1);\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "WithStatement","title": "\"with\" statements should not be used","tags": [],"implementations": [{"key": "javascript:WithStatement","language": "JavaScript","title": "\"with\" statements should not be used","description": "<p>The use of the <code>with<\/code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against\n<code>with<\/code>.<\/p>\n<p>Using <code>with<\/code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with<\/code> to access\nsome property not already set in the object, and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting\nvariables there. Since the effects of <code>with<\/code> are entirely dependent on the object passed to it, <code>with<\/code> can be dangerously\nunpredictable, and should never be used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nwith (foo) {  \/\/ Noncompliant\n  y = 4;  \/\/ updates foo.x\n  x = 3;  \/\/ does NOT add a foo.x property; updates x var in outer scope\n}\nprint(foo.x + \" \" + x); \/\/ shows: undefined 3\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nfoo.y = 4;\nfoo.x = 3;\n\nprint(foo.x + \" \" + x); \/\/ shows: 3 a\n<\/pre>","severity": "Minor","tags": []}]}]}